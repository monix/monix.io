Index.PACKAGES = {"monix.execution.rstreams" : [{"name" : "monix.execution.rstreams.ReactivePullStrategy", "shortDescription" : "Describes a strategy of buffering data when converting a Publisher into otherdata types like monix.tail.Iterant.", "object" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html", "members_class" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "default", "tail" : ": ReactivePullStrategy", "member" : "monix.execution.rstreams.ReactivePullStrategy.default", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#default:monix.execution.rstreams.ReactivePullStrategy", "kind" : "implicit val"}, {"label" : "FixedWindow", "tail" : "", "member" : "monix.execution.rstreams.ReactivePullStrategy.FixedWindow", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#FixedWindowextendsReactivePullStrategywithProductwithSerializable", "kind" : "final case class"}, {"label" : "StopAndWait", "tail" : "", "member" : "monix.execution.rstreams.ReactivePullStrategy.StopAndWait", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#StopAndWait", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/ReactivePullStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/rstreams\/ReactivePullStrategy.html", "kind" : "class"}, {"name" : "monix.execution.rstreams.SingleAssignSubscription", "shortDescription" : "Represents a org.reactivestreams.Subscription that can be assignedonly once to another subscription reference.", "object" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html", "members_class" : [{"label" : "request", "tail" : "(n: Long): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.request", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#request(n:Long):Unit", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.cancel", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#cancel():Unit", "kind" : "def"}, {"label" : "set", "tail" : "(s: org.reactivestreams.Subscription): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.set", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#set(s:org.reactivestreams.Subscription):Unit", "kind" : "def"}, {"label" : ":=", "tail" : "(s: org.reactivestreams.Subscription): Unit", "member" : "monix.execution.rstreams.SingleAssignSubscription.:=", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#:=(s:org.reactivestreams.Subscription):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): SingleAssignSubscription", "member" : "monix.execution.rstreams.SingleAssignSubscription.apply", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#apply():monix.execution.rstreams.SingleAssignSubscription", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/SingleAssignSubscription$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/rstreams\/SingleAssignSubscription.html", "kind" : "class"}, {"name" : "monix.execution.rstreams.Subscription", "object" : "monix\/execution\/rstreams\/Subscription$.html", "members_object" : [{"label" : "empty", "tail" : ": Subscription", "member" : "monix.execution.rstreams.Subscription.empty", "link" : "monix\/execution\/rstreams\/Subscription$.html#empty:monix.execution.rstreams.Subscription", "kind" : "val"}, {"label" : "apply", "tail" : "(ref: org.reactivestreams.Subscription): Subscription", "member" : "monix.execution.rstreams.Subscription.apply", "link" : "monix\/execution\/rstreams\/Subscription$.html#apply(ref:org.reactivestreams.Subscription):monix.execution.rstreams.Subscription", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/Subscription$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/Subscription$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/Subscription$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/Subscription$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/Subscription$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/Subscription$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/Subscription$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/Subscription$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/Subscription$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/Subscription$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/Subscription$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/Subscription$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/Subscription$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/Subscription$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/rstreams\/Subscription.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/rstreams\/Subscription.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/rstreams\/Subscription.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/rstreams\/Subscription.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/rstreams\/Subscription.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/rstreams\/Subscription.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/rstreams\/Subscription.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/rstreams\/Subscription.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/rstreams\/Subscription.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/rstreams\/Subscription.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/rstreams\/Subscription.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/rstreams\/Subscription.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/rstreams\/Subscription.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/rstreams\/Subscription.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/rstreams\/Subscription.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/rstreams\/Subscription.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/rstreams\/Subscription.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "request", "tail" : "(n: Long): Unit", "member" : "monix.execution.rstreams.Subscription.request", "link" : "monix\/execution\/rstreams\/Subscription.html#request(n:Long):Unit", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/rstreams\/Subscription.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "The Subscription represents a cross between theMonix Cancelable andorg.reactivestreams.Subcription."}], "monix.reactive.instances" : [{"name" : "monix.reactive.instances.CatsProfunctorForSubject", "shortDescription" : "cats.arrow.Profunctor type class instance for Subject.", "object" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html", "members_object" : [{"label" : "dimap", "tail" : "(source: Subject[A, B])(f: (C) => A)(g: (B) => D): Subject[C, D]", "member" : "monix.reactive.instances.CatsProfunctorForSubject.dimap", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#dimap[A,B,C,D](source:monix.reactive.subjects.Subject[A,B])(f:C=>A)(g:B=>D):monix.reactive.subjects.Subject[C,D]", "kind" : "def"}, {"label" : "rightWiden", "tail" : "(fab: Subject[A, B]): Subject[A, BB]", "member" : "cats.arrow.Profunctor.rightWiden", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#rightWiden[A,B,BB>:B](fab:F[A,B]):F[A,BB]", "kind" : "def"}, {"label" : "leftNarrow", "tail" : "(fab: Subject[A, B]): Subject[AA, B]", "member" : "cats.arrow.Profunctor.leftNarrow", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#leftNarrow[A,B,AA<:A](fab:F[A,B]):F[AA,B]", "kind" : "def"}, {"label" : "rmap", "tail" : "(fab: Subject[A, B])(f: (B) => C): Subject[A, C]", "member" : "cats.arrow.Profunctor.rmap", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#rmap[A,B,C](fab:F[A,B])(f:B=>C):F[A,C]", "kind" : "def"}, {"label" : "lmap", "tail" : "(fab: Subject[A, B])(f: (C) => A): Subject[C, B]", "member" : "cats.arrow.Profunctor.lmap", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#lmap[A,B,C](fab:F[A,B])(f:C=>A):F[C,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/instances\/CatsProfunctorForSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.execution.schedulers" : [{"name" : "monix.execution.schedulers.AsyncScheduler", "shortDescription" : "An AsyncScheduler schedules tasks to happen in the future with thegiven ScheduledExecutorService and the tasks themselves are executed onthe given ExecutionContext.", "object" : "monix\/execution\/schedulers\/AsyncScheduler$.html", "members_class" : [{"label" : "features", "tail" : ": Features", "member" : "monix.execution.schedulers.AsyncScheduler.features", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#features:monix.execution.Features", "kind" : "val"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): AsyncScheduler", "member" : "monix.execution.schedulers.AsyncScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.AsyncScheduler", "kind" : "def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.AsyncScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.AsyncScheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleOnce(initialDelay:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.AsyncScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#executeAsync(runnable:Runnable):Unit", "kind" : "def"}, {"label" : "executionModel", "tail" : ": ExecutionModel", "member" : "monix.execution.schedulers.AsyncScheduler.executionModel", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "val"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.schedulers.ReferenceScheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(schedulerService: ScheduledExecutorService, ec: ExecutionContext, executionModel: ExecutionModel, reporter: UncaughtExceptionReporter): AsyncScheduler", "member" : "monix.execution.schedulers.AsyncScheduler.apply", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#apply(schedulerService:java.util.concurrent.ScheduledExecutorService,ec:scala.concurrent.ExecutionContext,executionModel:monix.execution.ExecutionModel,reporter:monix.execution.UncaughtExceptionReporter):monix.execution.schedulers.AsyncScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/AsyncScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/AsyncScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.BatchingScheduler", "trait" : "monix\/execution\/schedulers\/BatchingScheduler.html", "kind" : "trait", "members_trait" : [{"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "features", "tail" : "(): Features", "member" : "monix.execution.Scheduler.features", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#features:monix.execution.Features", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "abstract def"}, {"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.Scheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "abstract def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): Scheduler", "member" : "monix.execution.Scheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "abstract def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/BatchingScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}], "shortDescription" : "Adds trampoline execution capabilities toschedulers, wheninherited."}, {"name" : "monix.execution.schedulers.CanBlock", "shortDescription" : "Marker for blocking operations that need to be disallowed on top ofJavaScript engines, or other platforms that don't support the blockingof threads.", "object" : "monix\/execution\/schedulers\/CanBlock$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/CanBlock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/CanBlock.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/CanBlock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/CanBlock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/CanBlock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/CanBlock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/CanBlock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/CanBlock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/CanBlock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/CanBlock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/CanBlock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/CanBlock.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/CanBlock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/CanBlock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "permit", "tail" : ": CanBlock", "member" : "monix.execution.schedulers.CanBlock.permit", "link" : "monix\/execution\/schedulers\/CanBlock$.html#permit:monix.execution.schedulers.CanBlock", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/CanBlock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/CanBlock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/CanBlock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/CanBlock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/CanBlock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/CanBlock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/CanBlock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/CanBlock$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/CanBlock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/CanBlock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/CanBlock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/CanBlock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/CanBlock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/CanBlock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/CanBlock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/CanBlock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/CanBlock.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.ExecutorScheduler", "shortDescription" : "An ExecutorScheduler is a class for building aSchedulerServiceout of a Java ExecutorService.", "object" : "monix\/execution\/schedulers\/ExecutorScheduler$.html", "members_class" : [{"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): SchedulerService", "member" : "monix.execution.schedulers.ExecutorScheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.ExecutorScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "awaitTermination", "tail" : "(timeout: Long, unit: TimeUnit, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.ExecutorScheduler.awaitTermination", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#awaitTermination(timeout:Long,unit:concurrent.duration.TimeUnit,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "final def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "monix.execution.schedulers.ExecutorScheduler.shutdown", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#shutdown():Unit", "kind" : "final def"}, {"label" : "isTerminated", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.ExecutorScheduler.isTerminated", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#isTerminated:Boolean", "kind" : "final def"}, {"label" : "isShutdown", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.ExecutorScheduler.isShutdown", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#isShutdown:Boolean", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.ExecutorScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.ExecutorScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executeAsync(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "executor", "tail" : "(): ExecutorService", "member" : "monix.execution.schedulers.ExecutorScheduler.executor", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executor:java.util.concurrent.ExecutorService", "kind" : "def"}, {"member" : "monix.execution.schedulers.ExecutorScheduler#<init>", "error" : "unsupported entity"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "awaitTermination", "tail" : "(timeout: FiniteDuration)(permit: CanBlock): Boolean", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#awaitTermination(timeout:scala.concurrent.duration.FiniteDuration)(implicitpermit:monix.execution.schedulers.CanBlock):Boolean", "kind" : "final def"}, {"label" : "awaitTermination", "tail" : "(timeout: FiniteDuration, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#awaitTermination(timeout:scala.concurrent.duration.FiniteDuration,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "final def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "features", "tail" : "(): Features", "member" : "monix.execution.Scheduler.features", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#features:monix.execution.Features", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/ExecutorScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "forkJoinDynamic", "tail" : "(name: String, parallelism: Int, maxThreads: Int, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): ExecutorScheduler", "member" : "monix.execution.schedulers.ExecutorScheduler.forkJoinDynamic", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#forkJoinDynamic(name:String,parallelism:Int,maxThreads:Int,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.ExecutorScheduler", "kind" : "def"}, {"label" : "forkJoinStatic", "tail" : "(name: String, parallelism: Int, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): ExecutorScheduler", "member" : "monix.execution.schedulers.ExecutorScheduler.forkJoinStatic", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#forkJoinStatic(name:String,parallelism:Int,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.ExecutorScheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(service: ExecutorService, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): ExecutorScheduler", "member" : "monix.execution.schedulers.ExecutorScheduler.apply", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#apply(service:java.util.concurrent.ExecutorService,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.ExecutorScheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(service: ExecutorService, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel, features: Features): ExecutorScheduler", "member" : "monix.execution.schedulers.ExecutorScheduler.apply", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#apply(service:java.util.concurrent.ExecutorService,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel,features:monix.execution.Features):monix.execution.schedulers.ExecutorScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ExecutorScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/ExecutorScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.ReferenceScheduler", "object" : "monix\/execution\/schedulers\/ReferenceScheduler$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/schedulers\/ReferenceScheduler.html", "kind" : "trait", "members_trait" : [{"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.schedulers.ReferenceScheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.ReferenceScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.ReferenceScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "features", "tail" : "(): Features", "member" : "monix.execution.Scheduler.features", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#features:monix.execution.Features", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(command: Runnable): Unit", "member" : "monix.execution.Scheduler.execute", "link" : "monix\/execution\/schedulers\/ReferenceScheduler.html#execute(command:Runnable):Unit", "kind" : "abstract def"}], "shortDescription" : "Helper for building a Scheduler."}, {"name" : "monix.execution.schedulers.SchedulerService", "object" : "monix\/execution\/schedulers\/SchedulerService$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.execution.schedulers.SchedulerService.Extensions", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#ExtensionsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/SchedulerService$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/schedulers\/SchedulerService.html", "kind" : "trait", "members_trait" : [{"label" : "awaitTermination", "tail" : "(timeout: FiniteDuration)(permit: CanBlock): Boolean", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/SchedulerService.html#awaitTermination(timeout:scala.concurrent.duration.FiniteDuration)(implicitpermit:monix.execution.schedulers.CanBlock):Boolean", "kind" : "final def"}, {"label" : "awaitTermination", "tail" : "(timeout: FiniteDuration, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/SchedulerService.html#awaitTermination(timeout:scala.concurrent.duration.FiniteDuration,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "final def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/SchedulerService.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/SchedulerService.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "features", "tail" : "(): Features", "member" : "monix.execution.Scheduler.features", "link" : "monix\/execution\/schedulers\/SchedulerService.html#features:monix.execution.Features", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/SchedulerService.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/SchedulerService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/SchedulerService.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/SchedulerService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/SchedulerService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/SchedulerService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/SchedulerService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/SchedulerService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/SchedulerService.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/SchedulerService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/SchedulerService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/SchedulerService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/SchedulerService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/SchedulerService.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/SchedulerService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/SchedulerService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/SchedulerService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): SchedulerService", "member" : "monix.execution.schedulers.SchedulerService.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/SchedulerService.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.schedulers.SchedulerService", "kind" : "abstract def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerService.withExecutionModel", "link" : "monix\/execution\/schedulers\/SchedulerService.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "abstract def"}, {"label" : "awaitTermination", "tail" : "(timeout: Long, unit: TimeUnit, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/SchedulerService.html#awaitTermination(timeout:Long,unit:concurrent.duration.TimeUnit,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "monix.execution.schedulers.SchedulerService.shutdown", "link" : "monix\/execution\/schedulers\/SchedulerService.html#shutdown():Unit", "kind" : "abstract def"}, {"label" : "isTerminated", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.SchedulerService.isTerminated", "link" : "monix\/execution\/schedulers\/SchedulerService.html#isTerminated:Boolean", "kind" : "abstract def"}, {"label" : "isShutdown", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.SchedulerService.isShutdown", "link" : "monix\/execution\/schedulers\/SchedulerService.html#isShutdown:Boolean", "kind" : "abstract def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/schedulers\/SchedulerService.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/schedulers\/SchedulerService.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/SchedulerService.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/SchedulerService.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/SchedulerService.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(command: Runnable): Unit", "member" : "monix.execution.Scheduler.execute", "link" : "monix\/execution\/schedulers\/SchedulerService.html#execute(command:Runnable):Unit", "kind" : "abstract def"}], "shortDescription" : "A Scheduler type that providesmethods for managing termination."}, {"name" : "monix.execution.schedulers.ShiftedRunnable", "shortDescription" : "Runnable that defers the execution of the given referencewith an executeAsync.", "members_class" : [{"label" : "run", "tail" : "(): Unit", "member" : "monix.execution.schedulers.ShiftedRunnable.run", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#run():Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.ShiftedRunnable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/ShiftedRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/ShiftedRunnable.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.StartAsyncBatchRunnable", "shortDescription" : "Forces a real asynchronous boundary before executing thegiven TrampolinedRunnable.", "members_case class" : [{"label" : "run", "tail" : "(): Unit", "member" : "monix.execution.schedulers.StartAsyncBatchRunnable.run", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#run():Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.StartAsyncBatchRunnable#<init>", "error" : "unsupported entity"}, {"label" : "s", "tail" : ": Scheduler", "member" : "monix.execution.schedulers.StartAsyncBatchRunnable.s", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#s:monix.execution.Scheduler", "kind" : "val"}, {"label" : "start", "tail" : ": TrampolinedRunnable", "member" : "monix.execution.schedulers.StartAsyncBatchRunnable.start", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#start:monix.execution.schedulers.TrampolinedRunnable", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/execution\/schedulers\/StartAsyncBatchRunnable.html", "kind" : "case class"}, {"name" : "monix.execution.schedulers.TestScheduler", "shortDescription" : "Scheduler and a provider of cats.effect.Timer instances,that can simulate async boundaries and time passage, useful fortesting purposes.", "object" : "monix\/execution\/schedulers\/TestScheduler$.html", "members_class" : [{"label" : "tick", "tail" : "(time: FiniteDuration, maxImmediateTasks: Option[Int]): Unit", "member" : "monix.execution.schedulers.TestScheduler.tick", "link" : "monix\/execution\/schedulers\/TestScheduler.html#tick(time:scala.concurrent.duration.FiniteDuration,maxImmediateTasks:Option[Int]):Unit", "kind" : "def"}, {"label" : "tickOne", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.TestScheduler.tickOne", "link" : "monix\/execution\/schedulers\/TestScheduler.html#tickOne():Boolean", "kind" : "def"}, {"label" : "features", "tail" : ": Features", "member" : "monix.execution.schedulers.TestScheduler.features", "link" : "monix\/execution\/schedulers\/TestScheduler.html#features:monix.execution.Features", "kind" : "val"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TestScheduler", "member" : "monix.execution.schedulers.TestScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/TestScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TestScheduler", "kind" : "def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TestScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/TestScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.TestScheduler.executeAsync", "link" : "monix\/execution\/schedulers\/TestScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TestScheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TestScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/TestScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TestScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/TestScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "state", "tail" : "(): State", "member" : "monix.execution.schedulers.TestScheduler.state", "link" : "monix\/execution\/schedulers\/TestScheduler.html#state:monix.execution.schedulers.TestScheduler.State", "kind" : "def"}, {"label" : "executionModel", "tail" : ": ExecutionModel", "member" : "monix.execution.schedulers.TestScheduler.executionModel", "link" : "monix\/execution\/schedulers\/TestScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "val"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/TestScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.schedulers.ReferenceScheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/TestScheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.ReferenceScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/TestScheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/TestScheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TestScheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TestScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TestScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TestScheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TestScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TestScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TestScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TestScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TestScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TestScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TestScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TestScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TestScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TestScheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TestScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TestScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "State", "tail" : "", "member" : "monix.execution.schedulers.TestScheduler.State", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#StateextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Task", "tail" : "", "member" : "monix.execution.schedulers.TestScheduler.Task", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#Task", "kind" : "object"}, {"label" : "Task", "tail" : "", "member" : "monix.execution.schedulers.TestScheduler.Task", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#TaskextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "apply", "tail" : "(executionModel: ExecutionModel): TestScheduler", "member" : "monix.execution.schedulers.TestScheduler.apply", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#apply(executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.TestScheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(): TestScheduler", "member" : "monix.execution.schedulers.TestScheduler.apply", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#apply():monix.execution.schedulers.TestScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TestScheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TestScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TestScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TracingRunnable", "shortDescription" : "Wraps a Runnable into one that restores the givenLocal.Contextupon execution of run().", "members_class" : [{"label" : "run", "tail" : "(): Unit", "member" : "monix.execution.schedulers.TracingRunnable.run", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#run():Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.TracingRunnable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingRunnable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TracingRunnable.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TracingScheduler", "shortDescription" : "The TracingScheduler is a Schedulerimplementation that wraps another Scheduler reference, butthat propagates the Local.Contexton async execution.", "object" : "monix\/execution\/schedulers\/TracingScheduler$.html", "members_class" : [{"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.schedulers.TracingScheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TracingScheduler", "member" : "monix.execution.schedulers.TracingScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TracingScheduler", "kind" : "def"}, {"label" : "features", "tail" : ": Features", "member" : "monix.execution.schedulers.TracingScheduler.Base.features", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#features:monix.execution.Features", "kind" : "final val"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.schedulers.TracingScheduler.Base.executionModel", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "final def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockMonotonic", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockRealTime", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.reportFailure", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleOnce", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.executeAsync", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#executeAsync(r:Runnable):Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingScheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: ExecutionContext): TracingScheduler", "member" : "monix.execution.schedulers.TracingScheduler.apply", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#apply(underlying:scala.concurrent.ExecutionContext):monix.execution.schedulers.TracingScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TracingScheduler.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TracingSchedulerService", "shortDescription" : "The TracingScheduler is a Schedulerimplementation that wraps anotherSchedulerServicereference, with the purpose of propagating theLocal.Context on asyncexecution.", "object" : "monix\/execution\/schedulers\/TracingSchedulerService$.html", "members_class" : [{"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): TracingSchedulerService", "member" : "monix.execution.schedulers.TracingSchedulerService.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.schedulers.TracingSchedulerService", "kind" : "def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TracingSchedulerService", "member" : "monix.execution.schedulers.TracingSchedulerService.withExecutionModel", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TracingSchedulerService", "kind" : "def"}, {"label" : "awaitTermination", "tail" : "(timeout: Long, unit: TimeUnit, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.TracingSchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#awaitTermination(timeout:Long,unit:concurrent.duration.TimeUnit,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "monix.execution.schedulers.TracingSchedulerService.shutdown", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#shutdown():Unit", "kind" : "def"}, {"label" : "isTerminated", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.TracingSchedulerService.isTerminated", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#isTerminated:Boolean", "kind" : "def"}, {"label" : "isShutdown", "tail" : "(): Boolean", "member" : "monix.execution.schedulers.TracingSchedulerService.isShutdown", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#isShutdown:Boolean", "kind" : "def"}, {"member" : "monix.execution.schedulers.TracingSchedulerService#<init>", "error" : "unsupported entity"}, {"label" : "awaitTermination", "tail" : "(timeout: FiniteDuration)(permit: CanBlock): Boolean", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#awaitTermination(timeout:scala.concurrent.duration.FiniteDuration)(implicitpermit:monix.execution.schedulers.CanBlock):Boolean", "kind" : "final def"}, {"label" : "awaitTermination", "tail" : "(timeout: FiniteDuration, awaitOn: ExecutionContext): Future[Boolean]", "member" : "monix.execution.schedulers.SchedulerService.awaitTermination", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#awaitTermination(timeout:scala.concurrent.duration.FiniteDuration,awaitOn:scala.concurrent.ExecutionContext):scala.concurrent.Future[Boolean]", "kind" : "final def"}, {"label" : "features", "tail" : ": Features", "member" : "monix.execution.schedulers.TracingScheduler.Base.features", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#features:monix.execution.Features", "kind" : "final val"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.schedulers.TracingScheduler.Base.executionModel", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#executionModel:monix.execution.ExecutionModel", "kind" : "final def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockMonotonic", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TracingScheduler.Base.clockRealTime", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.reportFailure", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#reportFailure(t:Throwable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TracingScheduler.Base.scheduleOnce", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(r: Runnable): Unit", "member" : "monix.execution.schedulers.TracingScheduler.Base.executeAsync", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#executeAsync(r:Runnable):Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.BatchingScheduler.execute", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#execute(runnable:Runnable):Unit", "kind" : "final def"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: SchedulerService): TracingSchedulerService", "member" : "monix.execution.schedulers.TracingSchedulerService.apply", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#apply(underlying:monix.execution.schedulers.SchedulerService):monix.execution.schedulers.TracingSchedulerService", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TracingSchedulerService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TracingSchedulerService.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TrampolinedRunnable", "trait" : "monix\/execution\/schedulers\/TrampolinedRunnable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(): Unit", "member" : "java.lang.Runnable.run", "link" : "monix\/execution\/schedulers\/TrampolinedRunnable.html#run():Unit", "kind" : "abstract def"}], "shortDescription" : "A marker for callbacks that can be batched and executedlocally (on the current thread) by means of a trampoline(if the execution context \/ scheduler allows it)."}, {"name" : "monix.execution.schedulers.TrampolineExecutionContext", "shortDescription" : "A scala.concurrentExecutionContext implementationthat executes runnables immediately, on the current thread,by means of a trampoline implementation.", "object" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html", "members_class" : [{"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TrampolineExecutionContext.reportFailure", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.TrampolineExecutionContext.execute", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#execute(runnable:Runnable):Unit", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "immediate", "tail" : ": TrampolineExecutionContext", "member" : "monix.execution.schedulers.TrampolineExecutionContext.immediate", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#immediate:monix.execution.schedulers.TrampolineExecutionContext", "kind" : "val"}, {"label" : "apply", "tail" : "(underlying: ExecutionContext): TrampolineExecutionContext", "member" : "monix.execution.schedulers.TrampolineExecutionContext.apply", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#apply(underlying:scala.concurrent.ExecutionContext):monix.execution.schedulers.TrampolineExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineExecutionContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TrampolineExecutionContext.html", "kind" : "class"}, {"name" : "monix.execution.schedulers.TrampolineScheduler", "shortDescription" : "A Scheduler implementationthat executes runnables immediately, on the current thread,by means of a trampoline implementation.", "object" : "monix\/execution\/schedulers\/TrampolineScheduler$.html", "members_class" : [{"label" : "features", "tail" : "(): Features", "member" : "monix.execution.schedulers.TrampolineScheduler.features", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#features:monix.execution.Features", "kind" : "def"}, {"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): TrampolineScheduler", "member" : "monix.execution.schedulers.TrampolineScheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.schedulers.TrampolineScheduler", "kind" : "def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): TrampolineScheduler", "member" : "monix.execution.schedulers.TrampolineScheduler.withExecutionModel", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.schedulers.TrampolineScheduler", "kind" : "def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TrampolineScheduler.clockMonotonic", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#clockMonotonic(unit:java.util.concurrent.TimeUnit):Long", "kind" : "def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.schedulers.TrampolineScheduler.clockRealTime", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#clockRealTime(unit:java.util.concurrent.TimeUnit):Long", "kind" : "def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TrampolineScheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TrampolineScheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.schedulers.TrampolineScheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleOnce(initialDelay:Long,unit:java.util.concurrent.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.schedulers.TrampolineScheduler.reportFailure", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#reportFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(runnable: Runnable): Unit", "member" : "monix.execution.schedulers.TrampolineScheduler.execute", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#execute(runnable:Runnable):Unit", "kind" : "def"}, {"member" : "monix.execution.schedulers.TrampolineScheduler#<init>", "error" : "unsupported entity"}, {"label" : "executionModel", "tail" : ": ExecutionModel", "member" : "monix.execution.schedulers.TrampolineScheduler.executionModel", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "val"}, {"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: Scheduler, em: ExecutionModel): TrampolineScheduler", "member" : "monix.execution.schedulers.TrampolineScheduler.apply", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#apply(underlying:monix.execution.Scheduler,em:monix.execution.ExecutionModel):monix.execution.schedulers.TrampolineScheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/schedulers\/TrampolineScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/schedulers\/TrampolineScheduler.html", "kind" : "class"}], "monix.reactive.observables" : [{"name" : "monix.reactive.observables.CachedObservable", "shortDescription" : "A CachedObservable is an observable that wraps a regularObservable, initiating the connection on the firstsubscribe() and then staying connected for as long asthe source is emitting.", "object" : "monix\/reactive\/observables\/CachedObservable$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.observables.CachedObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/CachedObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/observables\/CachedObservable.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/CachedObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/CachedObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/observables\/CachedObservable.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/CachedObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/observables\/CachedObservable.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/CachedObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/CachedObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/observables\/CachedObservable.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/CachedObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/CachedObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/CachedObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/observables\/CachedObservable.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/CachedObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/observables\/CachedObservable.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/CachedObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/observables\/CachedObservable.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/CachedObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/CachedObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/CachedObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/CachedObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/observables\/CachedObservable.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/observables\/CachedObservable.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/observables\/CachedObservable.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/observables\/CachedObservable.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/CachedObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/CachedObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/observables\/CachedObservable.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/CachedObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/CachedObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/observables\/CachedObservable.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/CachedObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/observables\/CachedObservable.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/CachedObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/observables\/CachedObservable.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/CachedObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/CachedObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/CachedObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/CachedObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/CachedObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/CachedObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/CachedObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/CachedObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/CachedObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/CachedObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/CachedObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/CachedObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/CachedObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/observables\/CachedObservable.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/CachedObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/CachedObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/observables\/CachedObservable.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/CachedObservable.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/CachedObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/CachedObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/CachedObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/observables\/CachedObservable.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/observables\/CachedObservable.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/CachedObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/CachedObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/CachedObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/CachedObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/CachedObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/CachedObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/CachedObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/CachedObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/CachedObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/CachedObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/CachedObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/CachedObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/CachedObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/CachedObservable.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/observables\/CachedObservable.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/CachedObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/CachedObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/observables\/CachedObservable.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/observables\/CachedObservable.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/observables\/CachedObservable.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/observables\/CachedObservable.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/CachedObservable.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/observables\/CachedObservable.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/observables\/CachedObservable.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/CachedObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/CachedObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/CachedObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/observables\/CachedObservable.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/observables\/CachedObservable.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/CachedObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/observables\/CachedObservable.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/observables\/CachedObservable.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/CachedObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/CachedObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/observables\/CachedObservable.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/CachedObservable.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/CachedObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/CachedObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/CachedObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/CachedObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/CachedObservable.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/CachedObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/CachedObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/CachedObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/CachedObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/CachedObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/observables\/CachedObservable.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/CachedObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/CachedObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/CachedObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/CachedObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/observables\/CachedObservable.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/CachedObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/observables\/CachedObservable.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/observables\/CachedObservable.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/observables\/CachedObservable.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/observables\/CachedObservable.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/CachedObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/observables\/CachedObservable.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/CachedObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/observables\/CachedObservable.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/CachedObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/observables\/CachedObservable.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/CachedObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/CachedObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/CachedObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/CachedObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/CachedObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/CachedObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/CachedObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/CachedObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/CachedObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/CachedObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/CachedObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/CachedObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/CachedObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/CachedObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/CachedObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/CachedObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/CachedObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/CachedObservable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/CachedObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/CachedObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/CachedObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/CachedObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/CachedObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/CachedObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/CachedObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/CachedObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/CachedObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/CachedObservable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/CachedObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/CachedObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "create", "tail" : "(observable: Observable[A], maxCapacity: Int): Observable[A]", "member" : "monix.reactive.observables.CachedObservable.create", "link" : "monix\/reactive\/observables\/CachedObservable$.html#create[A](observable:monix.reactive.Observable[A],maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "create", "tail" : "(observable: Observable[A]): Observable[A]", "member" : "monix.reactive.observables.CachedObservable.create", "link" : "monix\/reactive\/observables\/CachedObservable$.html#create[A](observable:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/CachedObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/CachedObservable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/CachedObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/CachedObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/CachedObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/CachedObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/CachedObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CachedObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/CachedObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/CachedObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/CachedObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/CachedObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/CachedObservable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/CachedObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/CachedObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/CachedObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/CachedObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.ChainedObservable", "shortDescription" : "A StackedObservable is an Observable type used in operators thatend up being used in loops and that need to be memory safe(e.g.", "object" : "monix\/reactive\/observables\/ChainedObservable$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.observables.ChainedObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"member" : "monix.reactive.observables.ChainedObservable#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/observables\/ChainedObservable.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/ChainedObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/observables\/ChainedObservable.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/observables\/ChainedObservable.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/observables\/ChainedObservable.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/observables\/ChainedObservable.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/ChainedObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/observables\/ChainedObservable.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/observables\/ChainedObservable.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/ChainedObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/observables\/ChainedObservable.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/observables\/ChainedObservable.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/observables\/ChainedObservable.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/ChainedObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/ChainedObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ChainedObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ChainedObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/ChainedObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/ChainedObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/ChainedObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/ChainedObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/ChainedObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/ChainedObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/ChainedObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/ChainedObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/observables\/ChainedObservable.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/ChainedObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/observables\/ChainedObservable.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/ChainedObservable.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/ChainedObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/ChainedObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/ChainedObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/ChainedObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/ChainedObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/ChainedObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/ChainedObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/ChainedObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/ChainedObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/ChainedObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/ChainedObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/ChainedObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/ChainedObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/ChainedObservable.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/observables\/ChainedObservable.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/ChainedObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/ChainedObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/observables\/ChainedObservable.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/observables\/ChainedObservable.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/ChainedObservable.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/observables\/ChainedObservable.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/observables\/ChainedObservable.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/ChainedObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/observables\/ChainedObservable.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/observables\/ChainedObservable.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/ChainedObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/observables\/ChainedObservable.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/observables\/ChainedObservable.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/ChainedObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/ChainedObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/observables\/ChainedObservable.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/ChainedObservable.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/ChainedObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/ChainedObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/ChainedObservable.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/ChainedObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/ChainedObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/ChainedObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/ChainedObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/ChainedObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/observables\/ChainedObservable.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/ChainedObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/ChainedObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/ChainedObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/ChainedObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/observables\/ChainedObservable.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/ChainedObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/ChainedObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/observables\/ChainedObservable.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/ChainedObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/observables\/ChainedObservable.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/ChainedObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/observables\/ChainedObservable.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/ChainedObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/ChainedObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/ChainedObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/ChainedObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ChainedObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ChainedObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/ChainedObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ChainedObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ChainedObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/ChainedObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/ChainedObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/ChainedObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ChainedObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ChainedObservable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ChainedObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ChainedObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ChainedObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ChainedObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ChainedObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ChainedObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ChainedObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ChainedObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ChainedObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ChainedObservable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ChainedObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ChainedObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(conn: Multi, subscriber: Subscriber[A]): Unit", "member" : "monix.reactive.observables.ChainedObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ChainedObservable.html#unsafeSubscribeFn(conn:monix.execution.cancelables.AssignableCancelable.Multi,subscriber:monix.reactive.observers.Subscriber[A]):Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "subscribe", "tail" : "(source: Observable[A], conn: Multi, out: Subscriber[A]): Unit", "member" : "monix.reactive.observables.ChainedObservable.subscribe", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#subscribe[A](source:monix.reactive.Observable[A],conn:monix.execution.cancelables.AssignableCancelable.Multi,out:monix.reactive.observers.Subscriber[A]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ChainedObservable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ChainedObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/ChainedObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.CombineObservable", "shortDescription" : "Newtype encoding for an Observable datatype that has a cats.Applyinstance which uses Observable.combineLatest to combine elementsneeded for implementing cats.NonEmptyParallel", "object" : "monix\/reactive\/observables\/CombineObservable$.html", "members_object" : [{"label" : "Tag", "tail" : "", "member" : "monix.execution.internal.Newtype1.Tag", "link" : "monix\/reactive\/observables\/CombineObservable$.html#TagextendsAny", "kind" : "trait"}, {"label" : "combineObservableApplicative", "tail" : ": Apply[Type]", "member" : "monix.reactive.observables.CombineObservable.combineObservableApplicative", "link" : "monix\/reactive\/observables\/CombineObservable$.html#combineObservableApplicative:cats.Apply[monix.reactive.observables.CombineObservable.Type]", "kind" : "implicit val"}, {"label" : "unwrap", "tail" : "(fa: Type[A]): Observable[A]", "member" : "monix.execution.internal.Newtype1.unwrap", "link" : "monix\/reactive\/observables\/CombineObservable$.html#unwrap[A](fa:Newtype1.this.Type[A]):F[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(fa: Observable[A]): Type[A]", "member" : "monix.execution.internal.Newtype1.apply", "link" : "monix\/reactive\/observables\/CombineObservable$.html#apply[A](fa:F[A]):Newtype1.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/CombineObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/CombineObservable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/CombineObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/CombineObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/CombineObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/CombineObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/CombineObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CombineObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CombineObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/CombineObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/CombineObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/CombineObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/CombineObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/CombineObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/CombineObservable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/CombineObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/CombineObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/CombineObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/CombineObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "monix.execution.internal.Newtype1.Type", "error" : "unsupported entity"}, {"member" : "monix.execution.internal.Newtype1.Base", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "monix.reactive.observables.ConnectableObservable", "shortDescription" : "Represents an Observable that waits forthe call to connect() beforestarting to emit elements to its subscriber(s).", "object" : "monix\/reactive\/observables\/ConnectableObservable$.html", "members_class" : [{"label" : "refCount", "tail" : "(): Observable[A]", "member" : "monix.reactive.observables.ConnectableObservable.refCount", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#refCount:monix.reactive.Observable[A]", "kind" : "final def"}, {"member" : "monix.reactive.observables.ConnectableObservable#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ConnectableObservable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "connect", "tail" : "(): Cancelable", "member" : "monix.reactive.observables.ConnectableObservable.connect", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#connect():monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/ConnectableObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "cacheUntilConnect", "tail" : "(source: Observable[A], subject: Subject[A, B])(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.observables.ConnectableObservable.cacheUntilConnect", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#cacheUntilConnect[A,B](source:monix.reactive.Observable[A],subject:monix.reactive.subjects.Subject[A,B])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "def"}, {"label" : "multicast", "tail" : "(source: Observable[A], recipe: Pipe[A, B])(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.observables.ConnectableObservable.multicast", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#multicast[A,B](source:monix.reactive.Observable[A],recipe:monix.reactive.Pipe[A,B])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "def"}, {"label" : "unsafeMulticast", "tail" : "(source: Observable[A], subject: Subject[A, B])(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.observables.ConnectableObservable.unsafeMulticast", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#unsafeMulticast[A,B](source:monix.reactive.Observable[A],subject:monix.reactive.subjects.Subject[A,B])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/ConnectableObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/ConnectableObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.GroupedObservable", "shortDescription" : "A GroupedObservable is an observable type generatedby Observable.groupBy.", "object" : "monix\/reactive\/observables\/GroupedObservable$.html", "members_class" : [{"member" : "monix.reactive.observables.GroupedObservable#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : "(transformer: Transformer[V, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/observables\/GroupedObservable.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (V) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/GroupedObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[V]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/observables\/GroupedObservable.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (V) => K)(K: Order[K]): Observable[V]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (V) => K)(K: Order[K]): Task[Option[V]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/observables\/GroupedObservable.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (V) => K)(K: Order[K]): Observable[V]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (V) => K)(K: Order[K]): Task[Option[V]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[V]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[V]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/observables\/GroupedObservable.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/observables\/GroupedObservable.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[V]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, V) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, V) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[V]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/GroupedObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/observables\/GroupedObservable.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (V) => F[Boolean])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (V) => Task[Boolean]): Observable[V]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/observables\/GroupedObservable.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/GroupedObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (V) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (V) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[V]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[V]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, V) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, V) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/observables\/GroupedObservable.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (V) => Boolean): Task[Option[V]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/observables\/GroupedObservable.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/observables\/GroupedObservable.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[V]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/GroupedObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/GroupedObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/GroupedObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/GroupedObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(V, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/GroupedObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (V, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(V, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/GroupedObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (V, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (V, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (V, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (V, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (V, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (V, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/GroupedObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (V) => S)(aggregate: (S, V) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/GroupedObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/GroupedObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/GroupedObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/GroupedObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/GroupedObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/observables\/GroupedObservable.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/GroupedObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[V]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[V]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[V]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/observables\/GroupedObservable.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[V]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[V]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[V]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[V]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/GroupedObservable.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/GroupedObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/GroupedObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/GroupedObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[V]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (V) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (V) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, V) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, V) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, V) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, V) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, V) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, V) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, V) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[V]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/GroupedObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/GroupedObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/GroupedObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/GroupedObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[V]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/GroupedObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[V]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/GroupedObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[V]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[V]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/GroupedObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/GroupedObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[V]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (V) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[V, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (V) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[V, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/GroupedObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[V]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/GroupedObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (V) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (V) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (V) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (V) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (V) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (V) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/GroupedObservable.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/observables\/GroupedObservable.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/GroupedObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/GroupedObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/observables\/GroupedObservable.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/observables\/GroupedObservable.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (V) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, V]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/GroupedObservable.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (V) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/observables\/GroupedObservable.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (V) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/observables\/GroupedObservable.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/GroupedObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (V) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[V, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, V) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, V) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, V) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, V) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (V) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (V) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (V) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (V) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (V) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/observables\/GroupedObservable.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (V) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/observables\/GroupedObservable.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (V) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/GroupedObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/observables\/GroupedObservable.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/observables\/GroupedObservable.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/GroupedObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[V]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/GroupedObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/observables\/GroupedObservable.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/GroupedObservable.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/GroupedObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/GroupedObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[V]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (V, Int) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (V) => Boolean): Observable[V]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[V]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[V]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (V) => F[Unit])(F: Effect[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (V) => Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (V, Ack) => F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (V, Ack) => Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (V) => F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (V) => Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[V]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[V]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/GroupedObservable.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (V) => K)(K: Eq[K]): Observable[V]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/GroupedObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/GroupedObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[V, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/GroupedObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[V]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[V]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (V) => Observable[B]): Observable[V]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/GroupedObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/GroupedObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (V) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[V]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/observables\/GroupedObservable.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (V) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/GroupedObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/GroupedObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (V, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/GroupedObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(V, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/GroupedObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[V, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/observables\/GroupedObservable.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[V, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/GroupedObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (V) => Observable[B])(release: (V, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (V) => Observable[B])(release: (V, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (V) => Observable[B])(release: (V) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (V) => Observable[B])(release: (V) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[V]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (V) => Boolean): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (V) => Boolean): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[V]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/GroupedObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/observables\/GroupedObservable.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/GroupedObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/observables\/GroupedObservable.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/GroupedObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[V, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/observables\/GroupedObservable.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[V, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/GroupedObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[V, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/GroupedObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (V) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/GroupedObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[V]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[V]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/GroupedObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/GroupedObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/GroupedObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/GroupedObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[V]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/GroupedObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[V]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/GroupedObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[V]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/GroupedObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[V]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/GroupedObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/GroupedObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (V) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (V) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (V) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[V]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[V])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/GroupedObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[V])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/GroupedObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/GroupedObservable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/GroupedObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/GroupedObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/GroupedObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/GroupedObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/GroupedObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/GroupedObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/GroupedObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/GroupedObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/GroupedObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/GroupedObservable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/GroupedObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/GroupedObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "key", "tail" : "(): K", "member" : "monix.reactive.observables.GroupedObservable.key", "link" : "monix\/reactive\/observables\/GroupedObservable.html#key:K", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[V]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/GroupedObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/GroupedObservable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/GroupedObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/GroupedObservable.html", "kind" : "class"}, {"name" : "monix.reactive.observables.RefCountObservable", "shortDescription" : "A RefCountObservable is an observable that wraps aConnectableObservable, initiating the connection on the firstsubscribe() and then staying connected as long as there is at leastone subscription active.", "object" : "monix\/reactive\/observables\/RefCountObservable$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.observables.RefCountObservable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/observables\/RefCountObservable.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/observables\/RefCountObservable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/observables\/RefCountObservable.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/observables\/RefCountObservable.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/observables\/RefCountObservable.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/observables\/RefCountObservable.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/observables\/RefCountObservable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/observables\/RefCountObservable.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/observables\/RefCountObservable.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/observables\/RefCountObservable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/observables\/RefCountObservable.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/observables\/RefCountObservable.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/observables\/RefCountObservable.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/observables\/RefCountObservable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/observables\/RefCountObservable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/RefCountObservable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/observables\/RefCountObservable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/observables\/RefCountObservable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/observables\/RefCountObservable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/observables\/RefCountObservable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/observables\/RefCountObservable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/observables\/RefCountObservable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/observables\/RefCountObservable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/observables\/RefCountObservable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/observables\/RefCountObservable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/observables\/RefCountObservable.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/observables\/RefCountObservable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/observables\/RefCountObservable.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/RefCountObservable.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/observables\/RefCountObservable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/observables\/RefCountObservable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/observables\/RefCountObservable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/observables\/RefCountObservable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/observables\/RefCountObservable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/observables\/RefCountObservable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/observables\/RefCountObservable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/observables\/RefCountObservable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/observables\/RefCountObservable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/observables\/RefCountObservable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/observables\/RefCountObservable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/observables\/RefCountObservable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/observables\/RefCountObservable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/observables\/RefCountObservable.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/observables\/RefCountObservable.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/observables\/RefCountObservable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/observables\/RefCountObservable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/observables\/RefCountObservable.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/observables\/RefCountObservable.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/observables\/RefCountObservable.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/observables\/RefCountObservable.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/observables\/RefCountObservable.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/observables\/RefCountObservable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/observables\/RefCountObservable.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/observables\/RefCountObservable.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/observables\/RefCountObservable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/observables\/RefCountObservable.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/observables\/RefCountObservable.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/observables\/RefCountObservable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/observables\/RefCountObservable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/observables\/RefCountObservable.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/observables\/RefCountObservable.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/observables\/RefCountObservable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/observables\/RefCountObservable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/observables\/RefCountObservable.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/observables\/RefCountObservable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/observables\/RefCountObservable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/observables\/RefCountObservable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/observables\/RefCountObservable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/observables\/RefCountObservable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/observables\/RefCountObservable.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/observables\/RefCountObservable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/observables\/RefCountObservable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/observables\/RefCountObservable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/observables\/RefCountObservable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/observables\/RefCountObservable.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/observables\/RefCountObservable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/observables\/RefCountObservable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/observables\/RefCountObservable.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/observables\/RefCountObservable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/observables\/RefCountObservable.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/observables\/RefCountObservable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/observables\/RefCountObservable.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/observables\/RefCountObservable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/observables\/RefCountObservable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/observables\/RefCountObservable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/observables\/RefCountObservable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/RefCountObservable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/observables\/RefCountObservable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/observables\/RefCountObservable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/RefCountObservable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/observables\/RefCountObservable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/observables\/RefCountObservable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/observables\/RefCountObservable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/observables\/RefCountObservable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/observables\/RefCountObservable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/observables\/RefCountObservable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/RefCountObservable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/RefCountObservable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/RefCountObservable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/RefCountObservable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/RefCountObservable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/RefCountObservable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/RefCountObservable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/RefCountObservable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/RefCountObservable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/RefCountObservable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/RefCountObservable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/RefCountObservable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/RefCountObservable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/RefCountObservable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(connectable: ConnectableObservable[A]): Observable[A]", "member" : "monix.reactive.observables.RefCountObservable.apply", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#apply[A](connectable:monix.reactive.observables.ConnectableObservable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observables\/RefCountObservable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observables\/RefCountObservable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observables\/RefCountObservable.html", "kind" : "class"}], "monix.eval.instances" : [{"name" : "monix.eval.instances.CatsAsyncForTask", "shortDescription" : "Cats type class instance of Taskfor  cats.effect.Async and CoflatMap (and implicitly forApplicative, Monad, MonadError, etc).", "members_class" : [{"label" : "guaranteeCase", "tail" : "(acquire: Task[A])(finalizer: (ExitCase[Throwable]) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.guaranteeCase", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#guaranteeCase[A](acquire:monix.eval.Task[A])(finalizer:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(acquire: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.guarantee", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#guarantee[A](acquire:monix.eval.Task[A])(finalizer:monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.asyncF", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsAsyncForTask.bracketCase", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#bracketCase[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsAsyncForTask.bracket", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#bracket[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:A=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.async", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.suspend", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.delay", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsAsyncForTask#<init>", "error" : "unsupported entity"}, {"label" : "never", "tail" : "(): Task[A]", "member" : "cats.effect.Async.never", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Async.liftIO", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Task[A]): Task[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Task[A]) => Task[A]): Task[A]", "member" : "cats.Defer.fix", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "cats.effect.Bracket.uncancelable", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#uncancelable[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[A], tb: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.combineK", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#combineK[A](ta:monix.eval.Task[A],tb:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) => A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) => Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[A], fb: Task[B])(F: Functor[Task]): Task[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Task[A], y: Eval[Task[A]]): Eval[Task[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[A])(recover: (Throwable) => Task[B], bind: (A) => Task[B]): Task[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[EE, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Task[Boolean], Task[A])*)(els: Task[A]): Task[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: => Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: => Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: => Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: => Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Option[A]]): Task[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[A]): Task[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: => Task[B], ifFalse: => Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) => Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Task, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[A])(recover: (Throwable) => B, f: (A) => B): Task[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Boolean])(ifTrue: Task[A], ifFalse: Task[A]): Task[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) => Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Boolean])(ifTrue: => A, ifFalse: => A): Task[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[(A, B)]): (Task[A], Task[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Task[A])(f: (A) => B): Task[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) => B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[A]) => Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) => B)(g: (B) => A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsAsyncForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsAsyncForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsBaseForTask", "shortDescription" : "Cats type class instances for Taskfor  cats.MonadError and CoflatMap (and implicitly forApplicative, Monad, etc).", "members_class" : [{"label" : "combineK", "tail" : "(ta: Task[A], tb: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.combineK", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#combineK[A](ta:monix.eval.Task[A],tb:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) => A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) => Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsBaseForTask#<init>", "error" : "unsupported entity"}, {"label" : "sum", "tail" : "(fa: Task[A], fb: Task[B])(F: Functor[Task]): Task[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Task[A], y: Eval[Task[A]]): Eval[Task[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[A])(recover: (Throwable) => Task[B], bind: (A) => Task[B]): Task[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[EE, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Task[Boolean], Task[A])*)(els: Task[A]): Task[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: => Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: => Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: => Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: => Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Option[A]]): Task[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[A]): Task[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: => Task[B], ifFalse: => Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) => Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Task, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[A])(recover: (Throwable) => B, f: (A) => B): Task[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Boolean])(ifTrue: Task[A], ifFalse: Task[A]): Task[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) => Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Boolean])(ifTrue: => A, ifFalse: => A): Task[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[(A, B)]): (Task[A], Task[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Task[A])(f: (A) => B): Task[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) => B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[A]) => Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) => B)(g: (B) => A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsBaseForTask.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsBaseForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsBaseForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsConcurrentEffectForTask", "shortDescription" : "Cats type class instances of Task forcats.effect.ConcurrentEffect.", "members_class" : [{"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.race", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.racePair", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Task[A]): Task[Fiber[A]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.start", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#start[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Fiber[A]]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.uncancelable", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#uncancelable[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) => Unit) => CancelToken[Task]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.cancelable", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.CancelToken[monix.eval.Task]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "runCancelable", "tail" : "(fa: Task[A])(cb: (Either[Throwable, A]) => IO[Unit]): SyncIO[CancelToken[Task]]", "member" : "monix.eval.instances.CatsConcurrentEffectForTask.runCancelable", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#runCancelable[A](fa:monix.eval.Task[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.SyncIO[cats.effect.CancelToken[monix.eval.Task]]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsConcurrentEffectForTask#<init>", "error" : "unsupported entity"}, {"label" : "toIO", "tail" : "(fa: Task[A]): IO[A]", "member" : "cats.effect.ConcurrentEffect.toIO", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#toIO[A](fa:F[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "continual", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[B]", "member" : "cats.effect.Concurrent.continual", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#continual[A,B](fa:F[A])(f:scala.util.Either[Throwable,A]=>F[B]):F[B]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: Task[A]): Resource[Task, Task[A]]", "member" : "cats.effect.Concurrent.background", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#background[A](fa:F[A]):cats.effect.Resource[F,F[A]]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsEffectForTask.bracketCase", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#bracketCase[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsEffectForTask.bracket", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#bracket[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:A=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.asyncF", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.async", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.suspend", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.delay", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "runAsync", "tail" : "(fa: Task[A])(cb: (Either[Throwable, A]) => IO[Unit]): SyncIO[Unit]", "member" : "monix.eval.instances.CatsEffectForTask.runAsync", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#runAsync[A](fa:monix.eval.Task[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.SyncIO[Unit]", "kind" : "def"}, {"label" : "never", "tail" : "(): Task[A]", "member" : "cats.effect.Async.never", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Task[A]): Task[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Task[A]) => Task[A]): Task[A]", "member" : "cats.Defer.fix", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: Task[A])(finalizer: (ExitCase[Throwable]) => Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.guaranteeCase", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#guaranteeCase[A](fa:F[A])(finalizer:cats.effect.ExitCase[E]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.guarantee", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#guarantee[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[A], tb: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.combineK", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#combineK[A](ta:monix.eval.Task[A],tb:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) => A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) => Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[A], fb: Task[B])(F: Functor[Task]): Task[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Task[A], y: Eval[Task[A]]): Eval[Task[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[A])(recover: (Throwable) => Task[B], bind: (A) => Task[B]): Task[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[EE, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Task[Boolean], Task[A])*)(els: Task[A]): Task[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: => Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: => Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: => Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: => Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Option[A]]): Task[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[A]): Task[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: => Task[B], ifFalse: => Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) => Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Task, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[A])(recover: (Throwable) => B, f: (A) => B): Task[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Boolean])(ifTrue: Task[A], ifFalse: Task[A]): Task[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) => Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Boolean])(ifTrue: => A, ifFalse: => A): Task[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[(A, B)]): (Task[A], Task[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Task[A])(f: (A) => B): Task[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) => B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[A]) => Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) => B)(g: (B) => A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsConcurrentEffectForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsConcurrentForTask", "shortDescription" : "Cats type class instance of Taskfor  cats.effect.Concurrent.", "object" : "monix\/eval\/instances\/CatsConcurrentForTask$.html", "members_class" : [{"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.instances.CatsConcurrentForTask.race", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.instances.CatsConcurrentForTask.racePair", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Task[A]): Task[Fiber[A]]", "member" : "monix.eval.instances.CatsConcurrentForTask.start", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#start[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Fiber[A]]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.uncancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#uncancelable[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) => Unit) => CancelToken[Task]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.cancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.CancelToken[monix.eval.Task]):monix.eval.Task[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsConcurrentForTask#<init>", "error" : "unsupported entity"}, {"label" : "continual", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[B]", "member" : "cats.effect.Concurrent.continual", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#continual[A,B](fa:F[A])(f:scala.util.Either[Throwable,A]=>F[B]):F[B]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: Task[A]): Resource[Task, Task[A]]", "member" : "cats.effect.Concurrent.background", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#background[A](fa:F[A]):cats.effect.Resource[F,F[A]]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(acquire: Task[A])(finalizer: (ExitCase[Throwable]) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.guaranteeCase", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#guaranteeCase[A](acquire:monix.eval.Task[A])(finalizer:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(acquire: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.guarantee", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#guarantee[A](acquire:monix.eval.Task[A])(finalizer:monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.asyncF", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsAsyncForTask.bracketCase", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#bracketCase[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsAsyncForTask.bracket", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#bracket[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:A=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.async", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.suspend", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.delay", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Task[A]", "member" : "cats.effect.Async.never", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Task[A]): Task[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Task[A]) => Task[A]): Task[A]", "member" : "cats.Defer.fix", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[A], tb: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.combineK", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#combineK[A](ta:monix.eval.Task[A],tb:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) => A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) => Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[A], fb: Task[B])(F: Functor[Task]): Task[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Task[A], y: Eval[Task[A]]): Eval[Task[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[A])(recover: (Throwable) => Task[B], bind: (A) => Task[B]): Task[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[EE, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Task[Boolean], Task[A])*)(els: Task[A]): Task[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: => Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: => Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: => Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: => Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Option[A]]): Task[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[A]): Task[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: => Task[B], ifFalse: => Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) => Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Task, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[A])(recover: (Throwable) => B, f: (A) => B): Task[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Boolean])(ifTrue: Task[A], ifFalse: Task[A]): Task[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) => Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Boolean])(ifTrue: => A, ifFalse: => A): Task[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[(A, B)]): (Task[A], Task[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Task[A])(f: (A) => B): Task[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) => B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[A]) => Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) => B)(g: (B) => A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.instances.CatsConcurrentForTask.race", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.instances.CatsConcurrentForTask.racePair", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Task[A]): Task[Fiber[A]]", "member" : "monix.eval.instances.CatsConcurrentForTask.start", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#start[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Fiber[A]]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.uncancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#uncancelable[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) => Unit) => CancelToken[Task]): Task[A]", "member" : "monix.eval.instances.CatsConcurrentForTask.cancelable", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.CancelToken[monix.eval.Task]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "continual", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[B]", "member" : "cats.effect.Concurrent.continual", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#continual[A,B](fa:F[A])(f:scala.util.Either[Throwable,A]=>F[B]):F[B]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: Task[A]): Resource[Task, Task[A]]", "member" : "cats.effect.Concurrent.background", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#background[A](fa:F[A]):cats.effect.Resource[F,F[A]]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(acquire: Task[A])(finalizer: (ExitCase[Throwable]) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.guaranteeCase", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#guaranteeCase[A](acquire:monix.eval.Task[A])(finalizer:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(acquire: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.guarantee", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#guarantee[A](acquire:monix.eval.Task[A])(finalizer:monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.asyncF", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsAsyncForTask.bracketCase", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#bracketCase[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsAsyncForTask.bracket", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#bracket[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:A=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.async", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.suspend", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Task[A]", "member" : "monix.eval.instances.CatsAsyncForTask.delay", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Task[A]", "member" : "cats.effect.Async.never", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#never[A]:F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Task[A]): Task[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Task[A]) => Task[A]): Task[A]", "member" : "cats.Defer.fix", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[A], tb: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.combineK", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#combineK[A](ta:monix.eval.Task[A],tb:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) => A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) => Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[A], fb: Task[B])(F: Functor[Task]): Task[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Task[A], y: Eval[Task[A]]): Eval[Task[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[A])(recover: (Throwable) => Task[B], bind: (A) => Task[B]): Task[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[EE, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Task[Boolean], Task[A])*)(els: Task[A]): Task[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: => Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: => Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: => Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: => Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Option[A]]): Task[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[A]): Task[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: => Task[B], ifFalse: => Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) => Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Task, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[A])(recover: (Throwable) => B, f: (A) => B): Task[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Boolean])(ifTrue: Task[A], ifFalse: Task[A]): Task[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) => Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Boolean])(ifTrue: => A, ifFalse: => A): Task[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[(A, B)]): (Task[A], Task[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Task[A])(f: (A) => B): Task[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) => B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[A]) => Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) => B)(g: (B) => A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsConcurrentForTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsConcurrentForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsEffectForTask", "shortDescription" : "Cats type class instances of Task forcats.effect.Effect (and implicitly for Applicative, Monad,MonadError, Sync, etc).", "members_class" : [{"label" : "bracketCase", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsEffectForTask.bracketCase", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#bracketCase[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Task[A])(use: (A) => Task[B])(release: (A) => Task[Unit]): Task[B]", "member" : "monix.eval.instances.CatsEffectForTask.bracket", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#bracket[A,B](acquire:monix.eval.Task[A])(use:A=>monix.eval.Task[B])(release:A=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Task[Unit]): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.asyncF", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.async", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.suspend", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Task[A]", "member" : "monix.eval.instances.CatsEffectForTask.delay", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#delay[A](thunk:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "runAsync", "tail" : "(fa: Task[A])(cb: (Either[Throwable, A]) => IO[Unit]): SyncIO[Unit]", "member" : "monix.eval.instances.CatsEffectForTask.runAsync", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#runAsync[A](fa:monix.eval.Task[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.SyncIO[Unit]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsEffectForTask#<init>", "error" : "unsupported entity"}, {"label" : "toIO", "tail" : "(fa: Task[A]): IO[A]", "member" : "cats.effect.Effect.toIO", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#toIO[A](fa:F[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Task[A]", "member" : "cats.effect.Async.never", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "cats.effect.Async.liftIO", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Task[A]): Task[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Task[A]) => Task[A]): Task[A]", "member" : "cats.Defer.fix", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: Task[A])(finalizer: (ExitCase[Throwable]) => Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.guaranteeCase", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#guaranteeCase[A](fa:F[A])(finalizer:cats.effect.ExitCase[E]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: Task[A])(finalizer: Task[Unit]): Task[A]", "member" : "cats.effect.Bracket.guarantee", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#guarantee[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Task[A]): Task[A]", "member" : "cats.effect.Bracket.uncancelable", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#uncancelable[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[A], tb: Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.combineK", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#combineK[A](ta:monix.eval.Task[A],tb:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[A]): Task[Task[A]]", "member" : "monix.eval.instances.CatsBaseForTask.coflatten", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#coflatten[A](fa:monix.eval.Task[A]):monix.eval.Task[monix.eval.Task[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[A])(f: (Task[A]) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.coflatMap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#coflatMap[A,B](fa:monix.eval.Task[A])(f:monix.eval.Task[A]=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.fromTry", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[A]): Task[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsBaseForTask.attempt", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#attempt[A](fa:monix.eval.Task[A]):monix.eval.Task[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recoverWith", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#recoverWith[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.recover", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#recover[A](fa:monix.eval.Task[A])(pf:PartialFunction[Throwable,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[A])(f: (Throwable) => Task[A]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#handleErrorWith[A](fa:monix.eval.Task[A])(f:Throwable=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[A])(f: (Throwable) => A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.handleError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#handleError[A](fa:monix.eval.Task[A])(f:Throwable=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.raiseError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#raiseError[A](e:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.map", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map[A,B](fa:monix.eval.Task[A])(f:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[A], fb: Task[B]): Task[(A, B)]", "member" : "monix.eval.instances.CatsBaseForTask.product", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#product[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[A], fb: Task[B])(f: (A, B) => Z): Task[Z]", "member" : "monix.eval.instances.CatsBaseForTask.map2", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map2[A,B,Z](fa:monix.eval.Task[A],fb:monix.eval.Task[B])(f:(A,B)=>Z):monix.eval.Task[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.ap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap[A,B](ff:monix.eval.Task[A=>B])(fa:monix.eval.Task[A]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Either[A, B]]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.tailRecM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Task[A]]): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.flatten", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#flatten[A](ffa:monix.eval.Task[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[B]", "member" : "monix.eval.instances.CatsBaseForTask.flatMap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#flatMap[A,B](fa:monix.eval.Task[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.instances.CatsBaseForTask.unit", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.instances.CatsBaseForTask.pure", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[A], fb: Task[B])(F: Functor[Task]): Task[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Task[A], y: Eval[Task[A]]): Eval[Task[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Throwable]): Task[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Task[A])(f: (Either[Throwable, A]) => Task[B]): Task[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[A])(recover: (Throwable) => Task[B], bind: (A) => Task[B]): Task[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Either[EE, A]]): Task[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[A])(error: => Throwable)(predicate: (A) => Boolean): Task[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Task[Boolean], Task[A])*)(els: Task[A]): Task[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[A])(p: (A) => Boolean): Task[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[A])(cond: => Task[Boolean]): Task[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[A])(cond: => Task[Boolean])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Boolean])(body: => Task[A]): Task[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Boolean])(body: => Task[A])(G: Alternative[G]): Task[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Option[A]]): Task[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[A]): Task[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Boolean])(ifTrue: => Task[B], ifFalse: => Task[B]): Task[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[A])(f: (A) => Task[B]): Task[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[(A, B) => Z])(fa: Task[A], fb: Task[B]): Task[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[A])(fb: Eval[Task[B]]): Task[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Task, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[A])(pf: PartialFunction[Throwable, Task[Unit]]): Task[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[A])(recover: (Throwable) => B, f: (A) => B): Task[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[A]): EitherT[Task, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[A]): Task[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[A]): Task[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Boolean])(ifTrue: Task[A], ifFalse: Task[A]): Task[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[A], fb: Eval[Task[B]])(f: (A, B) => Z): Eval[Task[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[A])(fb: Task[B]): Task[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[A])(fb: Task[B]): Task[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[(A) => B])(fa: Task[A]): Task[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20], f21: Task[A21]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19], f20: Task[A20]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18], f19: Task[A19]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17], f18: Task[A18]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16], f17: Task[A17]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15], f16: Task[A16]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14], f15: Task[A15]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13], f14: Task[A14]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12], f13: Task[A13]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11], f12: Task[A12]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10], f11: Task[A11]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9], f10: Task[A10]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8], f9: Task[A9]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7], f8: Task[A8]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6], f7: Task[A7]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5], f6: Task[A6]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[(A0, A1, A2, A3, A4, A5) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4], f5: Task[A5]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[(A0, A1, A2, A3, A4) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3], f4: Task[A4]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3])(f: (A0, A1, A2, A3) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[(A0, A1, A2, A3) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2], f3: Task[A3]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[A0], f1: Task[A1], f2: Task[A2])(f: (A0, A1, A2) => Z): Task[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[(A0, A1, A2) => Z])(f0: Task[A0], f1: Task[A1], f2: Task[A2]): Task[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[A], f2: Task[B]): Task[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Boolean])(ifTrue: => A, ifFalse: => A): Task[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[(A, B)]): (Task[A], Task[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[A], b: B): Task[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[A], b: B): Task[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[A], b: B): Task[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Task[A])(f: (A) => B): Task[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[A])(f: (A) => B): Task[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[A]): Task[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[A]) => Task[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[A]): Task[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[A])(f: (A) => B): Task[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[A])(f: (A) => B)(g: (B) => A): Task[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsEffectForTask.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsEffectForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsEffectForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsMonadToMonoid", "shortDescription" : "Given that A has a cats.Semigroup implementation, thisbuilds a Semigroup[F[A]] instance for any F[_] data typethat implements cats.Monad.", "members_class" : [{"label" : "empty", "tail" : "(): F[A]", "member" : "monix.eval.instances.CatsMonadToMonoid.empty", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#empty:F[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsMonadToMonoid#<init>", "error" : "unsupported entity"}, {"label" : "reverse", "tail" : "(): Monoid[F[A]]", "member" : "cats.kernel.Monoid.reverse", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#reverse:cats.kernel.Monoid[A]", "kind" : "def"}, {"label" : "combineAllOption", "tail" : "(as: IterableOnce[F[A]]): Option[F[A]]", "member" : "cats.kernel.Monoid.combineAllOption", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combineAllOption(as:IterableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(as: IterableOnce[F[A]]): F[A]", "member" : "cats.kernel.Monoid.combineAll", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combineAll(as:IterableOnce[A]):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Monoid.combineN", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: F[A])(ev: Eq[F[A]]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "combine", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "monix.eval.instances.CatsMonadToSemigroup.combine", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#combine(x:F[A],y:F[A]):F[A]", "kind" : "def"}, {"label" : "intercalate", "tail" : "(middle: F[A]): Semigroup[F[A]]", "member" : "cats.kernel.Semigroup.intercalate", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#intercalate(middle:A):cats.kernel.Semigroup[A]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsMonadToMonoid.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsMonadToSemigroup", "shortDescription" : "Given that A has a cats.Monoid implementation, this buildsa Semigroup[F[A]] instance for any F[_] data type thatimplements cats.effect.Sync.", "members_class" : [{"label" : "combine", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "monix.eval.instances.CatsMonadToSemigroup.combine", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#combine(x:F[A],y:F[A]):F[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsMonadToSemigroup#<init>", "error" : "unsupported entity"}, {"label" : "intercalate", "tail" : "(middle: F[A]): Semigroup[F[A]]", "member" : "cats.kernel.Semigroup.intercalate", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#intercalate(middle:A):cats.kernel.Semigroup[A]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Semigroup[F[A]]", "member" : "cats.kernel.Semigroup.reverse", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#reverse:cats.kernel.Semigroup[A]", "kind" : "def"}, {"label" : "combineAllOption", "tail" : "(as: IterableOnce[F[A]]): Option[F[A]]", "member" : "cats.kernel.Semigroup.combineAllOption", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#combineAllOption(as:IterableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.combineN", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsMonadToSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsMonadToSemigroup.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsParallelForTask", "shortDescription" : "cats.Parallel type class instance for Task.", "object" : "monix\/eval\/instances\/CatsParallelForTask$.html", "members_class" : [{"label" : "parallel", "tail" : ": ~>[Task, Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.parallel", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parallel:monix.eval.Task~>monix.eval.Task.Par", "kind" : "val"}, {"label" : "sequential", "tail" : ": ~>[Task.Par, Task]", "member" : "monix.eval.instances.CatsParallelForTask.sequential", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#sequential:monix.eval.Task.Par~>monix.eval.Task", "kind" : "val"}, {"label" : "monad", "tail" : "(): Monad[Task]", "member" : "monix.eval.instances.CatsParallelForTask.monad", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#monad:cats.Monad[monix.eval.Task]", "kind" : "def"}, {"label" : "applicative", "tail" : "(): Applicative[Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.applicative", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#applicative:cats.Applicative[monix.eval.Task.Par]", "kind" : "def"}, {"label" : "F", "tail" : "", "member" : "monix.eval.instances.CatsParallelForTask.F", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#F[A]=monix.eval.Task.Par[A]", "kind" : "type"}, {"member" : "monix.eval.instances.CatsParallelForTask#<init>", "error" : "unsupported entity"}, {"label" : "applicativeError", "tail" : "(E: MonadError[Task, E]): ApplicativeError[F, E]", "member" : "cats.Parallel.applicativeError", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#applicativeError[E](implicitE:cats.MonadError[M,E]):cats.ApplicativeError[Parallel.this.F,E]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(): FlatMap[Task]", "member" : "cats.Parallel.flatMap", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#flatMap:cats.FlatMap[M]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Apply[F]", "member" : "cats.Parallel.apply", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#apply:cats.Apply[Parallel.this.F]", "kind" : "def"}, {"label" : "parProductL", "tail" : "(ma: Task[A])(mb: Task[B]): Task[A]", "member" : "cats.NonEmptyParallel.parProductL", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parProductL[A,B](ma:M[A])(mb:M[B]):M[A]", "kind" : "def"}, {"label" : "parProductR", "tail" : "(ma: Task[A])(mb: Task[B]): Task[B]", "member" : "cats.NonEmptyParallel.parProductR", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#parProductR[A,B](ma:M[A])(mb:M[B]):M[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsParallelForTask.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parallel", "tail" : ": ~>[Task, Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.parallel", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parallel:monix.eval.Task~>monix.eval.Task.Par", "kind" : "val"}, {"label" : "sequential", "tail" : ": ~>[Task.Par, Task]", "member" : "monix.eval.instances.CatsParallelForTask.sequential", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#sequential:monix.eval.Task.Par~>monix.eval.Task", "kind" : "val"}, {"label" : "monad", "tail" : "(): Monad[Task]", "member" : "monix.eval.instances.CatsParallelForTask.monad", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#monad:cats.Monad[monix.eval.Task]", "kind" : "def"}, {"label" : "applicative", "tail" : "(): Applicative[Task.Par]", "member" : "monix.eval.instances.CatsParallelForTask.applicative", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#applicative:cats.Applicative[monix.eval.Task.Par]", "kind" : "def"}, {"label" : "F", "tail" : "", "member" : "monix.eval.instances.CatsParallelForTask.F", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#F[A]=monix.eval.Task.Par[A]", "kind" : "type"}, {"label" : "applicativeError", "tail" : "(E: MonadError[Task, E]): ApplicativeError[F, E]", "member" : "cats.Parallel.applicativeError", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#applicativeError[E](implicitE:cats.MonadError[M,E]):cats.ApplicativeError[Parallel.this.F,E]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(): FlatMap[Task]", "member" : "cats.Parallel.flatMap", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#flatMap:cats.FlatMap[M]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Apply[F]", "member" : "cats.Parallel.apply", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#apply:cats.Apply[Parallel.this.F]", "kind" : "def"}, {"label" : "parProductL", "tail" : "(ma: Task[A])(mb: Task[B]): Task[A]", "member" : "cats.NonEmptyParallel.parProductL", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parProductL[A,B](ma:M[A])(mb:M[B]):M[A]", "kind" : "def"}, {"label" : "parProductR", "tail" : "(ma: Task[A])(mb: Task[B]): Task[B]", "member" : "cats.NonEmptyParallel.parProductR", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#parProductR[A,B](ma:M[A])(mb:M[B]):M[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsParallelForTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsParallelForTask.html", "kind" : "class"}, {"name" : "monix.eval.instances.CatsSyncForCoeval", "shortDescription" : "Cats type class instances for Coeval.", "object" : "monix\/eval\/instances\/CatsSyncForCoeval$.html", "members_class" : [{"label" : "runSync", "tail" : "(fa: Coeval[A])(G: Sync[G]): G[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.runSync", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#runSync[G[_],A](fa:monix.eval.Coeval[A])(implicitG:cats.effect.Sync[G]):G[A]", "kind" : "def"}, {"label" : "combineK", "tail" : "(x: Coeval[A], y: Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.combineK", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#combineK[A](x:monix.eval.Coeval[A],y:monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Coeval[A])(use: (A) => Coeval[B])(release: (A, ExitCase[Throwable]) => Coeval[Unit]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.bracketCase", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#bracketCase[A,B](acquire:monix.eval.Coeval[A])(use:A=>monix.eval.Coeval[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Coeval[A])(use: (A) => Coeval[B])(release: (A) => Coeval[Unit]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.bracket", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#bracket[A,B](acquire:monix.eval.Coeval[A])(use:A=>monix.eval.Coeval[B])(release:A=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Coeval[A]): Coeval[Coeval[A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#coflatten[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[monix.eval.Coeval[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Coeval[A])(f: (Coeval[A]) => B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#coflatMap[A,B](fa:monix.eval.Coeval[A])(f:monix.eval.Coeval[A]=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.fromTry", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Coeval[A]): Coeval[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.attempt", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#attempt[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recoverWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#recoverWith[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recover", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#recover[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Coeval[A])(f: (Throwable) => Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleErrorWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#handleErrorWith[A](fa:monix.eval.Coeval[A])(f:Throwable=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Coeval[A])(f: (Throwable) => A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#handleError[A](fa:monix.eval.Coeval[A])(f:Throwable=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.raiseError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#raiseError[A](e:Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.map", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map[A,B](fa:monix.eval.Coeval[A])(f:A=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Coeval[A], fb: Coeval[B])(f: (A, B) => Z): Coeval[Z]", "member" : "monix.eval.instances.CatsSyncForCoeval.map2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map2[A,B,Z](fa:monix.eval.Coeval[A],fb:monix.eval.Coeval[B])(f:(A,B)=>Z):monix.eval.Coeval[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Coeval[(A) => B])(fa: Coeval[A]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.ap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap[A,B](ff:monix.eval.Coeval[A=>B])(fa:monix.eval.Coeval[A]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Coeval[Either[A, B]]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.tailRecM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Coeval[Either[A,B]]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Coeval[Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#flatten[A](ffa:monix.eval.Coeval[monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Coeval[A])(f: (A) => Coeval[B]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#flatMap[A,B](fa:monix.eval.Coeval[A])(f:A=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Coeval[Unit]", "member" : "monix.eval.instances.CatsSyncForCoeval.unit", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#unit:monix.eval.Coeval[Unit]", "kind" : "val"}, {"label" : "suspend", "tail" : "(fa: => Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.suspend", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#suspend[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.delay", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#delay[A](thunk:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.pure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#pure[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"member" : "monix.eval.instances.CatsSyncForCoeval#<init>", "error" : "unsupported entity"}, {"label" : "sum", "tail" : "(fa: Coeval[A], fb: Coeval[B])(F: Functor[Coeval]): Coeval[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Coeval[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Coeval[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Coeval[A], y: Eval[Coeval[A]]): Eval[Coeval[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "runSyncK", "tail" : "(G: Sync[G]): ~>[Coeval, G]", "member" : "cats.effect.SyncEffect.runSyncK", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#runSyncK[G[_<:<?>]](implicitG:cats.effect.Sync[G]):F~>G", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Coeval[A]): Coeval[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Coeval[A]) => Coeval[A]): Coeval[A]", "member" : "cats.Defer.fix", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Coeval[A])(finalizer: Coeval[Unit]): Coeval[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: Coeval[A])(finalizer: (ExitCase[Throwable]) => Coeval[Unit]): Coeval[A]", "member" : "cats.effect.Bracket.guaranteeCase", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#guaranteeCase[A](fa:F[A])(finalizer:cats.effect.ExitCase[E]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: Coeval[A])(finalizer: Coeval[Unit]): Coeval[A]", "member" : "cats.effect.Bracket.guarantee", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#guarantee[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Coeval[A]): Coeval[A]", "member" : "cats.effect.Bracket.uncancelable", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#uncancelable[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Throwable]): Coeval[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Coeval[A])(f: (Either[Throwable, A]) => Coeval[B]): Coeval[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Coeval[A])(recover: (Throwable) => Coeval[B], bind: (A) => Coeval[B]): Coeval[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Coeval[Either[EE, A]]): Coeval[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Coeval[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Coeval[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Coeval[A])(error: => Throwable)(predicate: (A) => Boolean): Coeval[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Coeval[Boolean], Coeval[A])*)(els: Coeval[A]): Coeval[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Coeval[A])(cond: => Coeval[Boolean]): Coeval[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Coeval[A])(cond: => Coeval[Boolean])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Coeval[Boolean])(body: => Coeval[A]): Coeval[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Coeval[Boolean])(body: => Coeval[A])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Coeval[Option[A]]): Coeval[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Coeval[A]): Coeval[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Coeval[A]): Coeval[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Coeval[A])(f: (A) => Coeval[B]): Coeval[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Coeval[Boolean])(ifTrue: => Coeval[B], ifFalse: => Coeval[B]): Coeval[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Coeval[A])(f: (A) => Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Coeval[(A, B) => Z])(fa: Coeval[A], fb: Coeval[B]): Coeval[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Coeval[A], fb: Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.product", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Coeval[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Coeval[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Coeval[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Coeval, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[Unit]]): Coeval[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Coeval[A])(recover: (Throwable) => B, f: (A) => B): Coeval[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Coeval[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Coeval[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Coeval[A]): EitherT[Coeval, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Coeval[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Coeval[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Coeval[A]): Coeval[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Coeval[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Coeval[Boolean])(ifTrue: Coeval[A], ifFalse: Coeval[A]): Coeval[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Coeval[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Coeval[A], fb: Eval[Coeval[B]])(f: (A, B) => Z): Eval[Coeval[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Coeval[(A) => B])(fa: Coeval[A]): Coeval[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4])(f: (A0, A1, A2, A3, A4) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3])(f: (A0, A1, A2, A3) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Coeval[(A0, A1, A2, A3) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2])(f: (A0, A1, A2) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Coeval[(A0, A1, A2) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Coeval[A], f2: Coeval[B]): Coeval[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Coeval[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Coeval[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Coeval[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Coeval[Boolean])(ifTrue: => A, ifFalse: => A): Coeval[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Coeval[(A, B)]): (Coeval[A], Coeval[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Coeval[A], b: B): Coeval[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Coeval[A], b: B): Coeval[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Coeval[A], b: B): Coeval[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Coeval[A]): Coeval[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Coeval[A]) => Coeval[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Coeval[A]): Coeval[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Coeval[A])(f: (A) => B)(g: (B) => A): Coeval[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "runSync", "tail" : "(fa: Coeval[A])(G: Sync[G]): G[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.runSync", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#runSync[G[_],A](fa:monix.eval.Coeval[A])(implicitG:cats.effect.Sync[G]):G[A]", "kind" : "def"}, {"label" : "combineK", "tail" : "(x: Coeval[A], y: Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.combineK", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#combineK[A](x:monix.eval.Coeval[A],y:monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Coeval[A])(use: (A) => Coeval[B])(release: (A, ExitCase[Throwable]) => Coeval[Unit]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.bracketCase", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#bracketCase[A,B](acquire:monix.eval.Coeval[A])(use:A=>monix.eval.Coeval[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Coeval[A])(use: (A) => Coeval[B])(release: (A) => Coeval[Unit]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.bracket", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#bracket[A,B](acquire:monix.eval.Coeval[A])(use:A=>monix.eval.Coeval[B])(release:A=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Coeval[A]): Coeval[Coeval[A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#coflatten[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[monix.eval.Coeval[A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Coeval[A])(f: (Coeval[A]) => B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.coflatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#coflatMap[A,B](fa:monix.eval.Coeval[A])(f:monix.eval.Coeval[A]=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.fromTry", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatalEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.catchNonFatal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Coeval[A]): Coeval[Either[Throwable, A]]", "member" : "monix.eval.instances.CatsSyncForCoeval.attempt", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#attempt[A](fa:monix.eval.Coeval[A]):monix.eval.Coeval[Either[Throwable,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recoverWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#recoverWith[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.recover", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#recover[A](fa:monix.eval.Coeval[A])(pf:PartialFunction[Throwable,A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Coeval[A])(f: (Throwable) => Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleErrorWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#handleErrorWith[A](fa:monix.eval.Coeval[A])(f:Throwable=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Coeval[A])(f: (Throwable) => A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.handleError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#handleError[A](fa:monix.eval.Coeval[A])(f:Throwable=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.raiseError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#raiseError[A](e:Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.map", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map[A,B](fa:monix.eval.Coeval[A])(f:A=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Coeval[A], fb: Coeval[B])(f: (A, B) => Z): Coeval[Z]", "member" : "monix.eval.instances.CatsSyncForCoeval.map2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map2[A,B,Z](fa:monix.eval.Coeval[A],fb:monix.eval.Coeval[B])(f:(A,B)=>Z):monix.eval.Coeval[Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Coeval[(A) => B])(fa: Coeval[A]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.ap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap[A,B](ff:monix.eval.Coeval[A=>B])(fa:monix.eval.Coeval[A]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Coeval[Either[A, B]]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.tailRecM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Coeval[Either[A,B]]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Coeval[Coeval[A]]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatten", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#flatten[A](ffa:monix.eval.Coeval[monix.eval.Coeval[A]]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Coeval[A])(f: (A) => Coeval[B]): Coeval[B]", "member" : "monix.eval.instances.CatsSyncForCoeval.flatMap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#flatMap[A,B](fa:monix.eval.Coeval[A])(f:A=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Coeval[Unit]", "member" : "monix.eval.instances.CatsSyncForCoeval.unit", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#unit:monix.eval.Coeval[Unit]", "kind" : "val"}, {"label" : "suspend", "tail" : "(fa: => Coeval[A]): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.suspend", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#suspend[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.delay", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#delay[A](thunk:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.instances.CatsSyncForCoeval.pure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#pure[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Coeval[A], fb: Coeval[B])(F: Functor[Coeval]): Coeval[Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Coeval[G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Coeval[A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "combineKEval", "tail" : "(x: Coeval[A], y: Eval[Coeval[A]]): Eval[Coeval[A]]", "member" : "cats.SemigroupK.combineKEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#combineKEval[A](x:F[A],y:cats.Eval[F[A]]):cats.Eval[F[A]]", "kind" : "def"}, {"label" : "runSyncK", "tail" : "(G: Sync[G]): ~>[Coeval, G]", "member" : "cats.effect.SyncEffect.runSyncK", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#runSyncK[G[_<:<?>]](implicitG:cats.effect.Sync[G]):F~>G", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Coeval[A]): Coeval[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Coeval[A]) => Coeval[A]): Coeval[A]", "member" : "cats.Defer.fix", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Coeval[A])(finalizer: Coeval[Unit]): Coeval[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: Coeval[A])(finalizer: (ExitCase[Throwable]) => Coeval[Unit]): Coeval[A]", "member" : "cats.effect.Bracket.guaranteeCase", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#guaranteeCase[A](fa:F[A])(finalizer:cats.effect.ExitCase[E]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: Coeval[A])(finalizer: Coeval[Unit]): Coeval[A]", "member" : "cats.effect.Bracket.guarantee", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#guarantee[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Coeval[A]): Coeval[A]", "member" : "cats.effect.Bracket.uncancelable", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#uncancelable[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Throwable]): Coeval[A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: Coeval[A])(f: (Either[Throwable, A]) => Coeval[B]): Coeval[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Coeval[A])(recover: (Throwable) => Coeval[B], bind: (A) => Coeval[B]): Coeval[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Coeval[Either[EE, A]]): Coeval[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Coeval[A])(error: (A) => Throwable)(predicate: (A) => Boolean): Coeval[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Coeval[A])(error: => Throwable)(predicate: (A) => Boolean): Coeval[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (Coeval[Boolean], Coeval[A])*)(els: Coeval[A]): Coeval[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Coeval[A])(p: (A) => Boolean): Coeval[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Coeval[A])(cond: => Coeval[Boolean]): Coeval[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Coeval[A])(cond: => Coeval[Boolean])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Coeval[Boolean])(body: => Coeval[A]): Coeval[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Coeval[Boolean])(body: => Coeval[A])(G: Alternative[G]): Coeval[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Coeval[Option[A]]): Coeval[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Coeval[A]): Coeval[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Coeval[A]): Coeval[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Coeval[A])(f: (A) => Coeval[B]): Coeval[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Coeval[Boolean])(ifTrue: => Coeval[B], ifFalse: => Coeval[B]): Coeval[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Coeval[A])(f: (A) => Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Coeval[(A, B) => Z])(fa: Coeval[A], fb: Coeval[B]): Coeval[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Coeval[A], fb: Coeval[B]): Coeval[(A, B)]", "member" : "cats.FlatMap.product", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Coeval[A])(fb: Eval[Coeval[B]]): Coeval[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Coeval[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Coeval[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Coeval[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, Coeval, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Coeval[A])(pf: PartialFunction[Throwable, Coeval[Unit]]): Coeval[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Coeval[A])(recover: (Throwable) => B, f: (A) => B): Coeval[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Coeval[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Coeval[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Coeval[A]): EitherT[Coeval, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Coeval[A]): Coeval[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Coeval[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Coeval[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Coeval[A]): Coeval[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Coeval[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Coeval[Boolean])(ifTrue: Coeval[A], ifFalse: Coeval[A]): Coeval[A]", "member" : "cats.Apply.ifA", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Coeval[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Coeval[A], fb: Eval[Coeval[B]])(f: (A, B) => Z): Eval[Coeval[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[A]", "member" : "cats.Apply.<*", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Coeval[A])(fb: Coeval[B]): Coeval[B]", "member" : "cats.Apply.*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Coeval[(A) => B])(fa: Coeval[A]): Coeval[B]", "member" : "cats.Apply.<*>", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20], f21: Coeval[A21]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19], f20: Coeval[A20]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18], f19: Coeval[A19]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17], f18: Coeval[A18]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16], f17: Coeval[A17]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15], f16: Coeval[A16]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14], f15: Coeval[A15]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13], f14: Coeval[A14]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12], f13: Coeval[A13]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11], f12: Coeval[A12]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10], f11: Coeval[A11]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9], f10: Coeval[A10]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8], f9: Coeval[A9]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7], f8: Coeval[A8]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6], f7: Coeval[A7]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5], f6: Coeval[A6]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4, A5) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4], f5: Coeval[A5]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4])(f: (A0, A1, A2, A3, A4) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Coeval[(A0, A1, A2, A3, A4) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3], f4: Coeval[A4]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3])(f: (A0, A1, A2, A3) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Coeval[(A0, A1, A2, A3) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2], f3: Coeval[A3]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2])(f: (A0, A1, A2) => Z): Coeval[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Coeval[(A0, A1, A2) => Z])(f0: Coeval[A0], f1: Coeval[A1], f2: Coeval[A2]): Coeval[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Coeval[A], f2: Coeval[B]): Coeval[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Coeval[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Coeval[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Coeval[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Coeval[Boolean])(ifTrue: => A, ifFalse: => A): Coeval[A]", "member" : "cats.Functor.ifF", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Coeval[(A, B)]): (Coeval[A], Coeval[B])", "member" : "cats.Functor.unzip", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Coeval[A], b: B): Coeval[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Coeval[A], b: B): Coeval[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Coeval[A], b: B): Coeval[B]", "member" : "cats.Functor.as", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Coeval[A]): Coeval[Unit]", "member" : "cats.Functor.void", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Coeval[A]) => Coeval[B]", "member" : "cats.Functor.lift", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Coeval[A]): Coeval[B]", "member" : "cats.Functor.widen", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Coeval[A])(f: (A) => B): Coeval[B]", "member" : "cats.Functor.fmap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Coeval[A])(f: (A) => B)(g: (B) => A): Coeval[B]", "member" : "cats.Functor.imap", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Coeval[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/instances\/CatsSyncForCoeval$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/instances\/CatsSyncForCoeval.html", "kind" : "class"}], "monix.execution.cancelables" : [{"name" : "monix.execution.cancelables.AssignableCancelable", "object" : "monix\/execution\/cancelables\/AssignableCancelable$.html", "members_object" : [{"label" : "dummy", "tail" : ": Multi", "member" : "monix.execution.cancelables.AssignableCancelable.dummy", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#dummy:monix.execution.cancelables.AssignableCancelable.Multi", "kind" : "val"}, {"label" : "alreadyCanceled", "tail" : ": Bool with Empty", "member" : "monix.execution.cancelables.AssignableCancelable.alreadyCanceled", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#alreadyCanceled:monix.execution.cancelables.AssignableCancelable.Boolwithmonix.execution.Cancelable.Empty", "kind" : "val"}, {"label" : "single", "tail" : "(): AssignableCancelable", "member" : "monix.execution.cancelables.AssignableCancelable.single", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#single():monix.execution.cancelables.AssignableCancelable", "kind" : "def"}, {"label" : "multi", "tail" : "(initial: Cancelable): AssignableCancelable", "member" : "monix.execution.cancelables.AssignableCancelable.multi", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#multi(initial:monix.execution.Cancelable):monix.execution.cancelables.AssignableCancelable", "kind" : "def"}, {"label" : "Multi", "tail" : "", "member" : "monix.execution.cancelables.AssignableCancelable.Multi", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#MultiextendsAssignableCancelable.Bool", "kind" : "trait"}, {"label" : "Bool", "tail" : "", "member" : "monix.execution.cancelables.AssignableCancelable.Bool", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#BoolextendsAssignableCancelablewithBooleanCancelable", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/cancelables\/AssignableCancelable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : ":=", "tail" : "(value: Cancelable): AssignableCancelable.this.type", "member" : "monix.execution.cancelables.AssignableCancelable.:=", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#:=(value:monix.execution.Cancelable):AssignableCancelable.this.type", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/cancelables\/AssignableCancelable.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "Represents a class of cancelables that can holdan internal reference to another cancelable (and thushas to support the assignment operator)."}, {"name" : "monix.execution.cancelables.BooleanCancelable", "object" : "monix\/execution\/cancelables\/BooleanCancelable$.html", "members_object" : [{"label" : "dummy", "tail" : ": BooleanCancelable", "member" : "monix.execution.cancelables.BooleanCancelable.dummy", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#dummy:monix.execution.cancelables.BooleanCancelable", "kind" : "val"}, {"label" : "alreadyCanceled", "tail" : ": BooleanCancelable with Empty", "member" : "monix.execution.cancelables.BooleanCancelable.alreadyCanceled", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#alreadyCanceled:monix.execution.cancelables.BooleanCancelablewithmonix.execution.Cancelable.Empty", "kind" : "val"}, {"label" : "apply", "tail" : "(callback: () => Unit): BooleanCancelable", "member" : "monix.execution.cancelables.BooleanCancelable.apply", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#apply(callback:()=>Unit):monix.execution.cancelables.BooleanCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): BooleanCancelable", "member" : "monix.execution.cancelables.BooleanCancelable.apply", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#apply():monix.execution.cancelables.BooleanCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/cancelables\/BooleanCancelable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.BooleanCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#isCanceled:Boolean", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/cancelables\/BooleanCancelable.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "Represents a Cancelable that can be queried for the canceled status."}, {"name" : "monix.execution.cancelables.ChainedCancelable", "shortDescription" : "Represents a monix.execution.Cancelable whose underlyingcancelable reference can be swapped for another.", "object" : "monix\/execution\/cancelables\/ChainedCancelable$.html", "members_class" : [{"label" : "forwardTo", "tail" : "(other: ChainedCancelable): Unit", "member" : "monix.execution.cancelables.ChainedCancelable.forwardTo", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#forwardTo(other:monix.execution.cancelables.ChainedCancelable):Unit", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): ChainedCancelable.this.type", "member" : "monix.execution.cancelables.ChainedCancelable.:=", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#:=(value:monix.execution.Cancelable):ChainedCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.ChainedCancelable.cancel", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(ref: Cancelable): ChainedCancelable", "member" : "monix.execution.cancelables.ChainedCancelable.apply", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#apply(ref:monix.execution.Cancelable):monix.execution.cancelables.ChainedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): ChainedCancelable", "member" : "monix.execution.cancelables.ChainedCancelable.apply", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#apply():monix.execution.cancelables.ChainedCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/ChainedCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/ChainedCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.CompositeCancelable", "shortDescription" : "Represents a composite of multiple cancelables.", "object" : "monix\/execution\/cancelables\/CompositeCancelable$.html", "members_class" : [{"label" : "getAndSet", "tail" : "(that: Iterable[Cancelable]): Set[Cancelable]", "member" : "monix.execution.cancelables.CompositeCancelable.getAndSet", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#getAndSet(that:Iterable[monix.execution.Cancelable]):Set[monix.execution.Cancelable]", "kind" : "def"}, {"label" : "reset", "tail" : "(): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.reset", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#reset():CompositeCancelable.this.type", "kind" : "def"}, {"label" : "removeAll", "tail" : "(that: Iterable[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.removeAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#removeAll(that:Iterable[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "--=", "tail" : "(that: Iterable[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.--=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#--=(that:Iterable[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "remove", "tail" : "(s: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.remove", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#remove(s:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "-=", "tail" : "(s: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.-=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#-=(s:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "addAll", "tail" : "(that: Iterable[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.addAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#addAll(that:Iterable[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "++=", "tail" : "(that: Iterable[Cancelable]): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.++=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#++=(that:Iterable[monix.execution.Cancelable]):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "add", "tail" : "(other: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.add", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#add(other:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(other: Cancelable): CompositeCancelable.this.type", "member" : "monix.execution.cancelables.CompositeCancelable.+=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#+=(other:monix.execution.Cancelable):CompositeCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.CompositeCancelable.cancel", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.CompositeCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "withPadding", "tail" : "(initial: Set[Cancelable], ps: PaddingStrategy): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.withPadding", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#withPadding(initial:Set[monix.execution.Cancelable],ps:monix.execution.atomic.PaddingStrategy):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "withPadding", "tail" : "(ps: PaddingStrategy): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.withPadding", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#withPadding(ps:monix.execution.atomic.PaddingStrategy):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "fromSet", "tail" : "(initial: Set[Cancelable]): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.fromSet", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#fromSet(initial:Set[monix.execution.Cancelable]):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: Cancelable*): CompositeCancelable", "member" : "monix.execution.cancelables.CompositeCancelable.apply", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#apply(initial:monix.execution.Cancelable*):monix.execution.cancelables.CompositeCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/CompositeCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/CompositeCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.MultiAssignCancelable", "shortDescription" : "Represents a Cancelable whoseunderlying cancelable reference can be swapped for another.", "object" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html", "members_class" : [{"label" : "clear", "tail" : "(): Cancelable", "member" : "monix.execution.cancelables.MultiAssignCancelable.clear", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#clear():monix.execution.Cancelable", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): MultiAssignCancelable.this.type", "member" : "monix.execution.cancelables.MultiAssignCancelable.:=", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#:=(value:monix.execution.Cancelable):MultiAssignCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.MultiAssignCancelable.cancel", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.MultiAssignCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(s: Cancelable): MultiAssignCancelable", "member" : "monix.execution.cancelables.MultiAssignCancelable.apply", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#apply(s:monix.execution.Cancelable):monix.execution.cancelables.MultiAssignCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): MultiAssignCancelable", "member" : "monix.execution.cancelables.MultiAssignCancelable.apply", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#apply():monix.execution.cancelables.MultiAssignCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/MultiAssignCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/MultiAssignCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.OrderedCancelable", "shortDescription" : "Represents a Cancelable whoseunderlying cancelable reference can be swapped for another andthat has the capability to force ordering of updates.", "object" : "monix\/execution\/cancelables\/OrderedCancelable$.html", "members_class" : [{"label" : "orderedUpdate", "tail" : "(value: Cancelable, order: Long): OrderedCancelable.this.type", "member" : "monix.execution.cancelables.OrderedCancelable.orderedUpdate", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#orderedUpdate(value:monix.execution.Cancelable,order:Long):OrderedCancelable.this.type", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): OrderedCancelable.this.type", "member" : "monix.execution.cancelables.OrderedCancelable.:=", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#:=(value:monix.execution.Cancelable):OrderedCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.OrderedCancelable.cancel", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "currentOrder", "tail" : "(): Long", "member" : "monix.execution.cancelables.OrderedCancelable.currentOrder", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#currentOrder:Long", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.OrderedCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(s: Cancelable): OrderedCancelable", "member" : "monix.execution.cancelables.OrderedCancelable.apply", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#apply(s:monix.execution.Cancelable):monix.execution.cancelables.OrderedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): OrderedCancelable", "member" : "monix.execution.cancelables.OrderedCancelable.apply", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#apply():monix.execution.cancelables.OrderedCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/OrderedCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/OrderedCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.RefCountCancelable", "shortDescription" : "Represents a Cancelable that only executes the canceling logic when alldependent cancelable objects have been canceled.", "object" : "monix\/execution\/cancelables\/RefCountCancelable$.html", "members_class" : [{"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.RefCountCancelable.cancel", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "acquire", "tail" : "(): Cancelable", "member" : "monix.execution.cancelables.RefCountCancelable.acquire", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#acquire():monix.execution.Cancelable", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.RefCountCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(onCancel: () => Unit): RefCountCancelable", "member" : "monix.execution.cancelables.RefCountCancelable.apply", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#apply(onCancel:()=>Unit):monix.execution.cancelables.RefCountCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/RefCountCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/RefCountCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.SerialCancelable", "shortDescription" : "Represents a monix.execution.Cancelable whose underlying cancelablecan be swapped for another cancelable which causes the previous underlyingcancelable to be canceled.", "object" : "monix\/execution\/cancelables\/SerialCancelable$.html", "members_class" : [{"label" : ":=", "tail" : "(value: Cancelable): SerialCancelable.this.type", "member" : "monix.execution.cancelables.SerialCancelable.:=", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#:=(value:monix.execution.Cancelable):SerialCancelable.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.SerialCancelable.cancel", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.SerialCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SerialCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initial: Cancelable): SerialCancelable", "member" : "monix.execution.cancelables.SerialCancelable.apply", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#apply(initial:monix.execution.Cancelable):monix.execution.cancelables.SerialCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): SerialCancelable", "member" : "monix.execution.cancelables.SerialCancelable.apply", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#apply():monix.execution.cancelables.SerialCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SerialCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/SerialCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.SingleAssignCancelable", "shortDescription" : "Represents a monix.execution.Cancelable that can be assigned onlyonce to another cancelable reference.", "object" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html", "members_class" : [{"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.cancelables.SingleAssignCancelable.cancel", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#cancel():Unit", "kind" : "def"}, {"label" : ":=", "tail" : "(value: Cancelable): SingleAssignCancelable.this.type", "member" : "monix.execution.cancelables.SingleAssignCancelable.:=", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#:=(value:monix.execution.Cancelable):SingleAssignCancelable.this.type", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.SingleAssignCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "plusOne", "tail" : "(guest: Cancelable): SingleAssignCancelable", "member" : "monix.execution.cancelables.SingleAssignCancelable.plusOne", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#plusOne(guest:monix.execution.Cancelable):monix.execution.cancelables.SingleAssignCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): SingleAssignCancelable", "member" : "monix.execution.cancelables.SingleAssignCancelable.apply", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#apply():monix.execution.cancelables.SingleAssignCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/SingleAssignCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/SingleAssignCancelable.html", "kind" : "class"}, {"name" : "monix.execution.cancelables.StackedCancelable", "shortDescription" : "Represents a composite of cancelables that are stacked,so you can push a new reference, or pop an existing one andwhen it gets canceled, then the whole stack gets canceled.", "object" : "monix\/execution\/cancelables\/StackedCancelable$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/StackedCancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pop", "tail" : "(): Cancelable", "member" : "monix.execution.cancelables.StackedCancelable.pop", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#pop():monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "push", "tail" : "(value: Cancelable): Unit", "member" : "monix.execution.cancelables.StackedCancelable.push", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#push(value:monix.execution.Cancelable):Unit", "kind" : "abstract def"}, {"label" : "pushList", "tail" : "(list: List[Cancelable]): Unit", "member" : "monix.execution.cancelables.StackedCancelable.pushList", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#pushList(list:List[monix.execution.Cancelable]):Unit", "kind" : "abstract def"}, {"label" : "popAndPush", "tail" : "(value: Cancelable): Cancelable", "member" : "monix.execution.cancelables.StackedCancelable.popAndPush", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#popAndPush(value:monix.execution.Cancelable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "popAndPushList", "tail" : "(list: List[Cancelable]): Cancelable", "member" : "monix.execution.cancelables.StackedCancelable.popAndPushList", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#popAndPushList(list:List[monix.execution.Cancelable]):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.execution.cancelables.BooleanCancelable.isCanceled", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#isCanceled:Boolean", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/cancelables\/StackedCancelable.html#cancel():Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "uncancelable", "tail" : ": StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.uncancelable", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#uncancelable:monix.execution.cancelables.StackedCancelable", "kind" : "val"}, {"label" : "alreadyCanceled", "tail" : ": StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.alreadyCanceled", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#alreadyCanceled:monix.execution.cancelables.StackedCancelable", "kind" : "val"}, {"label" : "apply", "tail" : "(initial: List[Cancelable]): StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.apply", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#apply(initial:List[monix.execution.Cancelable]):monix.execution.cancelables.StackedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: Cancelable): StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.apply", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#apply(initial:monix.execution.Cancelable):monix.execution.cancelables.StackedCancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): StackedCancelable", "member" : "monix.execution.cancelables.StackedCancelable.apply", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#apply():monix.execution.cancelables.StackedCancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/cancelables\/StackedCancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/cancelables\/StackedCancelable.html", "kind" : "class"}], "monix" : [], "monix.execution.annotations" : [{"name" : "monix.execution.annotations.Unsafe", "shortDescription" : "An annotation meant to warn users on unsafe functions.", "members_class" : [{"member" : "monix.execution.annotations.Unsafe#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/annotations\/Unsafe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/annotations\/Unsafe.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/annotations\/Unsafe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/annotations\/Unsafe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/annotations\/Unsafe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/annotations\/Unsafe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/annotations\/Unsafe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/Unsafe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/Unsafe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/Unsafe.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/annotations\/Unsafe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/annotations\/Unsafe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/annotations\/Unsafe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/annotations\/Unsafe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/annotations\/Unsafe.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/annotations\/Unsafe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/annotations\/Unsafe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/annotations\/Unsafe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/annotations\/Unsafe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/annotations\/Unsafe.html", "kind" : "class"}, {"name" : "monix.execution.annotations.UnsafeBecauseBlocking", "shortDescription" : "An annotation meant to warn users on functions that aretriggering blocking operations.", "members_class" : [{"member" : "monix.execution.annotations.UnsafeBecauseBlocking#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/annotations\/UnsafeBecauseBlocking.html", "kind" : "class"}, {"name" : "monix.execution.annotations.UnsafeBecauseImpure", "shortDescription" : "An annotation meant to warn users on functions that arebreaking referential transparency.", "members_class" : [{"member" : "monix.execution.annotations.UnsafeBecauseImpure#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/annotations\/UnsafeBecauseImpure.html", "kind" : "class"}, {"name" : "monix.execution.annotations.UnsafeProtocol", "shortDescription" : "An annotation meant to warn users on functions that areusing an error prone protocol.", "members_class" : [{"member" : "monix.execution.annotations.UnsafeProtocol#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/annotations\/UnsafeProtocol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/annotations\/UnsafeProtocol.html", "kind" : "class"}], "monix.reactive" : [{"name" : "monix.reactive.Consumer", "shortDescription" : "The Consumer is a specification of how to consume an observable.", "object" : "monix\/reactive\/Consumer$.html", "members_class" : [{"label" : "mapTask", "tail" : "(f: (R) => Task[R2]): Consumer[In, R2]", "member" : "monix.reactive.Consumer.mapTask", "link" : "monix\/reactive\/Consumer.html#mapTask[R2](f:R=>monix.eval.Task[R2]):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (R) => F[R2])(F: TaskLike[F]): Consumer[In, R2]", "member" : "monix.reactive.Consumer.mapEval", "link" : "monix\/reactive\/Consumer.html#mapEval[F[_],R2](f:R=>F[R2])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (R) => R2): Consumer[In, R2]", "member" : "monix.reactive.Consumer.map", "link" : "monix\/reactive\/Consumer.html#map[R2](f:R=>R2):monix.reactive.Consumer[In,R2]", "kind" : "final def"}, {"label" : "transformInput", "tail" : "(f: (Observable[In2]) => Observable[In]): Consumer[In2, R]", "member" : "monix.reactive.Consumer.transformInput", "link" : "monix\/reactive\/Consumer.html#transformInput[In2](f:monix.reactive.Observable[In2]=>monix.reactive.Observable[In]):monix.reactive.Consumer[In2,R]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (In2) => In): Consumer[In2, R]", "member" : "monix.reactive.Consumer.contramap", "link" : "monix\/reactive\/Consumer.html#contramap[In2](f:In2=>In):monix.reactive.Consumer[In2,R]", "kind" : "final def"}, {"label" : "apply", "tail" : "(source: Observable[In]): Task[R]", "member" : "monix.reactive.Consumer.apply", "link" : "monix\/reactive\/Consumer.html#apply(source:monix.reactive.Observable[In]):monix.eval.Task[R]", "kind" : "final def"}, {"member" : "monix.reactive.Consumer#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/reactive\/Consumer.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Task[R]) => A): (Observable[In]) => A", "member" : "scala.Function1.andThen", "link" : "monix\/reactive\/Consumer.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Observable[In]): (A) => Task[R]", "member" : "scala.Function1.compose", "link" : "monix\/reactive\/Consumer.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Consumer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Consumer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Consumer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Consumer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Consumer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Consumer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Consumer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Consumer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Consumer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Consumer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Consumer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Consumer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Consumer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Consumer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Consumer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createSubscriber", "tail" : "(cb: Callback[Throwable, R], s: Scheduler): (Subscriber[In], AssignableCancelable)", "member" : "monix.reactive.Consumer.createSubscriber", "link" : "monix\/reactive\/Consumer.html#createSubscriber(cb:monix.execution.Callback[Throwable,R],s:monix.execution.Scheduler):(monix.reactive.observers.Subscriber[In],monix.execution.cancelables.AssignableCancelable)", "kind" : "abstract def"}], "members_object" : [{"label" : "catsProfunctor", "tail" : ": Profunctor[Consumer]", "member" : "monix.reactive.Consumer.catsProfunctor", "link" : "monix\/reactive\/Consumer$.html#catsProfunctor:cats.arrow.Profunctor[monix.reactive.Consumer]", "kind" : "implicit val"}, {"label" : "catsContravariant", "tail" : "(): Contravariant[[α$0$]Consumer[α$0$, C]]", "member" : "monix.reactive.Consumer.catsContravariant", "link" : "monix\/reactive\/Consumer$.html#catsContravariant[C]:cats.Contravariant[[α$0$]monix.reactive.Consumer[α$0$,C]]", "kind" : "implicit def"}, {"label" : "Sync", "tail" : "", "member" : "monix.reactive.Consumer.Sync", "link" : "monix\/reactive\/Consumer$.html#Sync[-In,+R]extendsConsumer[In,R]", "kind" : "trait"}, {"label" : "loadBalance", "tail" : "(consumers: Consumer[A, R]*): Consumer[A, List[R]]", "member" : "monix.reactive.Consumer.loadBalance", "link" : "monix\/reactive\/Consumer$.html#loadBalance[A,R](consumers:monix.reactive.Consumer[A,R]*):monix.reactive.Consumer[A,List[R]]", "kind" : "def"}, {"label" : "loadBalance", "tail" : "(parallelism: Int, consumer: Consumer[A, R]): Consumer[A, List[R]]", "member" : "monix.reactive.Consumer.loadBalance", "link" : "monix\/reactive\/Consumer$.html#loadBalance[A,R](parallelism:Int,consumer:monix.reactive.Consumer[A,R]):monix.reactive.Consumer[A,List[R]]", "kind" : "def"}, {"label" : "foreachParallelTask", "tail" : "(parallelism: Int)(cb: (A) => Task[Unit]): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachParallelTask", "link" : "monix\/reactive\/Consumer$.html#foreachParallelTask[A](parallelism:Int)(cb:A=>monix.eval.Task[Unit]):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreachParallel", "tail" : "(parallelism: Int)(cb: (A) => Unit): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachParallel", "link" : "monix\/reactive\/Consumer$.html#foreachParallel[A](parallelism:Int)(cb:A=>Unit):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreachTask", "tail" : "(cb: (A) => Task[Unit]): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachTask", "link" : "monix\/reactive\/Consumer$.html#foreachTask[A](cb:A=>monix.eval.Task[Unit]):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreachEval", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Consumer[A, Unit]", "member" : "monix.reactive.Consumer.foreachEval", "link" : "monix\/reactive\/Consumer$.html#foreachEval[F[_],A](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Consumer[A,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit): Sync[A, Unit]", "member" : "monix.reactive.Consumer.foreach", "link" : "monix\/reactive\/Consumer$.html#foreach[A](cb:A=>Unit):monix.reactive.Consumer.Sync[A,Unit]", "kind" : "def"}, {"label" : "complete", "tail" : "(): Sync[A, Unit]", "member" : "monix.reactive.Consumer.complete", "link" : "monix\/reactive\/Consumer$.html#complete[A]:monix.reactive.Consumer.Sync[A,Unit]", "kind" : "def"}, {"label" : "firstNotification", "tail" : "(): Sync[A, Notification[A]]", "member" : "monix.reactive.Consumer.firstNotification", "link" : "monix\/reactive\/Consumer$.html#firstNotification[A]:monix.reactive.Consumer.Sync[A,monix.reactive.Notification[A]]", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Sync[A, Option[A]]", "member" : "monix.reactive.Consumer.headOption", "link" : "monix\/reactive\/Consumer$.html#headOption[A]:monix.reactive.Consumer.Sync[A,Option[A]]", "kind" : "def"}, {"label" : "head", "tail" : "(): Sync[A, A]", "member" : "monix.reactive.Consumer.head", "link" : "monix\/reactive\/Consumer$.html#head[A]:monix.reactive.Consumer.Sync[A,A]", "kind" : "def"}, {"label" : "foldLeftTask", "tail" : "(initial: => S)(f: (S, A) => Task[S]): Consumer[A, S]", "member" : "monix.reactive.Consumer.foldLeftTask", "link" : "monix\/reactive\/Consumer$.html#foldLeftTask[S,A](initial:=>S)(f:(S,A)=>monix.eval.Task[S]):monix.reactive.Consumer[A,S]", "kind" : "def"}, {"label" : "foldLeftEval", "tail" : "(initial: => S)(f: (S, A) => F[S])(F: TaskLike[F]): Consumer[A, S]", "member" : "monix.reactive.Consumer.foldLeftEval", "link" : "monix\/reactive\/Consumer$.html#foldLeftEval[F[_],S,A](initial:=>S)(f:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Consumer[A,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: => S)(f: (S, A) => S): Sync[A, S]", "member" : "monix.reactive.Consumer.foldLeft", "link" : "monix\/reactive\/Consumer$.html#foldLeft[S,A](initial:=>S)(f:(S,A)=>S):monix.reactive.Consumer.Sync[A,S]", "kind" : "def"}, {"label" : "toList", "tail" : "(): Consumer[A, List[A]]", "member" : "monix.reactive.Consumer.toList", "link" : "monix\/reactive\/Consumer$.html#toList[A]:monix.reactive.Consumer[A,List[A]]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Sync[In, R]", "member" : "monix.reactive.Consumer.raiseError", "link" : "monix\/reactive\/Consumer$.html#raiseError[In,R](ex:Throwable):monix.reactive.Consumer.Sync[In,R]", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Sync[A, Unit]", "member" : "monix.reactive.Consumer.cancel", "link" : "monix\/reactive\/Consumer$.html#cancel[A]:monix.reactive.Consumer.Sync[A,Unit]", "kind" : "def"}, {"label" : "fromObserver", "tail" : "(f: (Scheduler) => Observer[In]): Consumer[In, Unit]", "member" : "monix.reactive.Consumer.fromObserver", "link" : "monix\/reactive\/Consumer$.html#fromObserver[In](f:monix.execution.Scheduler=>monix.reactive.Observer[In]):monix.reactive.Consumer[In,Unit]", "kind" : "def"}, {"label" : "create", "tail" : "(f: (Scheduler, Cancelable, Callback[Throwable, Out]) => Observer[In]): Consumer[In, Out]", "member" : "monix.reactive.Consumer.create", "link" : "monix\/reactive\/Consumer$.html#create[In,Out](f:(monix.execution.Scheduler,monix.execution.Cancelable,monix.execution.Callback[Throwable,Out])=>monix.reactive.Observer[In]):monix.reactive.Consumer[In,Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Consumer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Consumer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Consumer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Consumer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Consumer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Consumer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Consumer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Consumer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Consumer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Consumer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Consumer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Consumer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Consumer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Consumer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Consumer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Consumer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Consumer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Consumer.html", "kind" : "class"}, {"name" : "monix.reactive.MulticastStrategy", "shortDescription" : "The MulticastStrategy specifies the strategy forbuilding data-sources that are shared between multiple subscribers.", "object" : "monix\/reactive\/MulticastStrategy$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/MulticastStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/MulticastStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/MulticastStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/MulticastStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/MulticastStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/MulticastStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/MulticastStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/MulticastStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/MulticastStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/MulticastStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/MulticastStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/MulticastStrategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/MulticastStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/MulticastStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/MulticastStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/MulticastStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ReplayLimited", "tail" : "", "member" : "monix.reactive.MulticastStrategy.ReplayLimited", "link" : "monix\/reactive\/MulticastStrategy$.html#ReplayLimited[A]extendsMulticastStrategy[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A]): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replayLimited", "link" : "monix\/reactive\/MulticastStrategy$.html#replayLimited[A](capacity:Int,initial:Seq[A]):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replayLimited", "link" : "monix\/reactive\/MulticastStrategy$.html#replayLimited[A](capacity:Int):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Replay", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Replay", "link" : "monix\/reactive\/MulticastStrategy$.html#Replay[A]extendsMulticastStrategy[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "replay", "tail" : "(initial: Seq[A]): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replay", "link" : "monix\/reactive\/MulticastStrategy$.html#replay[A](initial:Seq[A]):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "replay", "tail" : "(): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.replay", "link" : "monix\/reactive\/MulticastStrategy$.html#replay[A]:monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Async", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Async", "link" : "monix\/reactive\/MulticastStrategy$.html#Async", "kind" : "case object"}, {"label" : "async", "tail" : "(): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.async", "link" : "monix\/reactive\/MulticastStrategy$.html#async[A]:monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Behavior", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Behavior", "link" : "monix\/reactive\/MulticastStrategy$.html#Behavior[A]extendsMulticastStrategy[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "behavior", "tail" : "(initial: A): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.behavior", "link" : "monix\/reactive\/MulticastStrategy$.html#behavior[A](initial:A):monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "Publish", "tail" : "", "member" : "monix.reactive.MulticastStrategy.Publish", "link" : "monix\/reactive\/MulticastStrategy$.html#Publish", "kind" : "case object"}, {"label" : "publish", "tail" : "(): MulticastStrategy[A]", "member" : "monix.reactive.MulticastStrategy.publish", "link" : "monix\/reactive\/MulticastStrategy$.html#publish[A]:monix.reactive.MulticastStrategy[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/MulticastStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/MulticastStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/MulticastStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/MulticastStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/MulticastStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/MulticastStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/MulticastStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/MulticastStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/MulticastStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/MulticastStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/MulticastStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/MulticastStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/MulticastStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/MulticastStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/MulticastStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/MulticastStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/MulticastStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/MulticastStrategy.html", "kind" : "class"}, {"name" : "monix.reactive.Notification", "shortDescription" : "Used by Observable.materialize.", "object" : "monix\/reactive\/Notification$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Notification.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Notification.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Notification.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Notification.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Notification.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Notification.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Notification.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Notification.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Notification.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Notification.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Notification.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Notification.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Notification.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Notification.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Notification.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Notification.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "OnComplete", "tail" : "", "member" : "monix.reactive.Notification.OnComplete", "link" : "monix\/reactive\/Notification$.html#OnComplete", "kind" : "case object"}, {"label" : "OnError", "tail" : "", "member" : "monix.reactive.Notification.OnError", "link" : "monix\/reactive\/Notification$.html#OnErrorextendsNotification[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "OnNext", "tail" : "", "member" : "monix.reactive.Notification.OnNext", "link" : "monix\/reactive\/Notification$.html#OnNext[+A]extendsNotification[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Notification$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Notification$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Notification$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Notification$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Notification$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Notification$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Notification$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Notification$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Notification$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Notification$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Notification$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Notification$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Notification$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Notification$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Notification$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Notification$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Notification$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Notification.html", "kind" : "class"}, {"name" : "monix.reactive.Observable", "shortDescription" : "The Observable type that implements the Reactive Pattern.", "object" : "monix\/reactive\/Observable$.html", "members_class" : [{"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/Observable.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/Observable.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/Observable.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/Observable.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/Observable.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/Observable.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/Observable.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/Observable.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/Observable.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/Observable.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/Observable.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/Observable.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/Observable.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/Observable.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/Observable.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/Observable.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/Observable.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/Observable.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/Observable.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/Observable.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/Observable.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/Observable.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/Observable.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/Observable.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/Observable.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/Observable.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/Observable.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/Observable.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/Observable.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/Observable.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/Observable.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/Observable.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/Observable.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/Observable.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/Observable.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/Observable.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/Observable.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/Observable.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/Observable.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/Observable.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/Observable.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/Observable.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/Observable.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/Observable.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/Observable.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/Observable.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/Observable.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/Observable.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/Observable.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/Observable.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/Observable.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/Observable.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/Observable.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/Observable.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/Observable.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/Observable.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/Observable.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/Observable.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/Observable.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/Observable.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/Observable.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/Observable.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/Observable.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/Observable.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/Observable.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/Observable.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/Observable.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/Observable.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/Observable.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/Observable.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/Observable.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/Observable.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/Observable.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/Observable.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/Observable.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/Observable.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/Observable.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/Observable.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/Observable.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/Observable.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/Observable.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/Observable.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/Observable.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/Observable.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/Observable.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/Observable.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/Observable.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/Observable.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/Observable.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/Observable.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/Observable.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/Observable.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/Observable.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/Observable.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/Observable.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/Observable.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/Observable.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/Observable.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/Observable.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/Observable.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/Observable.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/Observable.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/Observable.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/Observable.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/Observable.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/Observable.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/Observable.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/Observable.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/Observable.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/Observable.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/Observable.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/Observable.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/Observable.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/Observable.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/Observable.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/Observable.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/Observable.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/Observable.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/Observable.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/Observable.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/Observable.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/Observable.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/Observable.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/Observable.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/Observable.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/Observable.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/Observable.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/Observable.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/Observable.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/Observable.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/Observable.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/Observable.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/Observable.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/Observable.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/Observable.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/Observable.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/Observable.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/Observable.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/Observable.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/Observable.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/Observable.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/Observable.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/Observable.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/Observable.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/Observable.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/Observable.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/Observable.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/Observable.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/Observable.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/Observable.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/Observable.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/Observable.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/Observable.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/Observable.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/Observable.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/Observable.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/Observable.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/Observable.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/Observable.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/Observable.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/Observable.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/Observable.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/Observable.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/Observable.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/Observable.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/Observable.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/Observable.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/Observable.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/Observable.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/Observable.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/Observable.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/Observable.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/Observable.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/Observable.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/Observable.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/Observable.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/Observable.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/Observable.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/Observable.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/Observable.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/Observable.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/Observable.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/Observable.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/Observable.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/Observable.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/Observable.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/Observable.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/Observable.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/Observable.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/Observable.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/Observable.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/Observable.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/Observable.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/Observable.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/Observable.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/Observable.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/Observable.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/Observable.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/Observable.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/Observable.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/Observable.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/Observable.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/Observable.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/Observable.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/Observable.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/Observable.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/Observable.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/Observable.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/Observable.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/Observable.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/Observable.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/Observable.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/Observable.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/Observable.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/Observable.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/Observable.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/Observable.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/Observable.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/Observable.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/Observable.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/Observable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/Observable.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/Observable.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/Observable.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/Observable.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/Observable.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/Observable.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/Observable.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/Observable.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/Observable.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/Observable.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/Observable.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/Observable.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/Observable.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/Observable.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/Observable.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/Observable.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/Observable.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/Observable.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/Observable.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/Observable.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/Observable.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/Observable.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/Observable.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/Observable.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/Observable.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/Observable.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/Observable.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/Observable.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/Observable.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/Observable.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/Observable.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"member" : "monix.reactive.Observable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Observable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Observable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Observable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Observable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Observable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Observable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Observable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Observable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Observable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Observable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Observable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Observable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Observable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Observable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/Observable.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "DeprecatedExtensions", "tail" : "", "member" : "monix.reactive.Observable.DeprecatedExtensions", "link" : "monix\/reactive\/Observable$.html#DeprecatedExtensions[+A]extendsAnyValwithObservableDeprecatedMethods[A]", "kind" : "implicit final class"}, {"label" : "observableNonEmptyParallel", "tail" : ": Aux[Observable, observables.CombineObservable.Type]", "member" : "monix.reactive.Observable.observableNonEmptyParallel", "link" : "monix\/reactive\/Observable$.html#observableNonEmptyParallel:cats.NonEmptyParallel.Aux[monix.reactive.Observable,monix.reactive.observables.CombineObservable.Type]", "kind" : "implicit val"}, {"label" : "CatsInstances", "tail" : "", "member" : "monix.reactive.Observable.CatsInstances", "link" : "monix\/reactive\/Observable$.html#CatsInstancesextendsBracket[monix.reactive.Observable,Throwable]withAlternative[monix.reactive.Observable]withCoflatMap[monix.reactive.Observable]withFunctorFilter[monix.reactive.Observable]withTaskLift[monix.reactive.Observable]", "kind" : "class"}, {"label" : "catsInstances", "tail" : ": CatsInstances", "member" : "monix.reactive.Observable.catsInstances", "link" : "monix\/reactive\/Observable$.html#catsInstances:monix.reactive.Observable.CatsInstances", "kind" : "implicit val"}, {"label" : "firstStartedOf", "tail" : "(source: Observable[A]*): Observable[A]", "member" : "monix.reactive.Observable.firstStartedOf", "link" : "monix\/reactive\/Observable$.html#firstStartedOf[A](source:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "mergePrioritizedList", "tail" : "(sources: (Int, Observable[A])*): Observable[A]", "member" : "monix.reactive.Observable.mergePrioritizedList", "link" : "monix\/reactive\/Observable$.html#mergePrioritizedList[A](sources:(Int,monix.reactive.Observable[A])*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "combineLatestList", "tail" : "(sources: Observable[A]*): Observable[Seq[A]]", "member" : "monix.reactive.Observable.combineLatestList", "link" : "monix\/reactive\/Observable$.html#combineLatestList[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[Seq[A]]", "kind" : "def"}, {"label" : "combineLatestMap6", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3], a4: Observable[A4], a5: Observable[A5], a6: Observable[A6])(f: (A1, A2, A3, A4, A5, A6) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap6", "link" : "monix\/reactive\/Observable$.html#combineLatestMap6[A1,A2,A3,A4,A5,A6,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3],a4:monix.reactive.Observable[A4],a5:monix.reactive.Observable[A5],a6:monix.reactive.Observable[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest6", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5], oa6: Observable[A6]): Observable[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.reactive.Observable.combineLatest6", "link" : "monix\/reactive\/Observable$.html#combineLatest6[A1,A2,A3,A4,A5,A6](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5],oa6:monix.reactive.Observable[A6]):monix.reactive.Observable[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "combineLatestMap5", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3], a4: Observable[A4], a5: Observable[A5])(f: (A1, A2, A3, A4, A5) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap5", "link" : "monix\/reactive\/Observable$.html#combineLatestMap5[A1,A2,A3,A4,A5,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3],a4:monix.reactive.Observable[A4],a5:monix.reactive.Observable[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest5", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5]): Observable[(A1, A2, A3, A4, A5)]", "member" : "monix.reactive.Observable.combineLatest5", "link" : "monix\/reactive\/Observable$.html#combineLatest5[A1,A2,A3,A4,A5](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5]):monix.reactive.Observable[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "combineLatestMap4", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3], a4: Observable[A4])(f: (A1, A2, A3, A4) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap4", "link" : "monix\/reactive\/Observable$.html#combineLatestMap4[A1,A2,A3,A4,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3],a4:monix.reactive.Observable[A4])(f:(A1,A2,A3,A4)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest4", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4]): Observable[(A1, A2, A3, A4)]", "member" : "monix.reactive.Observable.combineLatest4", "link" : "monix\/reactive\/Observable$.html#combineLatest4[A1,A2,A3,A4](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4]):monix.reactive.Observable[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "combineLatestMap3", "tail" : "(a1: Observable[A1], a2: Observable[A2], a3: Observable[A3])(f: (A1, A2, A3) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap3", "link" : "monix\/reactive\/Observable$.html#combineLatestMap3[A1,A2,A3,R](a1:monix.reactive.Observable[A1],a2:monix.reactive.Observable[A2],a3:monix.reactive.Observable[A3])(f:(A1,A2,A3)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest3", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3]): Observable[(A1, A2, A3)]", "member" : "monix.reactive.Observable.combineLatest3", "link" : "monix\/reactive\/Observable$.html#combineLatest3[A1,A2,A3](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3]):monix.reactive.Observable[(A1,A2,A3)]", "kind" : "def"}, {"label" : "combineLatestMap2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2])(f: (A1, A2) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap2", "link" : "monix\/reactive\/Observable$.html#combineLatestMap2[A1,A2,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2])(f:(A1,A2)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "combineLatest2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2]): Observable[(A1, A2)]", "member" : "monix.reactive.Observable.combineLatest2", "link" : "monix\/reactive\/Observable$.html#combineLatest2[A1,A2](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2]):monix.reactive.Observable[(A1,A2)]", "kind" : "def"}, {"label" : "resourceCaseF", "tail" : "(acquire: F[A])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.resourceCaseF", "link" : "monix\/reactive\/Observable$.html#resourceCaseF[F[_],A](acquire:F[A])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "resourceCase", "tail" : "(acquire: Task[A])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.resourceCase", "link" : "monix\/reactive\/Observable$.html#resourceCase[A](acquire:monix.eval.Task[A])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "resourceF", "tail" : "(acquire: F[A])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.resourceF", "link" : "monix\/reactive\/Observable$.html#resourceF[F[_],A](acquire:F[A])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "resource", "tail" : "(acquire: Task[A])(release: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.resource", "link" : "monix\/reactive\/Observable$.html#resource[A](acquire:monix.eval.Task[A])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.empty", "link" : "monix\/reactive\/Observable$.html#empty[A]:monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "zipList", "tail" : "(sources: Observable[A]*): Observable[Seq[A]]", "member" : "monix.reactive.Observable.zipList", "link" : "monix\/reactive\/Observable$.html#zipList[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[Seq[A]]", "kind" : "def"}, {"label" : "zipMap6", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5], oa6: Observable[A6])(f: (A1, A2, A3, A4, A5, A6) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap6", "link" : "monix\/reactive\/Observable$.html#zipMap6[A1,A2,A3,A4,A5,A6,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5],oa6:monix.reactive.Observable[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip6", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5], oa6: Observable[A6]): Observable[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.reactive.Observable.zip6", "link" : "monix\/reactive\/Observable$.html#zip6[A1,A2,A3,A4,A5,A6](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5],oa6:monix.reactive.Observable[A6]):monix.reactive.Observable[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "zipMap5", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5])(f: (A1, A2, A3, A4, A5) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap5", "link" : "monix\/reactive\/Observable$.html#zipMap5[A1,A2,A3,A4,A5,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip5", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4], oa5: Observable[A5]): Observable[(A1, A2, A3, A4, A5)]", "member" : "monix.reactive.Observable.zip5", "link" : "monix\/reactive\/Observable$.html#zip5[A1,A2,A3,A4,A5](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4],oa5:monix.reactive.Observable[A5]):monix.reactive.Observable[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "zipMap4", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4])(f: (A1, A2, A3, A4) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap4", "link" : "monix\/reactive\/Observable$.html#zipMap4[A1,A2,A3,A4,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4])(f:(A1,A2,A3,A4)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip4", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3], oa4: Observable[A4]): Observable[(A1, A2, A3, A4)]", "member" : "monix.reactive.Observable.zip4", "link" : "monix\/reactive\/Observable$.html#zip4[A1,A2,A3,A4](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3],oa4:monix.reactive.Observable[A4]):monix.reactive.Observable[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "zipMap3", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3])(f: (A1, A2, A3) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap3", "link" : "monix\/reactive\/Observable$.html#zipMap3[A1,A2,A3,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3])(f:(A1,A2,A3)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip3", "tail" : "(oa1: Observable[A1], oa2: Observable[A2], oa3: Observable[A3]): Observable[(A1, A2, A3)]", "member" : "monix.reactive.Observable.zip3", "link" : "monix\/reactive\/Observable$.html#zip3[A1,A2,A3](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2],oa3:monix.reactive.Observable[A3]):monix.reactive.Observable[(A1,A2,A3)]", "kind" : "def"}, {"label" : "zipMap2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2])(f: (A1, A2) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap2", "link" : "monix\/reactive\/Observable$.html#zipMap2[A1,A2,R](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2])(f:(A1,A2)=>R):monix.reactive.Observable[R]", "kind" : "def"}, {"label" : "zip2", "tail" : "(oa1: Observable[A1], oa2: Observable[A2]): Observable[(A1, A2)]", "member" : "monix.reactive.Observable.zip2", "link" : "monix\/reactive\/Observable$.html#zip2[A1,A2](oa1:monix.reactive.Observable[A1],oa2:monix.reactive.Observable[A2]):monix.reactive.Observable[(A1,A2)]", "kind" : "def"}, {"label" : "timerRepeated", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration, unit: A): Observable[A]", "member" : "monix.reactive.Observable.timerRepeated", "link" : "monix\/reactive\/Observable$.html#timerRepeated[A](initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration,unit:A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "toReactive", "tail" : "(source: Observable[A])(s: Scheduler): Publisher[A]", "member" : "monix.reactive.Observable.toReactive", "link" : "monix\/reactive\/Observable$.html#toReactive[A](source:monix.reactive.Observable[A])(implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[A]", "kind" : "def"}, {"label" : "fromAsyncStateActionF", "tail" : "(f: (S) => F[(A, S)])(seed: => S)(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.fromAsyncStateActionF", "link" : "monix\/reactive\/Observable$.html#fromAsyncStateActionF[F[_],S,A](f:S=>F[(A,S)])(seed:=>S)(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromAsyncStateAction", "tail" : "(f: (S) => Task[(A, S)])(seed: => S): Observable[A]", "member" : "monix.reactive.Observable.fromAsyncStateAction", "link" : "monix\/reactive\/Observable$.html#fromAsyncStateAction[S,A](f:S=>monix.eval.Task[(A,S)])(seed:=>S):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "unfoldEvalF", "tail" : "(seed: => S)(f: (S) => F[Option[(A, S)]])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.unfoldEvalF", "link" : "monix\/reactive\/Observable$.html#unfoldEvalF[F[_],S,A](seed:=>S)(f:S=>F[Option[(A,S)]])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "paginateEval", "tail" : "(seed: => S)(f: (S) => Task[(A, Option[S])]): Observable[A]", "member" : "monix.reactive.Observable.paginateEval", "link" : "monix\/reactive\/Observable$.html#paginateEval[S,A](seed:=>S)(f:S=>monix.eval.Task[(A,Option[S])]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "paginate", "tail" : "(seed: => S)(f: (S) => (A, Option[S])): Observable[A]", "member" : "monix.reactive.Observable.paginate", "link" : "monix\/reactive\/Observable$.html#paginate[S,A](seed:=>S)(f:S=>(A,Option[S])):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "unfoldEval", "tail" : "(seed: => S)(f: (S) => Task[Option[(A, S)]]): Observable[A]", "member" : "monix.reactive.Observable.unfoldEval", "link" : "monix\/reactive\/Observable$.html#unfoldEval[S,A](seed:=>S)(f:S=>monix.eval.Task[Option[(A,S)]]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "unfold", "tail" : "(seed: => S)(f: (S) => Option[(A, S)]): Observable[A]", "member" : "monix.reactive.Observable.unfold", "link" : "monix\/reactive\/Observable$.html#unfold[S,A](seed:=>S)(f:S=>Option[(A,S)]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromStateAction", "tail" : "(f: (S) => (A, S))(seed: => S): Observable[A]", "member" : "monix.reactive.Observable.fromStateAction", "link" : "monix\/reactive\/Observable$.html#fromStateAction[S,A](f:S=>(A,S))(seed:=>S):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "range", "tail" : "(from: Long, until: Long, step: Long): Observable[Long]", "member" : "monix.reactive.Observable.range", "link" : "monix\/reactive\/Observable$.html#range(from:Long,until:Long,step:Long):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "repeatEvalF", "tail" : "(fa: F[A])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.repeatEvalF", "link" : "monix\/reactive\/Observable$.html#repeatEvalF[F[_],A](fa:F[A])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "repeatEval", "tail" : "(task: => A): Observable[A]", "member" : "monix.reactive.Observable.repeatEval", "link" : "monix\/reactive\/Observable$.html#repeatEval[A](task:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(elems: A*): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/Observable$.html#repeat[A](elems:A*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalAtFixedRate", "link" : "monix\/reactive\/Observable$.html#intervalAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(period: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalAtFixedRate", "link" : "monix\/reactive\/Observable$.html#intervalAtFixedRate(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(delay: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalWithFixedDelay", "link" : "monix\/reactive\/Observable$.html#intervalWithFixedDelay(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "interval", "tail" : "(delay: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.interval", "link" : "monix\/reactive\/Observable$.html#interval(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration): Observable[Long]", "member" : "monix.reactive.Observable.intervalWithFixedDelay", "link" : "monix\/reactive\/Observable$.html#intervalWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Long]", "kind" : "def"}, {"label" : "interleave2", "tail" : "(oa1: Observable[A], oa2: Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.interleave2", "link" : "monix\/reactive\/Observable$.html#interleave2[A](oa1:monix.reactive.Observable[A],oa2:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "cons", "tail" : "(head: A, tail: Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.cons", "link" : "monix\/reactive\/Observable$.html#cons[A](head:A,tail:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.defer", "link" : "monix\/reactive\/Observable$.html#defer[A](fa:=>monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Observable[A]): Observable[A]", "member" : "monix.reactive.Observable.suspend", "link" : "monix\/reactive\/Observable$.html#suspend[A](fa:=>monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "liftFrom", "tail" : "(F: ObservableLike[F]): ~>[F, Observable]", "member" : "monix.reactive.Observable.liftFrom", "link" : "monix\/reactive\/Observable$.html#liftFrom[F[_]](implicitF:monix.reactive.ObservableLike[F]):F~>monix.reactive.Observable", "kind" : "def"}, {"label" : "fromTask", "tail" : "(task: Task[A]): Observable[A]", "member" : "monix.reactive.Observable.fromTask", "link" : "monix\/reactive\/Observable$.html#fromTask[A](task:monix.eval.Task[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromTaskLike", "tail" : "(fa: F[A])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.fromTaskLike", "link" : "monix\/reactive\/Observable$.html#fromTaskLike[F[_],A](fa:F[A])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(factory: => Future[A]): Observable[A]", "member" : "monix.reactive.Observable.fromFuture", "link" : "monix\/reactive\/Observable$.html#fromFuture[A](factory:=>scala.concurrent.Future[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(f: (E) => Throwable)(a: Either[E, A]): Observable[A]", "member" : "monix.reactive.Observable.fromEither", "link" : "monix\/reactive\/Observable$.html#fromEither[E,A](f:E=>Throwable)(a:Either[E,A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(a: Either[E, A]): Observable[A]", "member" : "monix.reactive.Observable.fromEither", "link" : "monix\/reactive\/Observable$.html#fromEither[E<:Throwable,A](a:Either[E,A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: Try[A]): Observable[A]", "member" : "monix.reactive.Observable.fromTry", "link" : "monix\/reactive\/Observable$.html#fromTry[A](a:scala.util.Try[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "coeval", "tail" : "(value: Coeval[A]): Observable[A]", "member" : "monix.reactive.Observable.coeval", "link" : "monix\/reactive\/Observable$.html#coeval[A](value:monix.eval.Coeval[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromReactivePublisher", "tail" : "(publisher: Publisher[A], requestCount: Int): Observable[A]", "member" : "monix.reactive.Observable.fromReactivePublisher", "link" : "monix\/reactive\/Observable$.html#fromReactivePublisher[A](publisher:org.reactivestreams.Publisher[A],requestCount:Int):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromReactivePublisher", "tail" : "(publisher: Publisher[A]): Observable[A]", "member" : "monix.reactive.Observable.fromReactivePublisher", "link" : "monix\/reactive\/Observable$.html#fromReactivePublisher[A](publisher:org.reactivestreams.Publisher[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromLinesReaderUnsafe", "tail" : "(in: BufferedReader): Observable[String]", "member" : "monix.reactive.Observable.fromLinesReaderUnsafe", "link" : "monix\/reactive\/Observable$.html#fromLinesReaderUnsafe(in:java.io.BufferedReader):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "fromLinesReaderF", "tail" : "(in: F[BufferedReader])(F: TaskLike[F]): Observable[String]", "member" : "monix.reactive.Observable.fromLinesReaderF", "link" : "monix\/reactive\/Observable$.html#fromLinesReaderF[F[_]](in:F[java.io.BufferedReader])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "fromLinesReader", "tail" : "(in: Task[BufferedReader]): Observable[String]", "member" : "monix.reactive.Observable.fromLinesReader", "link" : "monix\/reactive\/Observable$.html#fromLinesReader(in:monix.eval.Task[java.io.BufferedReader]):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "fromCharsReaderUnsafe", "tail" : "(in: Reader, chunkSize: Int): Observable[Array[Char]]", "member" : "monix.reactive.Observable.fromCharsReaderUnsafe", "link" : "monix\/reactive\/Observable$.html#fromCharsReaderUnsafe(in:java.io.Reader,chunkSize:Int):monix.reactive.Observable[Array[Char]]", "kind" : "def"}, {"label" : "fromCharsReaderF", "tail" : "(in: F[Reader], chunkSize: Int)(F: TaskLike[F]): Observable[Array[Char]]", "member" : "monix.reactive.Observable.fromCharsReaderF", "link" : "monix\/reactive\/Observable$.html#fromCharsReaderF[F[_]](in:F[java.io.Reader],chunkSize:Int)(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[Array[Char]]", "kind" : "def"}, {"label" : "fromCharsReader", "tail" : "(in: Task[Reader], chunkSize: Int): Observable[Array[Char]]", "member" : "monix.reactive.Observable.fromCharsReader", "link" : "monix\/reactive\/Observable$.html#fromCharsReader(in:monix.eval.Task[java.io.Reader],chunkSize:Int):monix.reactive.Observable[Array[Char]]", "kind" : "def"}, {"label" : "fromInputStreamUnsafe", "tail" : "(in: InputStream, chunkSize: Int): Observable[Array[Byte]]", "member" : "monix.reactive.Observable.fromInputStreamUnsafe", "link" : "monix\/reactive\/Observable$.html#fromInputStreamUnsafe(in:java.io.InputStream,chunkSize:Int):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "fromInputStreamF", "tail" : "(in: F[InputStream], chunkSize: Int)(F: TaskLike[F]): Observable[Array[Byte]]", "member" : "monix.reactive.Observable.fromInputStreamF", "link" : "monix\/reactive\/Observable$.html#fromInputStreamF[F[_]](in:F[java.io.InputStream],chunkSize:Int)(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "fromInputStream", "tail" : "(in: Task[InputStream], chunkSize: Int): Observable[Array[Byte]]", "member" : "monix.reactive.Observable.fromInputStream", "link" : "monix\/reactive\/Observable$.html#fromInputStream(in:monix.eval.Task[java.io.InputStream],chunkSize:Int):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "fromResource", "tail" : "(resource: Resource[F, A])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.fromResource", "link" : "monix\/reactive\/Observable$.html#fromResource[F[_],A](resource:cats.effect.Resource[F,A])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIteratorBufferedUnsafe", "tail" : "(iterator: Iterator[A], bufferSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.fromIteratorBufferedUnsafe", "link" : "monix\/reactive\/Observable$.html#fromIteratorBufferedUnsafe[A](iterator:Iterator[A],bufferSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "def"}, {"label" : "fromIteratorBuffered", "tail" : "(resource: Resource[Task, Iterator[A]], bufferSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.fromIteratorBuffered", "link" : "monix\/reactive\/Observable$.html#fromIteratorBuffered[A](resource:cats.effect.Resource[monix.eval.Task,Iterator[A]],bufferSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "def"}, {"label" : "fromIteratorBuffered", "tail" : "(task: Task[Iterator[A]], bufferSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.fromIteratorBuffered", "link" : "monix\/reactive\/Observable$.html#fromIteratorBuffered[A](task:monix.eval.Task[Iterator[A]],bufferSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "def"}, {"label" : "fromIteratorUnsafe", "tail" : "(iterator: Iterator[A]): Observable[A]", "member" : "monix.reactive.Observable.fromIteratorUnsafe", "link" : "monix\/reactive\/Observable$.html#fromIteratorUnsafe[A](iterator:Iterator[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIteratorF", "tail" : "(iteratorF: F[Iterator[A]])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.fromIteratorF", "link" : "monix\/reactive\/Observable$.html#fromIteratorF[F[_],A](iteratorF:F[Iterator[A]])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(resource: Resource[Task, Iterator[A]]): Observable[A]", "member" : "monix.reactive.Observable.fromIterator", "link" : "monix\/reactive\/Observable$.html#fromIterator[A](resource:cats.effect.Resource[monix.eval.Task,Iterator[A]]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(task: Task[Iterator[A]]): Observable[A]", "member" : "monix.reactive.Observable.fromIterator", "link" : "monix\/reactive\/Observable$.html#fromIterator[A](task:monix.eval.Task[Iterator[A]]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(iterable: Iterable[A]): Observable[A]", "member" : "monix.reactive.Observable.fromIterable", "link" : "monix\/reactive\/Observable$.html#fromIterable[A](iterable:Iterable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "from", "tail" : "(fa: F[A])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.from", "link" : "monix\/reactive\/Observable$.html#from[F[_],A](fa:F[A])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "multicast", "tail" : "(multicast: MulticastStrategy[A], overflow: Synchronous[A])(s: Scheduler): (Sync[A], Observable[A])", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/Observable$.html#multicast[A](multicast:monix.reactive.MulticastStrategy[A],overflow:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[A],monix.reactive.Observable[A])", "kind" : "def"}, {"label" : "multicast", "tail" : "(multicast: MulticastStrategy[A])(s: Scheduler): (Sync[A], Observable[A])", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/Observable$.html#multicast[A](multicast:monix.reactive.MulticastStrategy[A])(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[A],monix.reactive.Observable[A])", "kind" : "def"}, {"label" : "create", "tail" : "(overflowStrategy: Synchronous[A], producerType: ProducerSide)(f: (Sync[A]) => Cancelable): Observable[A]", "member" : "monix.reactive.Observable.create", "link" : "monix\/reactive\/Observable$.html#create[A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[A],producerType:monix.execution.ChannelType.ProducerSide)(f:monix.reactive.observers.Subscriber.Sync[A]=>monix.execution.Cancelable):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "unsafeCreate", "tail" : "(f: (Subscriber[A]) => Cancelable): Observable[A]", "member" : "monix.reactive.Observable.unsafeCreate", "link" : "monix\/reactive\/Observable$.html#unsafeCreate[A](f:monix.reactive.observers.Subscriber[A]=>monix.execution.Cancelable):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Observable[Either[A, B]]): Observable[B]", "member" : "monix.reactive.Observable.tailRecM", "link" : "monix\/reactive\/Observable$.html#tailRecM[A,B](a:A)(f:A=>monix.reactive.Observable[Either[A,B]]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "unit", "tail" : ": Observable[Unit]", "member" : "monix.reactive.Observable.unit", "link" : "monix\/reactive\/Observable$.html#unit:monix.reactive.Observable[Unit]", "kind" : "val"}, {"label" : "never", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.never", "link" : "monix\/reactive\/Observable$.html#never[A]:monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "evalDelayed", "tail" : "(delay: FiniteDuration, a: => A): Observable[A]", "member" : "monix.reactive.Observable.evalDelayed", "link" : "monix\/reactive\/Observable$.html#evalDelayed[A](delay:scala.concurrent.duration.FiniteDuration,a:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: => A): Observable[A]", "member" : "monix.reactive.Observable.eval", "link" : "monix\/reactive\/Observable$.html#eval[A](a:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Observable[A]", "member" : "monix.reactive.Observable.raiseError", "link" : "monix\/reactive\/Observable$.html#raiseError[A](ex:Throwable):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "now", "tail" : "(elem: A): Observable[A]", "member" : "monix.reactive.Observable.now", "link" : "monix\/reactive\/Observable$.html#now[A](elem:A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "evalOnce", "tail" : "(f: => A): Observable[A]", "member" : "monix.reactive.Observable.evalOnce", "link" : "monix\/reactive\/Observable$.html#evalOnce[A](f:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(a: => A): Observable[A]", "member" : "monix.reactive.Observable.delay", "link" : "monix\/reactive\/Observable$.html#delay[A](a:=>A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(elem: A): Observable[A]", "member" : "monix.reactive.Observable.pure", "link" : "monix\/reactive\/Observable$.html#pure[A](elem:A):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): Observable[A]", "member" : "monix.reactive.Observable.apply", "link" : "monix\/reactive\/Observable$.html#apply[A](elems:A*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "Transformer", "tail" : "", "member" : "monix.reactive.Observable.Transformer", "link" : "monix\/reactive\/Observable$.html#Transformer[-A,+B]=monix.reactive.Observable[A]=>monix.reactive.Observable[B]", "kind" : "type"}, {"label" : "Operator", "tail" : "", "member" : "monix.reactive.Observable.Operator", "link" : "monix\/reactive\/Observable$.html#Operator[-I,+O]=monix.reactive.observers.Subscriber[O]=>monix.reactive.observers.Subscriber[I]", "kind" : "type"}, {"label" : "fromIO", "tail" : "(fa: IO[A]): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.fromIO", "link" : "monix\/reactive\/Observable$.html#fromIO[A](fa:cats.effect.IO[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(fa: Eval[A]): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.fromEval", "link" : "monix\/reactive\/Observable$.html#fromEval[A](fa:cats.Eval[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "switch", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.switch", "link" : "monix\/reactive\/Observable$.html#switch[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "concatDelayError", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.concatDelayError", "link" : "monix\/reactive\/Observable$.html#concatDelayError[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "concat", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.concat", "link" : "monix\/reactive\/Observable$.html#concat[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "mergeDelayError", "tail" : "(sources: Observable[A]*)(os: OverflowStrategy[A]): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.mergeDelayError", "link" : "monix\/reactive\/Observable$.html#mergeDelayError[A](sources:monix.reactive.Observable[A]*)(implicitos:monix.reactive.OverflowStrategy[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "merge", "tail" : "(sources: Observable[A]*)(os: OverflowStrategy[A]): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.merge", "link" : "monix\/reactive\/Observable$.html#merge[A](sources:monix.reactive.Observable[A]*)(implicitos:monix.reactive.OverflowStrategy[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "flattenDelayError", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.flattenDelayError", "link" : "monix\/reactive\/Observable$.html#flattenDelayError[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "flatten", "tail" : "(sources: Observable[A]*): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.flatten", "link" : "monix\/reactive\/Observable$.html#flatten[A](sources:monix.reactive.Observable[A]*):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fork", "tail" : "(fa: Observable[A], scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.fork", "link" : "monix\/reactive\/Observable$.html#fork[A](fa:monix.reactive.Observable[A],scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "fork", "tail" : "(fa: Observable[A]): Observable[A]", "member" : "monix.reactive.internal.deprecated.ObservableDeprecatedBuilders.fork", "link" : "monix\/reactive\/Observable$.html#fork[A](fa:monix.reactive.Observable[A]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Observable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Observable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Observable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Observable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Observable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Observable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Observable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Observable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Observable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Observable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Observable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Observable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Observable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Observable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Observable.html", "kind" : "class"}, {"name" : "monix.reactive.ObservableLike", "object" : "monix\/reactive\/ObservableLike$.html", "members_object" : [{"label" : "Deprecated", "tail" : "", "member" : "monix.reactive.ObservableLike.Deprecated", "link" : "monix\/reactive\/ObservableLike$.html#Deprecated[F[_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "fromIterable", "tail" : "(): ObservableLike[F]", "member" : "monix.reactive.ObservableLike.fromIterable", "link" : "monix\/reactive\/ObservableLike$.html#fromIterable[F[X]<:Iterable[X]]:monix.reactive.ObservableLike[F]", "kind" : "implicit def"}, {"label" : "fromEither", "tail" : "(): ObservableLike[[β$0$]Either[E, β$0$]]", "member" : "monix.reactive.ObservableLike.fromEither", "link" : "monix\/reactive\/ObservableLike$.html#fromEither[E<:Throwable]:monix.reactive.ObservableLike[[β$0$]scala.util.Either[E,β$0$]]", "kind" : "implicit def"}, {"label" : "fromFunction0", "tail" : ": ObservableLike[Function0]", "member" : "monix.reactive.ObservableLike.fromFunction0", "link" : "monix\/reactive\/ObservableLike$.html#fromFunction0:monix.reactive.ObservableLike[Function0]", "kind" : "implicit val"}, {"label" : "fromTry", "tail" : ": ObservableLike[Try]", "member" : "monix.reactive.ObservableLike.fromTry", "link" : "monix\/reactive\/ObservableLike$.html#fromTry:monix.reactive.ObservableLike[scala.util.Try]", "kind" : "implicit val"}, {"label" : "fromSyncIO", "tail" : ": ObservableLike[SyncIO]", "member" : "monix.reactive.ObservableLike.fromSyncIO", "link" : "monix\/reactive\/ObservableLike$.html#fromSyncIO:monix.reactive.ObservableLike[cats.effect.SyncIO]", "kind" : "implicit val"}, {"label" : "fromIO", "tail" : ": ObservableLike[IO]", "member" : "monix.reactive.ObservableLike.fromIO", "link" : "monix\/reactive\/ObservableLike$.html#fromIO:monix.reactive.ObservableLike[cats.effect.IO]", "kind" : "implicit val"}, {"label" : "fromEval", "tail" : ": ObservableLike[Eval]", "member" : "monix.reactive.ObservableLike.fromEval", "link" : "monix\/reactive\/ObservableLike$.html#fromEval:monix.reactive.ObservableLike[cats.Eval]", "kind" : "implicit val"}, {"label" : "fromCoeval", "tail" : ": ObservableLike[Coeval]", "member" : "monix.reactive.ObservableLike.fromCoeval", "link" : "monix\/reactive\/ObservableLike$.html#fromCoeval:monix.reactive.ObservableLike[monix.eval.Coeval]", "kind" : "implicit val"}, {"label" : "fromFuture", "tail" : ": ObservableLike[Future]", "member" : "monix.reactive.ObservableLike.fromFuture", "link" : "monix\/reactive\/ObservableLike$.html#fromFuture:monix.reactive.ObservableLike[scala.concurrent.Future]", "kind" : "implicit val"}, {"label" : "fromTask", "tail" : ": ObservableLike[Task]", "member" : "monix.reactive.ObservableLike.fromTask", "link" : "monix\/reactive\/ObservableLike$.html#fromTask:monix.reactive.ObservableLike[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "fromObservable", "tail" : ": ObservableLike[Observable]", "member" : "monix.reactive.ObservableLike.fromObservable", "link" : "monix\/reactive\/ObservableLike$.html#fromObservable:monix.reactive.ObservableLike[monix.reactive.Observable]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(F: ObservableLike[F]): ObservableLike[F]", "member" : "monix.reactive.ObservableLike.apply", "link" : "monix\/reactive\/ObservableLike$.html#apply[F[_]](implicitF:monix.reactive.ObservableLike[F]):monix.reactive.ObservableLike[F]", "kind" : "def"}, {"label" : "fromTaskLike", "tail" : "(F: TaskLike[F]): ObservableLike[F]", "member" : "monix.reactive.ObservableLikeImplicits0.fromTaskLike", "link" : "monix\/reactive\/ObservableLike$.html#fromTaskLike[F[_]](implicitF:monix.eval.TaskLike[F]):monix.reactive.ObservableLike[F]", "kind" : "implicit def"}, {"label" : "fromReactivePublisher", "tail" : ": ObservableLike[Publisher]", "member" : "monix.reactive.ObservableLikeImplicits0.fromReactivePublisher", "link" : "monix\/reactive\/ObservableLike$.html#fromReactivePublisher:monix.reactive.ObservableLike[org.reactivestreams.Publisher]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/ObservableLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/ObservableLike$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/ObservableLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/ObservableLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/ObservableLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/ObservableLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/ObservableLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/ObservableLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/ObservableLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/ObservableLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/ObservableLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/ObservableLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/ObservableLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/ObservableLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/ObservableLike$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/ObservableLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/ObservableLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/ObservableLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/ObservableLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/reactive\/ObservableLike.html", "kind" : "trait", "members_trait" : [{"label" : "narrow", "tail" : "(): FunctionK[F0, Observable]", "member" : "cats.arrow.FunctionK.narrow", "link" : "monix\/reactive\/ObservableLike.html#narrow[F0[x]<:F[x]]:cats.arrow.FunctionK[F0,G]", "kind" : "def"}, {"label" : "widen", "tail" : "(): FunctionK[F, G0]", "member" : "cats.arrow.FunctionK.widen", "link" : "monix\/reactive\/ObservableLike.html#widen[G0[x]>:G[x]]:cats.arrow.FunctionK[F,G0]", "kind" : "def"}, {"label" : "and", "tail" : "(h: FunctionK[F, H]): FunctionK[F, [γ$2$]Tuple2K[Observable, H, γ$2$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/reactive\/ObservableLike.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$2$]cats.data.Tuple2K[G,H,γ$2$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, Observable]): FunctionK[[γ$0$]EitherK[F, H, γ$0$], Observable]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/reactive\/ObservableLike.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$0$]cats.data.EitherK[F,H,γ$0$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[Observable, H]): FunctionK[F, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/reactive\/ObservableLike.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, F]): FunctionK[E, Observable]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/reactive\/ObservableLike.html#compose[E[_]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/ObservableLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/ObservableLike.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/ObservableLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/ObservableLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/ObservableLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/ObservableLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/ObservableLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/ObservableLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/ObservableLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/ObservableLike.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/ObservableLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/ObservableLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/ObservableLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/ObservableLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/ObservableLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/ObservableLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/ObservableLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/ObservableLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/ObservableLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[A]): Observable[A]", "member" : "monix.reactive.ObservableLike.apply", "link" : "monix\/reactive\/ObservableLike.html#apply[A](fa:F[A]):monix.reactive.Observable[A]", "kind" : "abstract def"}], "shortDescription" : "A lawless type class that provides conversions to Observable."}, {"name" : "monix.reactive.Observer", "object" : "monix\/reactive\/Observer$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.reactive.Observer.Extensions", "link" : "monix\/reactive\/Observer$.html#Extensions[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "feed", "tail" : "(target: Observer[A], subscription: BooleanCancelable, iterator: Iterator[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],subscription:monix.execution.cancelables.BooleanCancelable,iterator:Iterator[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "feed", "tail" : "(target: Observer[A], iterator: Iterator[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],iterator:Iterator[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "feed", "tail" : "(target: Observer[A], subscription: BooleanCancelable, iterable: Iterable[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],subscription:monix.execution.cancelables.BooleanCancelable,iterable:Iterable[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "feed", "tail" : "(target: Observer[A], iterable: Iterable[A])(s: Scheduler): Future[Ack]", "member" : "monix.reactive.Observer.feed", "link" : "monix\/reactive\/Observer$.html#feed[A](target:monix.reactive.Observer[A],iterable:Iterable[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "toReactiveSubscriber", "tail" : "(observer: Observer[A], requestCount: Int)(s: Scheduler): Subscriber[A]", "member" : "monix.reactive.Observer.toReactiveSubscriber", "link" : "monix\/reactive\/Observer$.html#toReactiveSubscriber[A](observer:monix.reactive.Observer[A],requestCount:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "toReactiveSubscriber", "tail" : "(observer: Observer[A])(s: Scheduler): Subscriber[A]", "member" : "monix.reactive.Observer.toReactiveSubscriber", "link" : "monix\/reactive\/Observer$.html#toReactiveSubscriber[A](observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "fromReactiveSubscriber", "tail" : "(subscriber: Subscriber[A], subscription: Cancelable)(s: Scheduler): Observer[A]", "member" : "monix.reactive.Observer.fromReactiveSubscriber", "link" : "monix\/reactive\/Observer$.html#fromReactiveSubscriber[A](subscriber:org.reactivestreams.Subscriber[A],subscription:monix.execution.Cancelable)(implicits:monix.execution.Scheduler):monix.reactive.Observer[A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(fa: Observer[A])(f: (B) => A): Observer[B]", "member" : "monix.reactive.Observer.contramap", "link" : "monix\/reactive\/Observer$.html#contramap[A,B](fa:monix.reactive.Observer[A])(f:B=>A):monix.reactive.Observer[B]", "kind" : "def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Sync[A]", "member" : "monix.reactive.Observer.dump", "link" : "monix\/reactive\/Observer$.html#dump[A](prefix:String,out:java.io.PrintStream):monix.reactive.Observer.Sync[A]", "kind" : "def"}, {"label" : "stopped", "tail" : "(): Sync[A]", "member" : "monix.reactive.Observer.stopped", "link" : "monix\/reactive\/Observer$.html#stopped[A]:monix.reactive.Observer.Sync[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(r: UncaughtExceptionReporter): Sync[A]", "member" : "monix.reactive.Observer.empty", "link" : "monix\/reactive\/Observer$.html#empty[A](implicitr:monix.execution.UncaughtExceptionReporter):monix.reactive.Observer.Sync[A]", "kind" : "def"}, {"label" : "Sync", "tail" : "", "member" : "monix.reactive.Observer.Sync", "link" : "monix\/reactive\/Observer$.html#Sync[-A]extendsObserver[A]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Observer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Observer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Observer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Observer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Observer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Observer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Observer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Observer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Observer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Observer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Observer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Observer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Observer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Observer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Observer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/reactive\/Observer.html", "kind" : "trait", "members_trait" : [{"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "monix\/reactive\/Observer.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Observer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Observer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "monix\/reactive\/Observer.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "monix\/reactive\/Observer.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "monix\/reactive\/Observer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "monix\/reactive\/Observer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "monix\/reactive\/Observer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/Observer.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/Observer.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/Observer.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.Any.getClass", "link" : "monix\/reactive\/Observer.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "The Observer from the Rx pattern is the trio of callbacks thatget subscribed to an Observablefor receiving events."}, {"name" : "monix.reactive.OverflowStrategy", "shortDescription" : "Represents the buffering overflowStrategy chosen for actions thatneed buffering, instructing the pipeline what to do whenthe buffer is full.", "object" : "monix\/reactive\/OverflowStrategy$.html", "members_class" : [{"label" : "isSynchronous", "tail" : ": Boolean", "member" : "monix.reactive.OverflowStrategy.isSynchronous", "link" : "monix\/reactive\/OverflowStrategy.html#isSynchronous:Boolean", "kind" : "val"}, {"label" : "isEvicted", "tail" : ": Boolean", "member" : "monix.reactive.OverflowStrategy.isEvicted", "link" : "monix\/reactive\/OverflowStrategy.html#isEvicted:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/OverflowStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/OverflowStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/OverflowStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/OverflowStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/OverflowStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/OverflowStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/OverflowStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/OverflowStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/OverflowStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/OverflowStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/OverflowStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/OverflowStrategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/OverflowStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/OverflowStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/OverflowStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/OverflowStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Default", "tail" : "(): OverflowStrategy[A]", "member" : "monix.reactive.OverflowStrategy.Default", "link" : "monix\/reactive\/OverflowStrategy$.html#Default[A]:monix.reactive.OverflowStrategy[A]", "kind" : "final def"}, {"label" : "Evicted", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Evicted", "link" : "monix\/reactive\/OverflowStrategy$.html#Evicted[A]extendsOverflowStrategy.Synchronous[A]", "kind" : "sealed abstract class"}, {"label" : "Synchronous", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Synchronous", "link" : "monix\/reactive\/OverflowStrategy$.html#Synchronous[+A]extendsOverflowStrategy[A]", "kind" : "sealed abstract class"}, {"label" : "ClearBufferAndSignal", "tail" : "", "member" : "monix.reactive.OverflowStrategy.ClearBufferAndSignal", "link" : "monix\/reactive\/OverflowStrategy$.html#ClearBufferAndSignal[A]extendsOverflowStrategy.Evicted[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ClearBuffer", "tail" : "", "member" : "monix.reactive.OverflowStrategy.ClearBuffer", "link" : "monix\/reactive\/OverflowStrategy$.html#ClearBufferextendsOverflowStrategy.Evicted[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropOldAndSignal", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropOldAndSignal", "link" : "monix\/reactive\/OverflowStrategy$.html#DropOldAndSignal[A]extendsOverflowStrategy.Evicted[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropOld", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropOld", "link" : "monix\/reactive\/OverflowStrategy$.html#DropOldextendsOverflowStrategy.Evicted[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropNewAndSignal", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropNewAndSignal", "link" : "monix\/reactive\/OverflowStrategy$.html#DropNewAndSignal[A]extendsOverflowStrategy.Evicted[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DropNew", "tail" : "", "member" : "monix.reactive.OverflowStrategy.DropNew", "link" : "monix\/reactive\/OverflowStrategy$.html#DropNewextendsOverflowStrategy.Evicted[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "BackPressure", "tail" : "", "member" : "monix.reactive.OverflowStrategy.BackPressure", "link" : "monix\/reactive\/OverflowStrategy$.html#BackPressureextendsOverflowStrategy[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Fail", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Fail", "link" : "monix\/reactive\/OverflowStrategy$.html#FailextendsOverflowStrategy.Synchronous[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Unbounded", "tail" : "", "member" : "monix.reactive.OverflowStrategy.Unbounded", "link" : "monix\/reactive\/OverflowStrategy$.html#Unbounded", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/OverflowStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/OverflowStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/OverflowStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/OverflowStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/OverflowStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/OverflowStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/OverflowStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/OverflowStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/OverflowStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/OverflowStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/OverflowStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/OverflowStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/OverflowStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/OverflowStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/OverflowStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/OverflowStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/OverflowStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/OverflowStrategy.html", "kind" : "class"}, {"name" : "monix.reactive.Pipe", "shortDescription" : "Represents a factory for an input\/output channel forbroadcasting input to multiple subscribers.", "object" : "monix\/reactive\/Pipe$.html", "members_class" : [{"label" : "transform", "tail" : "(f: (Observable[O]) => Observable[B]): Pipe[I, B]", "member" : "monix.reactive.Pipe.transform", "link" : "monix\/reactive\/Pipe.html#transform[B](f:monix.reactive.Observable[O]=>monix.reactive.Observable[B]):monix.reactive.Pipe[I,B]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(op: Operator[O, B]): Pipe[I, B]", "member" : "monix.reactive.Pipe.liftByOperator", "link" : "monix\/reactive\/Pipe.html#liftByOperator[B](op:monix.reactive.Observable.Operator[O,B]):monix.reactive.Pipe[I,B]", "kind" : "final def"}, {"label" : "concurrent", "tail" : "(strategy: Synchronous[I], producerType: ProducerSide)(s: Scheduler): (Sync[I], Observable[O])", "member" : "monix.reactive.Pipe.concurrent", "link" : "monix\/reactive\/Pipe.html#concurrent(strategy:monix.reactive.OverflowStrategy.Synchronous[I],producerType:monix.execution.ChannelType.ProducerSide)(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[I],monix.reactive.Observable[O])", "kind" : "def"}, {"label" : "concurrent", "tail" : "(strategy: Synchronous[I])(s: Scheduler): (Sync[I], Observable[O])", "member" : "monix.reactive.Pipe.concurrent", "link" : "monix\/reactive\/Pipe.html#concurrent(strategy:monix.reactive.OverflowStrategy.Synchronous[I])(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[I],monix.reactive.Observable[O])", "kind" : "def"}, {"label" : "concurrent", "tail" : "(s: Scheduler): (Sync[I], Observable[O])", "member" : "monix.reactive.Pipe.concurrent", "link" : "monix\/reactive\/Pipe.html#concurrent(implicits:monix.execution.Scheduler):(monix.reactive.Observer.Sync[I],monix.reactive.Observable[O])", "kind" : "def"}, {"label" : "multicast", "tail" : "(s: Scheduler): (Observer[I], Observable[O])", "member" : "monix.reactive.Pipe.multicast", "link" : "monix\/reactive\/Pipe.html#multicast(implicits:monix.execution.Scheduler):(monix.reactive.Observer[I],monix.reactive.Observable[O])", "kind" : "def"}, {"member" : "monix.reactive.Pipe#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Pipe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Pipe.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Pipe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Pipe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Pipe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Pipe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Pipe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Pipe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Pipe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Pipe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Pipe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Pipe.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Pipe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Pipe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Pipe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Pipe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unicast", "tail" : "(): (Observer[I], Observable[O])", "member" : "monix.reactive.Pipe.unicast", "link" : "monix\/reactive\/Pipe.html#unicast:(monix.reactive.Observer[I],monix.reactive.Observable[O])", "kind" : "abstract def"}], "members_object" : [{"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A]): Pipe[A, A]", "member" : "monix.reactive.Pipe.replayLimited", "link" : "monix\/reactive\/Pipe$.html#replayLimited[A](capacity:Int,initial:Seq[A]):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int): Pipe[A, A]", "member" : "monix.reactive.Pipe.replayLimited", "link" : "monix\/reactive\/Pipe$.html#replayLimited[A](capacity:Int):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(initial: Seq[A]): Pipe[A, A]", "member" : "monix.reactive.Pipe.replay", "link" : "monix\/reactive\/Pipe$.html#replay[A](initial:Seq[A]):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.replay", "link" : "monix\/reactive\/Pipe$.html#replay[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "async", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.async", "link" : "monix\/reactive\/Pipe$.html#async[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "behavior", "tail" : "(initial: A): Pipe[A, A]", "member" : "monix.reactive.Pipe.behavior", "link" : "monix\/reactive\/Pipe$.html#behavior[A](initial:A):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "publishToOne", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.publishToOne", "link" : "monix\/reactive\/Pipe$.html#publishToOne[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "publish", "tail" : "(): Pipe[A, A]", "member" : "monix.reactive.Pipe.publish", "link" : "monix\/reactive\/Pipe$.html#publish[A]:monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(strategy: MulticastStrategy[A]): Pipe[A, A]", "member" : "monix.reactive.Pipe.apply", "link" : "monix\/reactive\/Pipe$.html#apply[A](strategy:monix.reactive.MulticastStrategy[A]):monix.reactive.Pipe[A,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/Pipe$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/Pipe$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/Pipe$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/Pipe$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/Pipe$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/Pipe$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/Pipe$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/Pipe$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/Pipe$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/Pipe$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/Pipe$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/Pipe$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/Pipe$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/Pipe$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/Pipe$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/Pipe$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/Pipe$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/Pipe.html", "kind" : "class"}], "monix.catnap.cancelables" : [{"name" : "monix.catnap.cancelables.AssignableCancelableF", "object" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html", "members_object" : [{"label" : "dummy", "tail" : "(F: Applicative[F]): Multi[F]", "member" : "monix.catnap.cancelables.AssignableCancelableF.dummy", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#dummy[F[_]](implicitF:cats.Applicative[F]):monix.catnap.cancelables.AssignableCancelableF.Multi[F]", "kind" : "def"}, {"label" : "alreadyCanceled", "tail" : "(F: Applicative[F]): Bool[F] with Empty[F]", "member" : "monix.catnap.cancelables.AssignableCancelableF.alreadyCanceled", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#alreadyCanceled[F[_]](implicitF:cats.Applicative[F]):monix.catnap.cancelables.AssignableCancelableF.Bool[F]withmonix.catnap.CancelableF.Empty[F]", "kind" : "def"}, {"label" : "Multi", "tail" : "", "member" : "monix.catnap.cancelables.AssignableCancelableF.Multi", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#Multi[F[_]]extendsAssignableCancelableF.Bool[F]", "kind" : "trait"}, {"label" : "Bool", "tail" : "", "member" : "monix.catnap.cancelables.AssignableCancelableF.Bool", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#Bool[F[_]]extendsAssignableCancelableF[F]withBooleanCancelableF[F]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/catnap\/cancelables\/AssignableCancelableF.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "set", "tail" : "(cancelable: CancelableF[F]): F[Unit]", "member" : "monix.catnap.cancelables.AssignableCancelableF.set", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#set(cancelable:monix.catnap.CancelableF[F]):F[Unit]", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): CancelToken[F]", "member" : "monix.catnap.CancelableF.cancel", "link" : "monix\/catnap\/cancelables\/AssignableCancelableF.html#cancel:cats.effect.CancelToken[F]", "kind" : "abstract def"}], "shortDescription" : "Represents a class of cancelable references that can holdan internal reference to another cancelable (and thus has tosupport the assignment operator)."}, {"name" : "monix.catnap.cancelables.BooleanCancelableF", "object" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html", "members_object" : [{"label" : "dummy", "tail" : "(F: Applicative[F]): BooleanCancelableF[F]", "member" : "monix.catnap.cancelables.BooleanCancelableF.dummy", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#dummy[F[_]](implicitF:cats.Applicative[F]):monix.catnap.cancelables.BooleanCancelableF[F]", "kind" : "def"}, {"label" : "alreadyCanceled", "tail" : "(F: Applicative[F]): BooleanCancelableF[F] with Empty[F]", "member" : "monix.catnap.cancelables.BooleanCancelableF.alreadyCanceled", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#alreadyCanceled[F[_]](implicitF:cats.Applicative[F]):monix.catnap.cancelables.BooleanCancelableF[F]withmonix.catnap.CancelableF.Empty[F]", "kind" : "def"}, {"label" : "unsafeApply", "tail" : "(token: CancelToken[F])(F: Sync[F]): BooleanCancelableF[F]", "member" : "monix.catnap.cancelables.BooleanCancelableF.unsafeApply", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#unsafeApply[F[_]](token:cats.effect.CancelToken[F])(implicitF:cats.effect.Sync[F]):monix.catnap.cancelables.BooleanCancelableF[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(token: CancelToken[F])(F: Sync[F]): F[BooleanCancelableF[F]]", "member" : "monix.catnap.cancelables.BooleanCancelableF.apply", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#apply[F[_]](token:cats.effect.CancelToken[F])(implicitF:cats.effect.Sync[F]):F[monix.catnap.cancelables.BooleanCancelableF[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/catnap\/cancelables\/BooleanCancelableF.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isCanceled", "tail" : "(): F[Boolean]", "member" : "monix.catnap.cancelables.BooleanCancelableF.isCanceled", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#isCanceled:F[Boolean]", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): CancelToken[F]", "member" : "monix.catnap.CancelableF.cancel", "link" : "monix\/catnap\/cancelables\/BooleanCancelableF.html#cancel:cats.effect.CancelToken[F]", "kind" : "abstract def"}], "shortDescription" : "Represents a CancelableF that can be queried for thecanceled status."}, {"name" : "monix.catnap.cancelables.SingleAssignCancelableF", "shortDescription" : "Represents a monix.catnap.CancelableF that can be assigned onlyonce to another cancelable reference.", "object" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html", "members_class" : [{"label" : "set", "tail" : "(ref: CancelableF[F]): F[Unit]", "member" : "monix.catnap.cancelables.SingleAssignCancelableF.set", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#set(ref:monix.catnap.CancelableF[F]):F[Unit]", "kind" : "def"}, {"label" : "cancel", "tail" : ": CancelToken[F]", "member" : "monix.catnap.cancelables.SingleAssignCancelableF.cancel", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#cancel:cats.effect.CancelToken[F]", "kind" : "val"}, {"label" : "isCanceled", "tail" : ": F[Boolean]", "member" : "monix.catnap.cancelables.SingleAssignCancelableF.isCanceled", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#isCanceled:F[Boolean]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unsafePlusOne", "tail" : "(extra: CancelableF[F])(F: Sync[F]): SingleAssignCancelableF[F]", "member" : "monix.catnap.cancelables.SingleAssignCancelableF.unsafePlusOne", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#unsafePlusOne[F[_]](extra:monix.catnap.CancelableF[F])(implicitF:cats.effect.Sync[F]):monix.catnap.cancelables.SingleAssignCancelableF[F]", "kind" : "def"}, {"label" : "unsafeApply", "tail" : "(F: Sync[F]): SingleAssignCancelableF[F]", "member" : "monix.catnap.cancelables.SingleAssignCancelableF.unsafeApply", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#unsafeApply[F[_]](implicitF:cats.effect.Sync[F]):monix.catnap.cancelables.SingleAssignCancelableF[F]", "kind" : "def"}, {"label" : "plusOne", "tail" : "(extra: CancelableF[F])(F: Sync[F]): F[SingleAssignCancelableF[F]]", "member" : "monix.catnap.cancelables.SingleAssignCancelableF.plusOne", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#plusOne[F[_]](extra:monix.catnap.CancelableF[F])(implicitF:cats.effect.Sync[F]):F[monix.catnap.cancelables.SingleAssignCancelableF[F]]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Sync[F]): F[SingleAssignCancelableF[F]]", "member" : "monix.catnap.cancelables.SingleAssignCancelableF.apply", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#apply[F[_]](implicitF:cats.effect.Sync[F]):F[monix.catnap.cancelables.SingleAssignCancelableF[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/cancelables\/SingleAssignCancelableF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/catnap\/cancelables\/SingleAssignCancelableF.html", "kind" : "class"}], "monix.tail" : [{"name" : "monix.tail.Iterant", "shortDescription" : "The Iterant is a type that describes lazy, possibly asynchronousstreaming of elements using a pull-based protocol.", "object" : "monix\/tail\/Iterant$.html", "members_class" : [{"label" : "zipWithIndex", "tail" : "(F: Sync[F]): Iterant[F, (A, Long)]", "member" : "monix.tail.Iterant.zipWithIndex", "link" : "monix\/tail\/Iterant.html#zipWithIndex(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(rhs: Iterant[F, B])(f: (A, B) => C)(F: Sync[F]): Iterant[F, C]", "member" : "monix.tail.Iterant.zipMap", "link" : "monix\/tail\/Iterant.html#zipMap[B,C](rhs:monix.tail.Iterant[F,B])(f:(A,B)=>C)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,C]", "kind" : "final def"}, {"label" : "zip", "tail" : "(rhs: Iterant[F, B])(F: Sync[F]): Iterant[F, (A, B)]", "member" : "monix.tail.Iterant.zip", "link" : "monix\/tail\/Iterant.html#zip[B](rhs:monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,(A,B)]", "kind" : "final def"}, {"label" : "uncons", "tail" : "(F: Sync[F]): Iterant[F, (Option[A], Iterant[F, A])]", "member" : "monix.tail.Iterant.uncons", "link" : "monix\/tail\/Iterant.html#uncons(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,(Option[A],monix.tail.Iterant[F,A])]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(F: Sync[F]): F[List[A]]", "member" : "monix.tail.Iterant.toListL", "link" : "monix\/tail\/Iterant.html#toListL(implicitF:cats.effect.Sync[F]):F[List[A]]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(F: Sync[F], A: Numeric[A]): F[A]", "member" : "monix.tail.Iterant.sumL", "link" : "monix\/tail\/Iterant.html#sumL(implicitF:cats.effect.Sync[F],implicitA:Numeric[A]):F[A]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(F: Sync[F], B: Monoid[B]): Iterant[F, B]", "member" : "monix.tail.Iterant.scanMap0", "link" : "monix\/tail\/Iterant.html#scanMap0[B](f:A=>B)(implicitF:cats.effect.Sync[F],implicitB:cats.Monoid[B]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(F: Sync[F], B: Monoid[B]): Iterant[F, B]", "member" : "monix.tail.Iterant.scanMap", "link" : "monix\/tail\/Iterant.html#scanMap[B](f:A=>B)(implicitF:cats.effect.Sync[F],implicitB:cats.Monoid[B]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: Sync[F]): Iterant[F, S]", "member" : "monix.tail.Iterant.scanEval0", "link" : "monix\/tail\/Iterant.html#scanEval0[S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: Sync[F]): Iterant[F, S]", "member" : "monix.tail.Iterant.scanEval", "link" : "monix\/tail\/Iterant.html#scanEval[S](seed:F[S])(op:(S,A)=>F[S])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S)(F: Sync[F]): Iterant[F, S]", "member" : "monix.tail.Iterant.scan0", "link" : "monix\/tail\/Iterant.html#scan0[S](seed:=>S)(op:(S,A)=>S)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,S]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S)(F: Sync[F]): Iterant[F, S]", "member" : "monix.tail.Iterant.scan", "link" : "monix\/tail\/Iterant.html#scan[S](seed:=>S)(op:(S,A)=>S)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,S]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(F: Effect[F]): Publisher[A]", "member" : "monix.tail.Iterant.toReactivePublisher", "link" : "monix\/tail\/Iterant.html#toReactivePublisher(implicitF:cats.effect.Effect[F]):org.reactivestreams.Publisher[A]", "kind" : "final def"}, {"label" : "toChannel", "tail" : "(F: Concurrent[F], cs: ContextShift[F]): Channel[F, A]", "member" : "monix.tail.Iterant.toChannel", "link" : "monix\/tail\/Iterant.html#toChannel(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):monix.tail.Iterant.Channel[F,A]", "kind" : "final def"}, {"label" : "consumeWithConfig", "tail" : "(config: Config)(F: Concurrent[F], cs: ContextShift[F]): Resource[F, Consumer[F, A]]", "member" : "monix.tail.Iterant.consumeWithConfig", "link" : "monix\/tail\/Iterant.html#consumeWithConfig(config:monix.catnap.ConsumerF.Config)(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):cats.effect.Resource[F,monix.tail.Iterant.Consumer[F,A]]", "kind" : "final def"}, {"label" : "consume", "tail" : "(F: Concurrent[F], cs: ContextShift[F]): Resource[F, Consumer[F, A]]", "member" : "monix.tail.Iterant.consume", "link" : "monix\/tail\/Iterant.html#consume(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):cats.effect.Resource[F,monix.tail.Iterant.Consumer[F,A]]", "kind" : "final def"}, {"label" : "pushToChannel", "tail" : "(channel: Producer[F, A])(F: Sync[F]): F[Unit]", "member" : "monix.tail.Iterant.pushToChannel", "link" : "monix\/tail\/Iterant.html#pushToChannel(channel:monix.tail.Iterant.Producer[F,A])(implicitF:cats.effect.Sync[F]):F[Unit]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(rhs: Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.interleave", "link" : "monix\/tail\/Iterant.html#interleave[B>:A](rhs:monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "tail", "tail" : "(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.tail", "link" : "monix\/tail\/Iterant.html#tail(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeEveryNth", "link" : "monix\/tail\/Iterant.html#takeEveryNth(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeWhileWithIndex", "tail" : "(p: (A, Long) => Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeWhileWithIndex", "link" : "monix\/tail\/Iterant.html#takeWhileWithIndex(p:(A,Long)=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeWhile", "link" : "monix\/tail\/Iterant.html#takeWhile(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.takeLast", "link" : "monix\/tail\/Iterant.html#takeLast(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.take", "link" : "monix\/tail\/Iterant.html#take(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "unsafeFlatMap", "tail" : "(f: (A) => Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.unsafeFlatMap", "link" : "monix\/tail\/Iterant.html#unsafeFlatMap[B](f:A=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "parZipMap", "tail" : "(rhs: Iterant[F, B])(f: (A, B) => C)(F: Sync[F], P: Parallel[F]): Iterant[F, C]", "member" : "monix.tail.Iterant.parZipMap", "link" : "monix\/tail\/Iterant.html#parZipMap[B,C](rhs:monix.tail.Iterant[F,B])(f:(A,B)=>C)(implicitF:cats.effect.Sync[F],implicitP:cats.Parallel[F]):monix.tail.Iterant[F,C]", "kind" : "final def"}, {"label" : "parZip", "tail" : "(rhs: Iterant[F, B])(F: Sync[F], P: Parallel[F]): Iterant[F, (A, B)]", "member" : "monix.tail.Iterant.parZip", "link" : "monix\/tail\/Iterant.html#parZip[B](rhs:monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F],implicitP:cats.Parallel[F]):monix.tail.Iterant[F,(A,B)]", "kind" : "final def"}, {"label" : "onErrorIgnore", "tail" : "(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.onErrorIgnore", "link" : "monix\/tail\/Iterant.html#onErrorIgnore(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B)(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorHandle", "link" : "monix\/tail\/Iterant.html#onErrorHandle[B>:A](f:Throwable=>B)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorRecover", "link" : "monix\/tail\/Iterant.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorHandleWith", "link" : "monix\/tail\/Iterant.html#onErrorHandleWith[B>:A](f:Throwable=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Iterant[F, B]])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.onErrorRecoverWith", "link" : "monix\/tail\/Iterant.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.tail.Iterant[F,B]])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "retryIfEmpty", "tail" : "(maxRetries: Option[Int])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.retryIfEmpty", "link" : "monix\/tail\/Iterant.html#retryIfEmpty(maxRetries:Option[Int])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeat", "link" : "monix\/tail\/Iterant.html#repeat(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "reduceL", "tail" : "(op: (A, A) => A)(F: Sync[F]): F[Option[A]]", "member" : "monix.tail.Iterant.reduceL", "link" : "monix\/tail\/Iterant.html#reduceL(op:(A,A)=>A)(implicitF:cats.effect.Sync[F]):F[Option[A]]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.switchIfEmpty", "link" : "monix\/tail\/Iterant.html#switchIfEmpty(backup:monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "minL", "tail" : "(F: Sync[F], A: Order[A]): F[Option[A]]", "member" : "monix.tail.Iterant.minL", "link" : "monix\/tail\/Iterant.html#minL(implicitF:cats.effect.Sync[F],implicitA:cats.Order[A]):F[Option[A]]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(F: Sync[F], K: Order[K]): F[Option[A]]", "member" : "monix.tail.Iterant.minByL", "link" : "monix\/tail\/Iterant.html#minByL[K](key:A=>K)(implicitF:cats.effect.Sync[F],implicitK:cats.Order[K]):F[Option[A]]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(F: Sync[F], A: Order[A]): F[Option[A]]", "member" : "monix.tail.Iterant.maxL", "link" : "monix\/tail\/Iterant.html#maxL(implicitF:cats.effect.Sync[F],implicitA:cats.Order[A]):F[Option[A]]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(F: Sync[F], K: Order[K]): F[Option[A]]", "member" : "monix.tail.Iterant.maxByL", "link" : "monix\/tail\/Iterant.html#maxByL[K](key:A=>K)(implicitF:cats.effect.Sync[F],implicitK:cats.Order[K]):F[Option[A]]", "kind" : "final def"}, {"label" : "mapK", "tail" : "(f: ~>[F, G])(G: Sync[G]): Iterant[G, A]", "member" : "monix.tail.Iterant.mapK", "link" : "monix\/tail\/Iterant.html#mapK[G[_]](f:F~>G)(implicitG:cats.effect.Sync[G]):monix.tail.Iterant[G,A]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: A, separator: A, end: A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.intersperse", "link" : "monix\/tail\/Iterant.html#intersperse(start:A,separator:A,end:A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.intersperse", "link" : "monix\/tail\/Iterant.html#intersperse(separator:A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "foldRightL", "tail" : "(b: F[B])(f: (A, F[B]) => F[B])(F: Sync[F]): F[B]", "member" : "monix.tail.Iterant.foldRightL", "link" : "monix\/tail\/Iterant.html#foldRightL[B](b:F[B])(f:(A,F[B])=>F[B])(implicitF:cats.effect.Sync[F]):F[B]", "kind" : "final def"}, {"label" : "foldWhileLeftEvalL", "tail" : "(seed: F[S])(op: (S, A) => F[Either[S, S]])(F: Sync[F]): F[S]", "member" : "monix.tail.Iterant.foldWhileLeftEvalL", "link" : "monix\/tail\/Iterant.html#foldWhileLeftEvalL[S](seed:F[S])(op:(S,A)=>F[Either[S,S]])(implicitF:cats.effect.Sync[F]):F[S]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => S)(op: (S, A) => S)(F: Sync[F]): F[S]", "member" : "monix.tail.Iterant.foldLeftL", "link" : "monix\/tail\/Iterant.html#foldLeftL[S](seed:=>S)(op:(S,A)=>S)(implicitF:cats.effect.Sync[F]):F[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(F: Sync[F], A: Monoid[A]): F[A]", "member" : "monix.tail.Iterant.foldL", "link" : "monix\/tail\/Iterant.html#foldL(implicitF:cats.effect.Sync[F],implicitA:cats.Monoid[A]):F[A]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean)(F: Sync[F]): F[Option[A]]", "member" : "monix.tail.Iterant.findL", "link" : "monix\/tail\/Iterant.html#findL(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):F[Option[A]]", "kind" : "def"}, {"label" : "mapEval", "tail" : "(f: (A) => F[B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.mapEval", "link" : "monix\/tail\/Iterant.html#mapEval[B](f:A=>F[B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(F: Sync[F]): F[Option[A]]", "member" : "monix.tail.Iterant.lastOptionL", "link" : "monix\/tail\/Iterant.html#lastOptionL(implicitF:cats.effect.Sync[F]):F[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(F: Sync[F]): F[Option[A]]", "member" : "monix.tail.Iterant.headOptionL", "link" : "monix\/tail\/Iterant.html#headOptionL(implicitF:cats.effect.Sync[F]):F[Option[A]]", "kind" : "final def"}, {"label" : "mapBatch", "tail" : "(f: (A) => Batch[B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.mapBatch", "link" : "monix\/tail\/Iterant.html#mapBatch[B](f:A=>monix.tail.batches.Batch[B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B)(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.map", "link" : "monix\/tail\/Iterant.html#map[B](f:A=>B)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(F: Sync[F]): F[Unit]", "member" : "monix.tail.Iterant.completedL", "link" : "monix\/tail\/Iterant.html#completedL(implicitF:cats.effect.Sync[F]):F[Unit]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(F: Sync[F]): F[Unit]", "member" : "monix.tail.Iterant.foreach", "link" : "monix\/tail\/Iterant.html#foreach(cb:A=>Unit)(implicitF:cats.effect.Sync[F]):F[Unit]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean)(F: Sync[F]): F[Boolean]", "member" : "monix.tail.Iterant.forallL", "link" : "monix\/tail\/Iterant.html#forallL(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):F[Boolean]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.withFilter", "link" : "monix\/tail\/Iterant.html#withFilter(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.filter", "link" : "monix\/tail\/Iterant.html#filter(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S])(F: Sync[F]): F[S]", "member" : "monix.tail.Iterant.foldWhileLeftL", "link" : "monix\/tail\/Iterant.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S])(implicitF:cats.effect.Sync[F]):F[S]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean)(F: Sync[F]): F[Boolean]", "member" : "monix.tail.Iterant.existsL", "link" : "monix\/tail\/Iterant.html#existsL(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):F[Boolean]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dump", "link" : "monix\/tail\/Iterant.html#dump(prefix:String,out:java.io.PrintStream)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dropWhileWithIndex", "link" : "monix\/tail\/Iterant.html#dropWhileWithIndex(p:(A,Int)=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dropWhile", "link" : "monix\/tail\/Iterant.html#dropWhile(p:A=>Boolean)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.dropLast", "link" : "monix\/tail\/Iterant.html#dropLast(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.drop", "link" : "monix\/tail\/Iterant.html#drop(n:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.guaranteeCase", "link" : "monix\/tail\/Iterant.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: F[Unit])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.guarantee", "link" : "monix\/tail\/Iterant.html#guarantee(f:F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(F: Sync[F], K: Eq[K]): Iterant[F, A]", "member" : "monix.tail.Iterant.distinctUntilChangedByKey", "link" : "monix\/tail\/Iterant.html#distinctUntilChangedByKey[K](key:A=>K)(implicitF:cats.effect.Sync[F],implicitK:cats.Eq[K]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(F: Sync[F], A: Eq[A]): Iterant[F, A]", "member" : "monix.tail.Iterant.distinctUntilChanged", "link" : "monix\/tail\/Iterant.html#distinctUntilChanged(implicitF:cats.effect.Sync[F],implicitA:cats.Eq[A]):monix.tail.Iterant[F,A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(F: Sync[F]): F[Long]", "member" : "monix.tail.Iterant.countL", "link" : "monix\/tail\/Iterant.html#countL(implicitF:cats.effect.Sync[F]):F[Long]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.flatMap", "link" : "monix\/tail\/Iterant.html#flatMap[B](f:A=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.concatMap", "link" : "monix\/tail\/Iterant.html#concatMap[B](f:A=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Iterant[F, B]], F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.flatten", "link" : "monix\/tail\/Iterant.html#flatten[B](implicitev:A<:<monix.tail.Iterant[F,B],implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Iterant[F, B]], F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.concat", "link" : "monix\/tail\/Iterant.html#concat[B](implicitev:A<:<monix.tail.Iterant[F,B],implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.collect", "link" : "monix\/tail\/Iterant.html#collect[B](pf:PartialFunction[A,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int)(F: Sync[F]): Iterant[F, Seq[A]]", "member" : "monix.tail.Iterant.bufferSliding", "link" : "monix\/tail\/Iterant.html#bufferSliding(count:Int,skip:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int)(F: Sync[F]): Iterant[F, Seq[A]]", "member" : "monix.tail.Iterant.bufferTumbling", "link" : "monix\/tail\/Iterant.html#bufferTumbling(count:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,Seq[A]]", "kind" : "def"}, {"label" : "batched", "tail" : "(count: Int)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.batched", "link" : "monix\/tail\/Iterant.html#batched(count:Int)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(F: Sync[F]): Iterant[F, Either[Throwable, A]]", "member" : "monix.tail.Iterant.attempt", "link" : "monix\/tail\/Iterant.html#attempt(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,Either[Throwable,A]]", "kind" : "final def"}, {"label" : "upcast", "tail" : "(): Iterant[F, B]", "member" : "monix.tail.Iterant.upcast", "link" : "monix\/tail\/Iterant.html#upcast[B>:A]:monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "++", "tail" : "(rhs: => Iterant[F, B])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.++", "link" : "monix\/tail\/Iterant.html#++[B>:A](rhs:=>monix.tail.Iterant[F,B])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B)(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.:+", "link" : "monix\/tail\/Iterant.html#:+[B>:A](elem:B)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(head: B)(F: Applicative[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.+:", "link" : "monix\/tail\/Iterant.html#+:[B>:A](head:B)(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "++", "tail" : "(rhs: F[Iterant[F, B]])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.++", "link" : "monix\/tail\/Iterant.html#++[B>:A](rhs:F[monix.tail.Iterant[F,B]])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/tail\/Iterant.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "monix\/tail\/Iterant.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "monix\/tail\/Iterant.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "monix\/tail\/Iterant.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/Iterant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/Iterant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/Iterant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/Iterant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/Iterant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/Iterant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/Iterant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/Iterant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/Iterant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/Iterant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/Iterant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/Iterant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/Iterant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/Iterant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/Iterant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/Iterant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "monix\/tail\/Iterant.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "monix\/tail\/Iterant.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "monix\/tail\/Iterant.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "CatsSyncInstances", "tail" : "", "member" : "monix.tail.IterantInstances.CatsSyncInstances", "link" : "monix\/tail\/Iterant$.html#CatsSyncInstances[F[_]]extendsStackSafeMonad[[β$0$]monix.tail.Iterant[F,β$0$]]withMonadError[[β$1$]monix.tail.Iterant[F,β$1$],Throwable]withDefer[[β$2$]monix.tail.Iterant[F,β$2$]]withMonoidK[[β$3$]monix.tail.Iterant[F,β$3$]]withCoflatMap[[β$4$]monix.tail.Iterant[F,β$4$]]withFunctorFilter[[β$5$]monix.tail.Iterant[F,β$5$]]", "kind" : "class"}, {"label" : "Deprecated", "tail" : "", "member" : "monix.tail.Iterant.Deprecated", "link" : "monix\/tail\/Iterant$.html#Deprecated[F[_],A]extendsIterantDeprecated.Extensions[F,A]", "kind" : "implicit class"}, {"label" : "Visitor", "tail" : "", "member" : "monix.tail.Iterant.Visitor", "link" : "monix\/tail\/Iterant$.html#Visitor[F[_],A,R]extendsmonix.tail.Iterant[F,A]=>R", "kind" : "abstract class"}, {"label" : "Concat", "tail" : "", "member" : "monix.tail.Iterant.Concat", "link" : "monix\/tail\/Iterant$.html#Concat[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Scope", "tail" : "", "member" : "monix.tail.Iterant.Scope", "link" : "monix\/tail\/Iterant$.html#Scope[F[_],A,B]extendsIterant[F,B]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Halt", "tail" : "", "member" : "monix.tail.Iterant.Halt", "link" : "monix\/tail\/Iterant$.html#Halt[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Suspend", "tail" : "", "member" : "monix.tail.Iterant.Suspend", "link" : "monix\/tail\/Iterant$.html#Suspend[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NextBatch", "tail" : "", "member" : "monix.tail.Iterant.NextBatch", "link" : "monix\/tail\/Iterant$.html#NextBatch[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NextCursor", "tail" : "", "member" : "monix.tail.Iterant.NextCursor", "link" : "monix\/tail\/Iterant$.html#NextCursor[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Last", "tail" : "", "member" : "monix.tail.Iterant.Last", "link" : "monix\/tail\/Iterant$.html#Last[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Next", "tail" : "", "member" : "monix.tail.Iterant.Next", "link" : "monix\/tail\/Iterant$.html#Next[F[_],A]extendsIterant[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "concatS", "tail" : "(lh: F[Iterant[F, A]], rh: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.Iterant.concatS", "link" : "monix\/tail\/Iterant$.html#concatS[F[_],A](lh:F[monix.tail.Iterant[F,A]],rh:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "scopeS", "tail" : "(acquire: F[A], use: (A) => F[Iterant[F, B]], release: (A, ExitCase[Throwable]) => F[Unit]): Iterant[F, B]", "member" : "monix.tail.Iterant.scopeS", "link" : "monix\/tail\/Iterant$.html#scopeS[F[_],A,B](acquire:F[A],use:A=>F[monix.tail.Iterant[F,B]],release:(A,cats.effect.ExitCase[Throwable])=>F[Unit]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "suspendS", "tail" : "(rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.Iterant.suspendS", "link" : "monix\/tail\/Iterant$.html#suspendS[F[_],A](rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "haltS", "tail" : "(e: Option[Throwable]): Iterant[F, A]", "member" : "monix.tail.Iterant.haltS", "link" : "monix\/tail\/Iterant$.html#haltS[F[_],A](e:Option[Throwable]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextBatchS", "tail" : "(items: Batch[A], rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.Iterant.nextBatchS", "link" : "monix\/tail\/Iterant$.html#nextBatchS[F[_],A](items:monix.tail.batches.Batch[A],rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextCursorS", "tail" : "(items: BatchCursor[A], rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.Iterant.nextCursorS", "link" : "monix\/tail\/Iterant$.html#nextCursorS[F[_],A](items:monix.tail.batches.BatchCursor[A],rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "nextS", "tail" : "(item: A, rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.Iterant.nextS", "link" : "monix\/tail\/Iterant$.html#nextS[F[_],A](item:A,rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "concat", "tail" : "(xs: Iterant[F, A]*)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.concat", "link" : "monix\/tail\/Iterant$.html#concat[F[_],A](xs:monix.tail.Iterant[F,A]*)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalWithFixedDelay", "link" : "monix\/tail\/Iterant$.html#intervalWithFixedDelay[F[_]](initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalWithFixedDelay", "tail" : "(delay: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalWithFixedDelay", "link" : "monix\/tail\/Iterant$.html#intervalWithFixedDelay[F[_]](delay:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalAtFixedRate", "link" : "monix\/tail\/Iterant$.html#intervalAtFixedRate[F[_]](initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "intervalAtFixedRate", "tail" : "(period: FiniteDuration)(F: Async[F], timer: Timer[F]): Iterant[F, Long]", "member" : "monix.tail.Iterant.intervalAtFixedRate", "link" : "monix\/tail\/Iterant$.html#intervalAtFixedRate[F[_]](period:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.Async[F],implicittimer:cats.effect.Timer[F]):monix.tail.Iterant[F,Long]", "kind" : "def"}, {"label" : "never", "tail" : "(F: Async[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.never", "link" : "monix\/tail\/Iterant$.html#never[F[_],A](implicitF:cats.effect.Async[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Iterant[F, A]", "member" : "monix.tail.Iterant.empty", "link" : "monix\/tail\/Iterant$.html#empty[F[_],A]:monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeatEvalF", "tail" : "(fa: F[A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeatEvalF", "link" : "monix\/tail\/Iterant$.html#repeatEvalF[F[_],A](fa:F[A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeatEval", "tail" : "(thunk: => A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeatEval", "link" : "monix\/tail\/Iterant$.html#repeatEval[F[_],A](thunk:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(elems: A*)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.repeat", "link" : "monix\/tail\/Iterant$.html#repeat[F[_],A](elems:A*)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "range", "tail" : "(from: Int, until: Int, step: Int)(F: Applicative[F]): Iterant[F, Int]", "member" : "monix.tail.Iterant.range", "link" : "monix\/tail\/Iterant$.html#range[F[_]](from:Int,until:Int,step:Int)(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,Int]", "kind" : "def"}, {"label" : "channel", "tail" : "(bufferCapacity: BufferCapacity, maxBatchSize: Int, producerType: ProducerSide)(F: Concurrent[F], cs: ContextShift[F]): F[(Producer[F, A], Iterant[F, A])]", "member" : "monix.tail.Iterant.channel", "link" : "monix\/tail\/Iterant$.html#channel[F[_],A](bufferCapacity:monix.execution.BufferCapacity,maxBatchSize:Int,producerType:monix.execution.ChannelType.ProducerSide)(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):F[(monix.tail.Iterant.Producer[F,A],monix.tail.Iterant[F,A])]", "kind" : "def"}, {"label" : "fromResource", "tail" : "(r: Resource[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromResource", "link" : "monix\/tail\/Iterant$.html#fromResource[F[_],A](r:cats.effect.Resource[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromChannel", "tail" : "(channel: Channel[F, A], bufferCapacity: BufferCapacity, maxBatchSize: Int)(F: Async[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromChannel", "link" : "monix\/tail\/Iterant$.html#fromChannel[F[_],A](channel:monix.tail.Iterant.Channel[F,A],bufferCapacity:monix.execution.BufferCapacity,maxBatchSize:Int)(implicitF:cats.effect.Async[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromConsumer", "tail" : "(consumer: Consumer[F, A], maxBatchSize: Int)(F: Async[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromConsumer", "link" : "monix\/tail\/Iterant$.html#fromConsumer[F[_],A](consumer:monix.tail.Iterant.Consumer[F,A],maxBatchSize:Int)(implicitF:cats.effect.Async[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromLazyStateAction", "tail" : "(f: (S) => F[(A, S)])(seed: => F[S])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromLazyStateAction", "link" : "monix\/tail\/Iterant$.html#fromLazyStateAction[F[_],S,A](f:S=>F[(A,S)])(seed:=>F[S])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromStateAction", "tail" : "(f: (S) => (A, S))(seed: => S)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromStateAction", "link" : "monix\/tail\/Iterant$.html#fromStateAction[F[_],S,A](f:S=>(A,S))(seed:=>S)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromReactivePublisher", "tail" : "(publisher: Publisher[A], requestCount: Int, eagerBuffer: Boolean)(F: Async[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromReactivePublisher", "link" : "monix\/tail\/Iterant$.html#fromReactivePublisher[F[_],A](publisher:org.reactivestreams.Publisher[A],requestCount:Int,eagerBuffer:Boolean)(implicitF:cats.effect.Async[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromBatchCursor", "tail" : "(xs: BatchCursor[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromBatchCursor", "link" : "monix\/tail\/Iterant$.html#fromBatchCursor[F[_],A](xs:monix.tail.batches.BatchCursor[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromBatch", "tail" : "(xs: Batch[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromBatch", "link" : "monix\/tail\/Iterant$.html#fromBatch[F[_],A](xs:monix.tail.batches.Batch[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(xs: Iterator[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromIterator", "link" : "monix\/tail\/Iterant$.html#fromIterator[F[_],A](xs:Iterator[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(xs: Iterable[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromIterable", "link" : "monix\/tail\/Iterant$.html#fromIterable[F[_],A](xs:Iterable[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(xs: IndexedSeq[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromIndexedSeq", "link" : "monix\/tail\/Iterant$.html#fromIndexedSeq[F[_],A](xs:IndexedSeq[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromList", "tail" : "(xs: LinearSeq[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromList", "link" : "monix\/tail\/Iterant$.html#fromList[F[_],A](xs:scala.collection.immutable.LinearSeq[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(xs: Seq[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromSeq", "link" : "monix\/tail\/Iterant$.html#fromSeq[F[_],A](xs:Seq[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(xs: Array[A])(F: Applicative[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.fromArray", "link" : "monix\/tail\/Iterant$.html#fromArray[F[_],A](xs:Array[A])(implicitF:cats.Applicative[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Iterant[F, Either[A, B]])(F: Sync[F]): Iterant[F, B]", "member" : "monix.tail.Iterant.tailRecM", "link" : "monix\/tail\/Iterant$.html#tailRecM[F[_],A,B](a:A)(f:A=>monix.tail.Iterant[F,Either[A,B]])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,B]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Iterant[F, A]", "member" : "monix.tail.Iterant.raiseError", "link" : "monix\/tail\/Iterant$.html#raiseError[F[_],A](ex:Throwable):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(rest: F[Iterant[F, A]]): Iterant[F, A]", "member" : "monix.tail.Iterant.suspend", "link" : "monix\/tail\/Iterant$.html#suspend[F[_],A](rest:F[monix.tail.Iterant[F,A]]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.suspend", "link" : "monix\/tail\/Iterant$.html#suspend[F[_],A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Iterant[F, A])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.defer", "link" : "monix\/tail\/Iterant$.html#defer[F[_],A](fa:=>monix.tail.Iterant[F,A])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(fa: F[A])(F: Functor[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.liftF", "link" : "monix\/tail\/Iterant$.html#liftF[F[_],A](fa:F[A])(implicitF:cats.Functor[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "delay", "tail" : "(a: => A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.delay", "link" : "monix\/tail\/Iterant$.html#delay[F[_],A](a:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: => A)(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.eval", "link" : "monix\/tail\/Iterant$.html#eval[F[_],A](a:=>A)(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "lastS", "tail" : "(item: A): Iterant[F, A]", "member" : "monix.tail.Iterant.lastS", "link" : "monix\/tail\/Iterant$.html#lastS[F[_],A](item:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.Iterant.now", "link" : "monix\/tail\/Iterant$.html#now[F[_],A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "resourceCase", "tail" : "(acquire: F[A])(release: (A, ExitCase[Throwable]) => F[Unit])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.resourceCase", "link" : "monix\/tail\/Iterant$.html#resourceCase[F[_],A](acquire:F[A])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "resource", "tail" : "(acquire: F[A])(release: (A) => F[Unit])(F: Sync[F]): Iterant[F, A]", "member" : "monix.tail.Iterant.resource", "link" : "monix\/tail\/Iterant$.html#resource[F[_],A](acquire:F[A])(release:A=>F[Unit])(implicitF:cats.effect.Sync[F]):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Iterant[F, A]", "member" : "monix.tail.Iterant.pure", "link" : "monix\/tail\/Iterant$.html#pure[F[_],A](a:A):monix.tail.Iterant[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Apply[F]", "member" : "monix.tail.Iterant.apply", "link" : "monix\/tail\/Iterant$.html#apply[F[_]]:monix.tail.IterantBuilders.Apply[F]", "kind" : "def"}, {"label" : "Channel", "tail" : "", "member" : "monix.tail.Iterant.Channel", "link" : "monix\/tail\/Iterant$.html#Channel[F[_],A]=monix.catnap.ChannelF[F,Option[Throwable],A]", "kind" : "type"}, {"label" : "Producer", "tail" : "", "member" : "monix.tail.Iterant.Producer", "link" : "monix\/tail\/Iterant$.html#Producer[F[_],A]=monix.catnap.ProducerF[F,Option[Throwable],A]", "kind" : "type"}, {"label" : "Consumer", "tail" : "", "member" : "monix.tail.Iterant.Consumer", "link" : "monix\/tail\/Iterant$.html#Consumer[F[_],A]=monix.catnap.ConsumerF[F,Option[Throwable],A]", "kind" : "type"}, {"label" : "catsSyncInstances", "tail" : "(F: Sync[F]): CatsSyncInstances[F]", "member" : "monix.tail.IterantInstances.catsSyncInstances", "link" : "monix\/tail\/Iterant$.html#catsSyncInstances[F[_]](implicitF:cats.effect.Sync[F]):IterantInstances.this.CatsSyncInstances[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/Iterant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/Iterant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/Iterant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/Iterant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/Iterant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/Iterant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/Iterant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/Iterant$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/Iterant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/Iterant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/Iterant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/Iterant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/Iterant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/Iterant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/Iterant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/Iterant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/Iterant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/Iterant.html", "kind" : "class"}, {"name" : "monix.tail.IterantBuilders", "shortDescription" : "IterantBuilders.Apply is a set of builders for Iterant returnedby Iterant.apply", "object" : "monix\/tail\/IterantBuilders$.html", "members_object" : [{"label" : "Apply", "tail" : "", "member" : "monix.tail.IterantBuilders.Apply", "link" : "monix\/tail\/IterantBuilders$.html#Apply[F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/IterantBuilders$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/IterantBuilders$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/IterantBuilders$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/IterantBuilders$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/IterantBuilders$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/IterantBuilders$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/IterantBuilders$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/IterantBuilders$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/IterantBuilders$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/IterantBuilders$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/IterantBuilders$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/IterantBuilders$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/IterantBuilders$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/IterantBuilders$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/IterantBuilders$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/IterantBuilders$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/IterantBuilders$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.execution.atomic" : [{"name" : "monix.execution.atomic.Atomic", "shortDescription" : "Base trait of all atomic references, no matter the type.", "object" : "monix\/execution\/atomic\/Atomic$.html", "members_class" : [{"label" : "transform", "tail" : "(cb: (A) => A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/Atomic.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/Atomic.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/Atomic.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) => (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/Atomic.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/Atomic.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/Atomic.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/Atomic.html#apply():A", "kind" : "final macro def"}, {"member" : "monix.execution.atomic.Atomic#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/Atomic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/Atomic.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/Atomic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/Atomic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/Atomic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/Atomic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/Atomic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/Atomic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/Atomic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/Atomic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/Atomic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/Atomic.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/Atomic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/Atomic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/Atomic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/Atomic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.lazySet", "link" : "monix\/execution\/atomic\/Atomic.html#lazySet(update:A):Unit", "kind" : "abstract def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.Atomic.getAndSet", "link" : "monix\/execution\/atomic\/Atomic.html#getAndSet(update:A):A", "kind" : "abstract def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.Atomic.compareAndSet", "link" : "monix\/execution\/atomic\/Atomic.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "abstract def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.set", "link" : "monix\/execution\/atomic\/Atomic.html#set(update:A):Unit", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.get", "link" : "monix\/execution\/atomic\/Atomic.html#get():A", "kind" : "abstract def"}], "members_object" : [{"label" : "Macros", "tail" : "", "member" : "monix.execution.atomic.Atomic.Macros", "link" : "monix\/execution\/atomic\/Atomic$.html#MacrosextendsHygieneUtilMacroswithInlineMacros", "kind" : "class"}, {"label" : "builderFor", "tail" : "(initialValue: A)(builder: AtomicBuilder[A, R]): AtomicBuilder[A, R]", "member" : "monix.execution.atomic.Atomic.builderFor", "link" : "monix\/execution\/atomic\/Atomic$.html#builderFor[A,R<:monix.execution.atomic.Atomic[A]](initialValue:A)(implicitbuilder:monix.execution.atomic.AtomicBuilder[A,R]):monix.execution.atomic.AtomicBuilder[A,R]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: A, padding: PaddingStrategy)(builder: AtomicBuilder[A, R]): R", "member" : "monix.execution.atomic.Atomic.withPadding", "link" : "monix\/execution\/atomic\/Atomic$.html#withPadding[A,R<:monix.execution.atomic.Atomic[A]](initialValue:A,padding:monix.execution.atomic.PaddingStrategy)(implicitbuilder:monix.execution.atomic.AtomicBuilder[A,R]):R", "kind" : "macro def"}, {"label" : "apply", "tail" : "(initialValue: A)(builder: AtomicBuilder[A, R]): R", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/Atomic$.html#apply[A,R<:monix.execution.atomic.Atomic[A]](initialValue:A)(implicitbuilder:monix.execution.atomic.AtomicBuilder[A,R]):R", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/Atomic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/Atomic$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/Atomic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/Atomic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/Atomic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/Atomic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/Atomic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/Atomic$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/Atomic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/Atomic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/Atomic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/Atomic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/Atomic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/Atomic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/Atomic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/Atomic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/Atomic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/Atomic.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicAny", "shortDescription" : "Atomic references wrapping AnyRef values.", "object" : "monix\/execution\/atomic\/AtomicAny$.html", "members_class" : [{"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicAny.lazySet", "link" : "monix\/execution\/atomic\/AtomicAny.html#lazySet(update:A):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.AtomicAny.getAndSet", "link" : "monix\/execution\/atomic\/AtomicAny.html#getAndSet(update:A):A", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.AtomicAny.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicAny.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicAny.set", "link" : "monix\/execution\/atomic\/AtomicAny.html#set(update:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.AtomicAny.get", "link" : "monix\/execution\/atomic\/AtomicAny.html#get():A", "kind" : "def"}, {"label" : "transform", "tail" : "(cb: (A) => A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicAny.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicAny.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicAny.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) => (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicAny.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicAny.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicAny.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicAny.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicAny.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicAny.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicAny.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicAny.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicAny.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicAny.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicAny.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicAny.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicAny.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicAny.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicAny.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicAny.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicAny.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicAny.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: A, padding: PaddingStrategy): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.safe", "link" : "monix\/execution\/atomic\/AtomicAny$.html#safe[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: A, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.create", "link" : "monix\/execution\/atomic\/AtomicAny$.html#create[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: A, padding: PaddingStrategy): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.withPadding", "link" : "monix\/execution\/atomic\/AtomicAny$.html#withPadding[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: A): AtomicAny[A]", "member" : "monix.execution.atomic.AtomicAny.apply", "link" : "monix\/execution\/atomic\/AtomicAny$.html#apply[A<:AnyRef](initialValue:A):monix.execution.atomic.AtomicAny[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicAny$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicAny$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicAny$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicAny$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicAny$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicAny$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicAny$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicAny$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicAny$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicAny$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicAny$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicAny$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicAny$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicAny$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicAny$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicAny$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicAny.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicBoolean", "shortDescription" : "Atomic references wrapping Boolean values.", "object" : "monix\/execution\/atomic\/AtomicBoolean$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.atomic.AtomicBoolean.toString", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#toString():String", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Boolean): Unit", "member" : "monix.execution.atomic.AtomicBoolean.lazySet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#lazySet(update:Boolean):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Boolean): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.getAndSet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#getAndSet(update:Boolean):Boolean", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Boolean, update: Boolean): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#compareAndSet(expect:Boolean,update:Boolean):Boolean", "kind" : "def"}, {"label" : "flip", "tail" : "(update: Boolean): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.flip", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#flip(update:Boolean):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: Boolean): Unit", "member" : "monix.execution.atomic.AtomicBoolean.set", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#set(update:Boolean):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Boolean", "member" : "monix.execution.atomic.AtomicBoolean.get", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#get():Boolean", "kind" : "def"}, {"label" : "transform", "tail" : "(cb: (Boolean) => Boolean): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Boolean) => Boolean): Boolean", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Boolean) => Boolean): Boolean", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Boolean) => (U, Boolean)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Boolean): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Boolean): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Boolean", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBoolean.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Boolean, padding: PaddingStrategy): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.safe", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#safe(initialValue:Boolean,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Boolean, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.create", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#create(initialValue:Boolean,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Boolean, padding: PaddingStrategy): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.withPadding", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#withPadding(initialValue:Boolean,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Boolean): AtomicBoolean", "member" : "monix.execution.atomic.AtomicBoolean.apply", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#apply(initialValue:Boolean):monix.execution.atomic.AtomicBoolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBoolean$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicBoolean.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicBuilder", "object" : "monix\/execution\/atomic\/AtomicBuilder$.html", "members_object" : [{"label" : "AtomicDoubleBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicDoubleBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicDoubleBuilder", "kind" : "implicit object"}, {"label" : "AtomicFloatBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicFloatBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicFloatBuilder", "kind" : "implicit object"}, {"label" : "AtomicShortBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicShortBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicShortBuilder", "kind" : "implicit object"}, {"label" : "AtomicCharBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicCharBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicCharBuilder", "kind" : "implicit object"}, {"label" : "AtomicByteBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicByteBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicByteBuilder", "kind" : "implicit object"}, {"label" : "AtomicBooleanBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicBooleanBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicBooleanBuilder", "kind" : "implicit object"}, {"label" : "AtomicLongBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicLongBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicLongBuilder", "kind" : "implicit object"}, {"label" : "AtomicIntBuilder", "tail" : "", "member" : "monix.execution.atomic.AtomicBuilder.AtomicIntBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicIntBuilder", "kind" : "implicit object"}, {"label" : "AtomicNumberBuilder", "tail" : "(arg0: Numeric[A]): AtomicBuilder[A, AtomicNumberAny[A]]", "member" : "monix.execution.atomic.Implicits.Level2.AtomicNumberBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicNumberBuilder[A<:AnyRef](implicitevidence$1:Numeric[A]):monix.execution.atomic.AtomicBuilder[A,monix.execution.atomic.AtomicNumberAny[A]]", "kind" : "implicit def"}, {"label" : "AtomicRefBuilder", "tail" : "(): AtomicBuilder[A, AtomicAny[A]]", "member" : "monix.execution.atomic.Implicits.Level1.AtomicRefBuilder", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#AtomicRefBuilder[A<:AnyRef]:monix.execution.atomic.AtomicBuilder[A,monix.execution.atomic.AtomicAny[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/atomic\/AtomicBuilder.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicBuilder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "buildSafeInstance", "tail" : "(initialValue: A, padding: PaddingStrategy): R", "member" : "monix.execution.atomic.AtomicBuilder.buildSafeInstance", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#buildSafeInstance(initialValue:A,padding:monix.execution.atomic.PaddingStrategy):R", "kind" : "abstract def"}, {"label" : "buildInstance", "tail" : "(initialValue: A, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): R", "member" : "monix.execution.atomic.AtomicBuilder.buildInstance", "link" : "monix\/execution\/atomic\/AtomicBuilder.html#buildInstance(initialValue:A,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):R", "kind" : "abstract def"}], "shortDescription" : "For a given A indicates the most specific Atomic[A]reference type to use."}, {"name" : "monix.execution.atomic.AtomicByte", "shortDescription" : "Atomic references wrapping Byte values.", "object" : "monix\/execution\/atomic\/AtomicByte$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndDecrement(v:Int):Byte", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#decrementAndGet(v:Int):Byte", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicByte.decrement", "link" : "monix\/execution\/atomic\/AtomicByte.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndSubtract(v:Byte):Byte", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#subtractAndGet(v:Byte):Byte", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.subtract", "link" : "monix\/execution\/atomic\/AtomicByte.html#subtract(v:Byte):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndAdd(v:Byte):Byte", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndIncrement(v:Int):Byte", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.addAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#addAndGet(v:Byte):Byte", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Byte", "member" : "monix.execution.atomic.AtomicByte.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#incrementAndGet(v:Int):Byte", "kind" : "def"}, {"label" : "add", "tail" : "(v: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.add", "link" : "monix\/execution\/atomic\/AtomicByte.html#add(v:Byte):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicByte.increment", "link" : "monix\/execution\/atomic\/AtomicByte.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Byte): Byte", "member" : "monix.execution.atomic.AtomicByte.getAndSet", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndSet(update:Byte):Byte", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Byte, update: Byte): Boolean", "member" : "monix.execution.atomic.AtomicByte.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicByte.html#compareAndSet(expect:Byte,update:Byte):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.lazySet", "link" : "monix\/execution\/atomic\/AtomicByte.html#lazySet(update:Byte):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Byte): Unit", "member" : "monix.execution.atomic.AtomicByte.set", "link" : "monix\/execution\/atomic\/AtomicByte.html#set(update:Byte):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Byte", "member" : "monix.execution.atomic.AtomicByte.get", "link" : "monix\/execution\/atomic\/AtomicByte.html#get():Byte", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicByte.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicByte.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Byte) => Byte): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicByte.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Byte) => Byte): Byte", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicByte.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Byte) => Byte): Byte", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicByte.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Byte) => (U, Byte)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicByte.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicByte.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Byte): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicByte.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Byte", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicByte.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicByte.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicByte.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicByte.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicByte.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicByte.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicByte.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicByte.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicByte.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicByte.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicByte.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicByte.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicByte.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicByte.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicByte.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Byte, padding: PaddingStrategy): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.safe", "link" : "monix\/execution\/atomic\/AtomicByte$.html#safe(initialValue:Byte,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Byte, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.create", "link" : "monix\/execution\/atomic\/AtomicByte$.html#create(initialValue:Byte,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Byte, padding: PaddingStrategy): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.withPadding", "link" : "monix\/execution\/atomic\/AtomicByte$.html#withPadding(initialValue:Byte,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Byte): AtomicByte", "member" : "monix.execution.atomic.AtomicByte.apply", "link" : "monix\/execution\/atomic\/AtomicByte$.html#apply(initialValue:Byte):monix.execution.atomic.AtomicByte", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicByte$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicByte$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicByte$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicByte$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicByte$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicByte$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicByte$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicByte$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicByte$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicByte$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicByte$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicByte$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicByte$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicByte$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicByte$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicByte$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicByte.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicChar", "shortDescription" : "Atomic references wrapping Char values.", "object" : "monix\/execution\/atomic\/AtomicChar$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndDecrement(v:Int):Char", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#decrementAndGet(v:Int):Char", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicChar.decrement", "link" : "monix\/execution\/atomic\/AtomicChar.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndSubtract(v:Char):Char", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#subtractAndGet(v:Char):Char", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.subtract", "link" : "monix\/execution\/atomic\/AtomicChar.html#subtract(v:Char):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndAdd(v:Char):Char", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndIncrement(v:Int):Char", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Char): Char", "member" : "monix.execution.atomic.AtomicChar.addAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#addAndGet(v:Char):Char", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Char", "member" : "monix.execution.atomic.AtomicChar.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#incrementAndGet(v:Int):Char", "kind" : "def"}, {"label" : "add", "tail" : "(v: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.add", "link" : "monix\/execution\/atomic\/AtomicChar.html#add(v:Char):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicChar.increment", "link" : "monix\/execution\/atomic\/AtomicChar.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Char): Char", "member" : "monix.execution.atomic.AtomicChar.getAndSet", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndSet(update:Char):Char", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Char, update: Char): Boolean", "member" : "monix.execution.atomic.AtomicChar.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicChar.html#compareAndSet(expect:Char,update:Char):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.lazySet", "link" : "monix\/execution\/atomic\/AtomicChar.html#lazySet(update:Char):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Char): Unit", "member" : "monix.execution.atomic.AtomicChar.set", "link" : "monix\/execution\/atomic\/AtomicChar.html#set(update:Char):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Char", "member" : "monix.execution.atomic.AtomicChar.get", "link" : "monix\/execution\/atomic\/AtomicChar.html#get():Char", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicChar.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicChar.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Char) => Char): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicChar.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Char) => Char): Char", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicChar.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Char) => Char): Char", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicChar.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Char) => (U, Char)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicChar.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicChar.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Char): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicChar.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Char", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicChar.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicChar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicChar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicChar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicChar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicChar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicChar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicChar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicChar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicChar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicChar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicChar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicChar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicChar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicChar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Char, padding: PaddingStrategy): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.safe", "link" : "monix\/execution\/atomic\/AtomicChar$.html#safe(initialValue:Char,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Char, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.create", "link" : "monix\/execution\/atomic\/AtomicChar$.html#create(initialValue:Char,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Char, padding: PaddingStrategy): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.withPadding", "link" : "monix\/execution\/atomic\/AtomicChar$.html#withPadding(initialValue:Char,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Char): AtomicChar", "member" : "monix.execution.atomic.AtomicChar.apply", "link" : "monix\/execution\/atomic\/AtomicChar$.html#apply(initialValue:Char):monix.execution.atomic.AtomicChar", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicChar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicChar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicChar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicChar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicChar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicChar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicChar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicChar$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicChar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicChar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicChar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicChar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicChar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicChar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicChar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicChar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicChar.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicDouble", "shortDescription" : "Atomic references wrapping Double values.", "object" : "monix\/execution\/atomic\/AtomicDouble$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndDecrement(v:Int):Double", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#decrementAndGet(v:Int):Double", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicDouble.decrement", "link" : "monix\/execution\/atomic\/AtomicDouble.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndSubtract(v:Double):Double", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#subtractAndGet(v:Double):Double", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.subtract", "link" : "monix\/execution\/atomic\/AtomicDouble.html#subtract(v:Double):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndAdd(v:Double):Double", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndIncrement(v:Int):Double", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.addAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#addAndGet(v:Double):Double", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Double", "member" : "monix.execution.atomic.AtomicDouble.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#incrementAndGet(v:Int):Double", "kind" : "def"}, {"label" : "add", "tail" : "(v: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.add", "link" : "monix\/execution\/atomic\/AtomicDouble.html#add(v:Double):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicDouble.increment", "link" : "monix\/execution\/atomic\/AtomicDouble.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Double): Double", "member" : "monix.execution.atomic.AtomicDouble.getAndSet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndSet(update:Double):Double", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Double, update: Double): Boolean", "member" : "monix.execution.atomic.AtomicDouble.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#compareAndSet(expect:Double,update:Double):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.lazySet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#lazySet(update:Double):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Double): Unit", "member" : "monix.execution.atomic.AtomicDouble.set", "link" : "monix\/execution\/atomic\/AtomicDouble.html#set(update:Double):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Double", "member" : "monix.execution.atomic.AtomicDouble.get", "link" : "monix\/execution\/atomic\/AtomicDouble.html#get():Double", "kind" : "def"}, {"label" : "ref", "tail" : ": BoxedLong", "member" : "monix.execution.atomic.AtomicDouble.ref", "link" : "monix\/execution\/atomic\/AtomicDouble.html#ref:monix.execution.internal.atomic.BoxedLong", "kind" : "val"}, {"label" : "+=", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Double) => Double): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicDouble.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Double) => Double): Double", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Double) => Double): Double", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicDouble.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Double) => (U, Double)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicDouble.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Double): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicDouble.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Double", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicDouble.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicDouble.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicDouble.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicDouble.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicDouble.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicDouble.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicDouble.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicDouble.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicDouble.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicDouble.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicDouble.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicDouble.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicDouble.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicDouble.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicDouble.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Double, padding: PaddingStrategy): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.safe", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#safe(initialValue:Double,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Double, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.create", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#create(initialValue:Double,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Double, padding: PaddingStrategy): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.withPadding", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#withPadding(initialValue:Double,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Double): AtomicDouble", "member" : "monix.execution.atomic.AtomicDouble.apply", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#apply(initialValue:Double):monix.execution.atomic.AtomicDouble", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicDouble$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicDouble$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicDouble.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicFloat", "shortDescription" : "Atomic references wrapping Float values.", "object" : "monix\/execution\/atomic\/AtomicFloat$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndDecrement(v:Int):Float", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#decrementAndGet(v:Int):Float", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicFloat.decrement", "link" : "monix\/execution\/atomic\/AtomicFloat.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndSubtract(v:Float):Float", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#subtractAndGet(v:Float):Float", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.subtract", "link" : "monix\/execution\/atomic\/AtomicFloat.html#subtract(v:Float):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndAdd(v:Float):Float", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndIncrement(v:Int):Float", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.addAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#addAndGet(v:Float):Float", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Float", "member" : "monix.execution.atomic.AtomicFloat.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#incrementAndGet(v:Int):Float", "kind" : "def"}, {"label" : "add", "tail" : "(v: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.add", "link" : "monix\/execution\/atomic\/AtomicFloat.html#add(v:Float):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicFloat.increment", "link" : "monix\/execution\/atomic\/AtomicFloat.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Float): Float", "member" : "monix.execution.atomic.AtomicFloat.getAndSet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndSet(update:Float):Float", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Float, update: Float): Boolean", "member" : "monix.execution.atomic.AtomicFloat.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#compareAndSet(expect:Float,update:Float):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.lazySet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#lazySet(update:Float):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Float): Unit", "member" : "monix.execution.atomic.AtomicFloat.set", "link" : "monix\/execution\/atomic\/AtomicFloat.html#set(update:Float):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Float", "member" : "monix.execution.atomic.AtomicFloat.get", "link" : "monix\/execution\/atomic\/AtomicFloat.html#get():Float", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Float) => Float): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicFloat.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Float) => Float): Float", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Float) => Float): Float", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicFloat.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Float) => (U, Float)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicFloat.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Float): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicFloat.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Float", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicFloat.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicFloat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicFloat.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicFloat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicFloat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicFloat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicFloat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicFloat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicFloat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicFloat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicFloat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicFloat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicFloat.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicFloat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicFloat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Float, padding: PaddingStrategy): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.safe", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#safe(initialValue:Float,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Float, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.create", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#create(initialValue:Float,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Float, padding: PaddingStrategy): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.withPadding", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#withPadding(initialValue:Float,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Float): AtomicFloat", "member" : "monix.execution.atomic.AtomicFloat.apply", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#apply(initialValue:Float):monix.execution.atomic.AtomicFloat", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicFloat$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicFloat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicFloat.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicInt", "shortDescription" : "Atomic references wrapping Int values.", "object" : "monix\/execution\/atomic\/AtomicInt$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.atomic.AtomicInt.toString", "link" : "monix\/execution\/atomic\/AtomicInt.html#toString():String", "kind" : "def"}, {"label" : "getAndDecrement", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndDecrement(v:Int):Int", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#decrementAndGet(v:Int):Int", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.decrement", "link" : "monix\/execution\/atomic\/AtomicInt.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#subtractAndGet(v:Int):Int", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndSubtract(v:Int):Int", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.subtract", "link" : "monix\/execution\/atomic\/AtomicInt.html#subtract(v:Int):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.add", "link" : "monix\/execution\/atomic\/AtomicInt.html#add(v:Int):Unit", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.addAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#addAndGet(v:Int):Int", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndAdd(v:Int):Int", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndIncrement(v:Int):Int", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Int", "member" : "monix.execution.atomic.AtomicInt.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#incrementAndGet(v:Int):Int", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.increment", "link" : "monix\/execution\/atomic\/AtomicInt.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.lazySet", "link" : "monix\/execution\/atomic\/AtomicInt.html#lazySet(update:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Int): Int", "member" : "monix.execution.atomic.AtomicInt.getAndSet", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndSet(update:Int):Int", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Int, update: Int): Boolean", "member" : "monix.execution.atomic.AtomicInt.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicInt.html#compareAndSet(expect:Int,update:Int):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: Int): Unit", "member" : "monix.execution.atomic.AtomicInt.set", "link" : "monix\/execution\/atomic\/AtomicInt.html#set(update:Int):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Int", "member" : "monix.execution.atomic.AtomicInt.get", "link" : "monix\/execution\/atomic\/AtomicInt.html#get():Int", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicInt.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicInt.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Int) => Int): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicInt.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Int) => Int): Int", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicInt.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Int) => Int): Int", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicInt.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Int) => (U, Int)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicInt.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicInt.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Int): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicInt.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Int", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicInt.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicInt.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicInt.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicInt.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicInt.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicInt.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicInt.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicInt.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicInt.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicInt.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicInt.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicInt.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicInt.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicInt.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Int, padding: PaddingStrategy): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.safe", "link" : "monix\/execution\/atomic\/AtomicInt$.html#safe(initialValue:Int,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Int, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.create", "link" : "monix\/execution\/atomic\/AtomicInt$.html#create(initialValue:Int,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Int, padding: PaddingStrategy): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.withPadding", "link" : "monix\/execution\/atomic\/AtomicInt$.html#withPadding(initialValue:Int,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Int): AtomicInt", "member" : "monix.execution.atomic.AtomicInt.apply", "link" : "monix\/execution\/atomic\/AtomicInt$.html#apply(initialValue:Int):monix.execution.atomic.AtomicInt", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicInt$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicInt$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicInt$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicInt$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicInt.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicLong", "shortDescription" : "Atomic references wrapping Long values.", "object" : "monix\/execution\/atomic\/AtomicLong$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.atomic.AtomicLong.toString", "link" : "monix\/execution\/atomic\/AtomicLong.html#toString():String", "kind" : "def"}, {"label" : "getAndDecrement", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndDecrement(v:Int):Long", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#decrementAndGet(v:Int):Long", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicLong.decrement", "link" : "monix\/execution\/atomic\/AtomicLong.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#subtractAndGet(v:Long):Long", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndSubtract(v:Long):Long", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.subtract", "link" : "monix\/execution\/atomic\/AtomicLong.html#subtract(v:Long):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.add", "link" : "monix\/execution\/atomic\/AtomicLong.html#add(v:Long):Unit", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.addAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#addAndGet(v:Long):Long", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Long): Long", "member" : "monix.execution.atomic.AtomicLong.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndAdd(v:Long):Long", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndIncrement(v:Int):Long", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Long", "member" : "monix.execution.atomic.AtomicLong.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#incrementAndGet(v:Int):Long", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicLong.increment", "link" : "monix\/execution\/atomic\/AtomicLong.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.lazySet", "link" : "monix\/execution\/atomic\/AtomicLong.html#lazySet(update:Long):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Long): Long", "member" : "monix.execution.atomic.AtomicLong.getAndSet", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndSet(update:Long):Long", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Long, update: Long): Boolean", "member" : "monix.execution.atomic.AtomicLong.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicLong.html#compareAndSet(expect:Long,update:Long):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: Long): Unit", "member" : "monix.execution.atomic.AtomicLong.set", "link" : "monix\/execution\/atomic\/AtomicLong.html#set(update:Long):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Long", "member" : "monix.execution.atomic.AtomicLong.get", "link" : "monix\/execution\/atomic\/AtomicLong.html#get():Long", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicLong.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicLong.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Long) => Long): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicLong.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Long) => Long): Long", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicLong.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Long) => Long): Long", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicLong.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Long) => (U, Long)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicLong.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicLong.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Long): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicLong.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Long", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicLong.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicLong.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicLong.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicLong.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicLong.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicLong.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicLong.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicLong.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicLong.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicLong.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicLong.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicLong.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicLong.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicLong.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Long, padding: PaddingStrategy): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.safe", "link" : "monix\/execution\/atomic\/AtomicLong$.html#safe(initialValue:Long,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Long, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.create", "link" : "monix\/execution\/atomic\/AtomicLong$.html#create(initialValue:Long,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Long, padding: PaddingStrategy): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.withPadding", "link" : "monix\/execution\/atomic\/AtomicLong$.html#withPadding(initialValue:Long,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Long): AtomicLong", "member" : "monix.execution.atomic.AtomicLong.apply", "link" : "monix\/execution\/atomic\/AtomicLong$.html#apply(initialValue:Long):monix.execution.atomic.AtomicLong", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicLong$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicLong$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicLong$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicLong$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicLong$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicLong$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicLong$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicLong$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicLong$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicLong$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicLong$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicLong$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicLong$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicLong$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicLong$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicLong$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicLong.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicNumber", "shortDescription" : "Represents an Atomic reference holding a number, providing helpersfor easily incrementing and decrementing it.", "members_class" : [{"label" : "+=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#-=(value:A):Unit", "kind" : "final macro def"}, {"member" : "monix.execution.atomic.AtomicNumber#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : "(cb: (A) => A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicNumber.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) => (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicNumber.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicNumber.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicNumber.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicNumber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicNumber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicNumber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicNumber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicNumber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicNumber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicNumber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumber.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicNumber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicNumber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicNumber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicNumber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicNumber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicNumber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getAndSubtract", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndSubtract(v:A):A", "kind" : "abstract def"}, {"label" : "getAndDecrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndDecrement(v:Int):A", "kind" : "abstract def"}, {"label" : "getAndAdd", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndAdd(v:A):A", "kind" : "abstract def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndIncrement(v:Int):A", "kind" : "abstract def"}, {"label" : "subtractAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#subtractAndGet(v:A):A", "kind" : "abstract def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#decrementAndGet(v:Int):A", "kind" : "abstract def"}, {"label" : "addAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumber.addAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#addAndGet(v:A):A", "kind" : "abstract def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumber.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#incrementAndGet(v:Int):A", "kind" : "abstract def"}, {"label" : "subtract", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.subtract", "link" : "monix\/execution\/atomic\/AtomicNumber.html#subtract(v:A):Unit", "kind" : "abstract def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.decrement", "link" : "monix\/execution\/atomic\/AtomicNumber.html#decrement(v:Int):Unit", "kind" : "abstract def"}, {"label" : "add", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.add", "link" : "monix\/execution\/atomic\/AtomicNumber.html#add(v:A):Unit", "kind" : "abstract def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumber.increment", "link" : "monix\/execution\/atomic\/AtomicNumber.html#increment(v:Int):Unit", "kind" : "abstract def"}, {"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.lazySet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#lazySet(update:A):Unit", "kind" : "abstract def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.Atomic.getAndSet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#getAndSet(update:A):A", "kind" : "abstract def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.Atomic.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicNumber.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "abstract def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.Atomic.set", "link" : "monix\/execution\/atomic\/AtomicNumber.html#set(update:A):Unit", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.get", "link" : "monix\/execution\/atomic\/AtomicNumber.html#get():A", "kind" : "abstract def"}], "class" : "monix\/execution\/atomic\/AtomicNumber.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicNumberAny", "shortDescription" : "Atomic references wrapping any values implementingScala's Numeric type class.", "object" : "monix\/execution\/atomic\/AtomicNumberAny$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndDecrement(v:Int):A", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#decrementAndGet(v:Int):A", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.decrement", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#subtractAndGet(v:A):A", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndSubtract(v:A):A", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.subtract", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#subtract(v:A):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.add", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#add(v:A):Unit", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.addAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#addAndGet(v:A):A", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndAdd(v:A):A", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndIncrement(v:Int):A", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): A", "member" : "monix.execution.atomic.AtomicNumberAny.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#incrementAndGet(v:Int):A", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.increment", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.lazySet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#lazySet(update:A):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: A): A", "member" : "monix.execution.atomic.AtomicNumberAny.getAndSet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndSet(update:A):A", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: A, update: A): Boolean", "member" : "monix.execution.atomic.AtomicNumberAny.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#compareAndSet(expect:A,update:A):Boolean", "kind" : "def"}, {"label" : "set", "tail" : "(update: A): Unit", "member" : "monix.execution.atomic.AtomicNumberAny.set", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#set(update:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.atomic.AtomicNumberAny.get", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#get():A", "kind" : "def"}, {"label" : "+=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (A) => A): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (A) => A): A", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (A) => (U, A)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: A, padding: PaddingStrategy)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.safe", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#safe[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy)(implicitevidence$5:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: A, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.create", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#create[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean)(implicitevidence$4:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: A, padding: PaddingStrategy)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.withPadding", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#withPadding[A<:AnyRef](initialValue:A,padding:monix.execution.atomic.PaddingStrategy)(implicitevidence$3:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: A)(arg0: Numeric[A]): AtomicNumberAny[A]", "member" : "monix.execution.atomic.AtomicNumberAny.apply", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#apply[A<:AnyRef](initialValue:A)(implicitevidence$2:Numeric[A]):monix.execution.atomic.AtomicNumberAny[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicNumberAny$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicNumberAny.html", "kind" : "class"}, {"name" : "monix.execution.atomic.AtomicShort", "shortDescription" : "Atomic references wrapping Short values.", "object" : "monix\/execution\/atomic\/AtomicShort$.html", "members_class" : [{"label" : "getAndDecrement", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.getAndDecrement", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndDecrement(v:Int):Short", "kind" : "def"}, {"label" : "decrementAndGet", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.decrementAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#decrementAndGet(v:Int):Short", "kind" : "def"}, {"label" : "decrement", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicShort.decrement", "link" : "monix\/execution\/atomic\/AtomicShort.html#decrement(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSubtract", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.getAndSubtract", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndSubtract(v:Short):Short", "kind" : "def"}, {"label" : "subtractAndGet", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.subtractAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#subtractAndGet(v:Short):Short", "kind" : "def"}, {"label" : "subtract", "tail" : "(v: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.subtract", "link" : "monix\/execution\/atomic\/AtomicShort.html#subtract(v:Short):Unit", "kind" : "def"}, {"label" : "getAndAdd", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.getAndAdd", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndAdd(v:Short):Short", "kind" : "def"}, {"label" : "getAndIncrement", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.getAndIncrement", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndIncrement(v:Int):Short", "kind" : "def"}, {"label" : "addAndGet", "tail" : "(v: Short): Short", "member" : "monix.execution.atomic.AtomicShort.addAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#addAndGet(v:Short):Short", "kind" : "def"}, {"label" : "incrementAndGet", "tail" : "(v: Int): Short", "member" : "monix.execution.atomic.AtomicShort.incrementAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#incrementAndGet(v:Int):Short", "kind" : "def"}, {"label" : "add", "tail" : "(v: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.add", "link" : "monix\/execution\/atomic\/AtomicShort.html#add(v:Short):Unit", "kind" : "def"}, {"label" : "increment", "tail" : "(v: Int): Unit", "member" : "monix.execution.atomic.AtomicShort.increment", "link" : "monix\/execution\/atomic\/AtomicShort.html#increment(v:Int):Unit", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(update: Short): Short", "member" : "monix.execution.atomic.AtomicShort.getAndSet", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndSet(update:Short):Short", "kind" : "def"}, {"label" : "compareAndSet", "tail" : "(expect: Short, update: Short): Boolean", "member" : "monix.execution.atomic.AtomicShort.compareAndSet", "link" : "monix\/execution\/atomic\/AtomicShort.html#compareAndSet(expect:Short,update:Short):Boolean", "kind" : "def"}, {"label" : "lazySet", "tail" : "(update: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.lazySet", "link" : "monix\/execution\/atomic\/AtomicShort.html#lazySet(update:Short):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(update: Short): Unit", "member" : "monix.execution.atomic.AtomicShort.set", "link" : "monix\/execution\/atomic\/AtomicShort.html#set(update:Short):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): Short", "member" : "monix.execution.atomic.AtomicShort.get", "link" : "monix\/execution\/atomic\/AtomicShort.html#get():Short", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.AtomicNumber.+=", "link" : "monix\/execution\/atomic\/AtomicShort.html#+=(value:A):Unit", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.AtomicNumber.-=", "link" : "monix\/execution\/atomic\/AtomicShort.html#-=(value:A):Unit", "kind" : "final macro def"}, {"label" : "transform", "tail" : "(cb: (Short) => Short): Unit", "member" : "monix.execution.atomic.Atomic.transform", "link" : "monix\/execution\/atomic\/AtomicShort.html#transform(cb:A=>A):Unit", "kind" : "final macro def"}, {"label" : "getAndTransform", "tail" : "(cb: (Short) => Short): Short", "member" : "monix.execution.atomic.Atomic.getAndTransform", "link" : "monix\/execution\/atomic\/AtomicShort.html#getAndTransform(cb:A=>A):A", "kind" : "final macro def"}, {"label" : "transformAndGet", "tail" : "(cb: (Short) => Short): Short", "member" : "monix.execution.atomic.Atomic.transformAndGet", "link" : "monix\/execution\/atomic\/AtomicShort.html#transformAndGet(cb:A=>A):A", "kind" : "macro def"}, {"label" : "transformAndExtract", "tail" : "(cb: (Short) => (U, Short)): U", "member" : "monix.execution.atomic.Atomic.transformAndExtract", "link" : "monix\/execution\/atomic\/AtomicShort.html#transformAndExtract[U](cb:A=>(U,A)):U", "kind" : "macro def"}, {"label" : ":=", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.Atomic.:=", "link" : "monix\/execution\/atomic\/AtomicShort.html#:=(value:A):Unit", "kind" : "final macro def"}, {"label" : "update", "tail" : "(value: Short): Unit", "member" : "monix.execution.atomic.Atomic.update", "link" : "monix\/execution\/atomic\/AtomicShort.html#update(value:A):Unit", "kind" : "final macro def"}, {"label" : "apply", "tail" : "(): Short", "member" : "monix.execution.atomic.Atomic.apply", "link" : "monix\/execution\/atomic\/AtomicShort.html#apply():A", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicShort.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicShort.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicShort.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicShort.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicShort.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicShort.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicShort.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicShort.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicShort.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicShort.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicShort.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicShort.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicShort.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicShort.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "safe", "tail" : "(initialValue: Short, padding: PaddingStrategy): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.safe", "link" : "monix\/execution\/atomic\/AtomicShort$.html#safe(initialValue:Short,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "create", "tail" : "(initialValue: Short, padding: PaddingStrategy, allowPlatformIntrinsics: Boolean): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.create", "link" : "monix\/execution\/atomic\/AtomicShort$.html#create(initialValue:Short,padding:monix.execution.atomic.PaddingStrategy,allowPlatformIntrinsics:Boolean):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initialValue: Short, padding: PaddingStrategy): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.withPadding", "link" : "monix\/execution\/atomic\/AtomicShort$.html#withPadding(initialValue:Short,padding:monix.execution.atomic.PaddingStrategy):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "apply", "tail" : "(initialValue: Short): AtomicShort", "member" : "monix.execution.atomic.AtomicShort.apply", "link" : "monix\/execution\/atomic\/AtomicShort$.html#apply(initialValue:Short):monix.execution.atomic.AtomicShort", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/AtomicShort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/AtomicShort$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/AtomicShort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/AtomicShort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/AtomicShort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/AtomicShort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/AtomicShort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/AtomicShort$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/AtomicShort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/AtomicShort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/AtomicShort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/AtomicShort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/AtomicShort$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/AtomicShort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/AtomicShort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/AtomicShort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/AtomicShort.html", "kind" : "class"}, {"name" : "monix.execution.atomic.PaddingStrategy", "shortDescription" : "For applying padding to atomic references, in order to reducecache contention.", "object" : "monix\/execution\/atomic\/PaddingStrategy$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/PaddingStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "LeftRight256", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.LeftRight256", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#LeftRight256", "kind" : "case object"}, {"label" : "Right128", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Right128", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Right128", "kind" : "case object"}, {"label" : "Left128", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Left128", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Left128", "kind" : "case object"}, {"label" : "LeftRight128", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.LeftRight128", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#LeftRight128", "kind" : "case object"}, {"label" : "Right64", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Right64", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Right64", "kind" : "case object"}, {"label" : "Left64", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.Left64", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#Left64", "kind" : "case object"}, {"label" : "NoPadding", "tail" : "", "member" : "monix.execution.atomic.PaddingStrategy.NoPadding", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#NoPadding", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/atomic\/PaddingStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/atomic\/PaddingStrategy.html", "kind" : "class"}], "monix.reactive.compression" : [{"name" : "monix.reactive.compression.CompressionException", "shortDescription" : "Signals that exception occurred in compression\/decompression", "object" : "monix\/reactive\/compression\/CompressionException$.html", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/reactive\/compression\/CompressionException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/reactive\/compression\/CompressionException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/reactive\/compression\/CompressionException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/reactive\/compression\/CompressionException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/reactive\/compression\/CompressionException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/reactive\/compression\/CompressionException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/reactive\/compression\/CompressionException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/reactive\/compression\/CompressionException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/reactive\/compression\/CompressionException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/reactive\/compression\/CompressionException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/reactive\/compression\/CompressionException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/reactive\/compression\/CompressionException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/reactive\/compression\/CompressionException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/CompressionException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/CompressionException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(cause: Exception): CompressionException", "member" : "monix.reactive.compression.CompressionException.apply", "link" : "monix\/reactive\/compression\/CompressionException$.html#apply(cause:Exception):monix.reactive.compression.CompressionException", "kind" : "def"}, {"label" : "apply", "tail" : "(message: String, cause: Option[Exception]): CompressionException", "member" : "monix.reactive.compression.CompressionException.apply", "link" : "monix\/reactive\/compression\/CompressionException$.html#apply(message:String,cause:Option[Exception]):monix.reactive.compression.CompressionException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/CompressionException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/CompressionException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/CompressionException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/compression\/CompressionException.html", "kind" : "class"}, {"name" : "monix.reactive.compression.CompressionLevel", "shortDescription" : "", "object" : "monix\/reactive\/compression\/CompressionLevel$.html", "members_class" : [{"label" : "value", "tail" : ": Int", "member" : "monix.reactive.compression.CompressionLevel.value", "link" : "monix\/reactive\/compression\/CompressionLevel.html#value:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionLevel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionLevel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionLevel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionLevel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionLevel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionLevel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionLevel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionLevel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionLevel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionLevel.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionLevel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionLevel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/CompressionLevel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionLevel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/CompressionLevel.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/CompressionLevel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionLevel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionLevel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionLevel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "BestCompression", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.BestCompression", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#BestCompression", "kind" : "case object"}, {"label" : "CompressionLevel8", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.CompressionLevel8", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#CompressionLevel8", "kind" : "case object"}, {"label" : "CompressionLevel7", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.CompressionLevel7", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#CompressionLevel7", "kind" : "case object"}, {"label" : "CompressionLevel6", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.CompressionLevel6", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#CompressionLevel6", "kind" : "case object"}, {"label" : "CompressionLevel5", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.CompressionLevel5", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#CompressionLevel5", "kind" : "case object"}, {"label" : "CompressionLevel4", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.CompressionLevel4", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#CompressionLevel4", "kind" : "case object"}, {"label" : "CompressionLevel3", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.CompressionLevel3", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#CompressionLevel3", "kind" : "case object"}, {"label" : "CompressionLevel2", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.CompressionLevel2", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#CompressionLevel2", "kind" : "case object"}, {"label" : "BestSpeed", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.BestSpeed", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#BestSpeed", "kind" : "case object"}, {"label" : "NoCompression", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.NoCompression", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#NoCompression", "kind" : "case object"}, {"label" : "DefaultCompression", "tail" : "", "member" : "monix.reactive.compression.CompressionLevel.DefaultCompression", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#DefaultCompression", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionLevel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionLevel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/compression\/CompressionLevel.html", "kind" : "class"}, {"name" : "monix.reactive.compression.CompressionParameters", "shortDescription" : "", "object" : "monix\/reactive\/compression\/CompressionParameters$.html", "members_object" : [{"label" : "Default", "tail" : ": CompressionParameters", "member" : "monix.reactive.compression.CompressionParameters.Default", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#Default:monix.reactive.compression.CompressionParameters", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionParameters$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionParameters$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "monix.reactive.compression.CompressionParameters#<init>", "error" : "unsupported entity"}, {"label" : "flushMode", "tail" : ": FlushMode", "member" : "monix.reactive.compression.CompressionParameters.flushMode", "link" : "monix\/reactive\/compression\/CompressionParameters.html#flushMode:monix.reactive.compression.FlushMode", "kind" : "val"}, {"label" : "strategy", "tail" : ": CompressionStrategy", "member" : "monix.reactive.compression.CompressionParameters.strategy", "link" : "monix\/reactive\/compression\/CompressionParameters.html#strategy:monix.reactive.compression.CompressionStrategy", "kind" : "val"}, {"label" : "level", "tail" : ": CompressionLevel", "member" : "monix.reactive.compression.CompressionParameters.level", "link" : "monix\/reactive\/compression\/CompressionParameters.html#level:monix.reactive.compression.CompressionLevel", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/reactive\/compression\/CompressionParameters.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionParameters.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionParameters.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionParameters.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionParameters.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionParameters.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionParameters.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionParameters.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionParameters.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionParameters.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionParameters.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionParameters.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionParameters.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionParameters.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionParameters.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionParameters.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionParameters.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/reactive\/compression\/CompressionParameters.html", "kind" : "case class"}, {"name" : "monix.reactive.compression.CompressionStrategy", "shortDescription" : "", "object" : "monix\/reactive\/compression\/CompressionStrategy$.html", "members_class" : [{"label" : "jValue", "tail" : ": Int", "member" : "monix.reactive.compression.CompressionStrategy.jValue", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#jValue:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "HuffmanOnly", "tail" : "", "member" : "monix.reactive.compression.CompressionStrategy.HuffmanOnly", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#HuffmanOnly", "kind" : "case object"}, {"label" : "Filtered", "tail" : "", "member" : "monix.reactive.compression.CompressionStrategy.Filtered", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#Filtered", "kind" : "case object"}, {"label" : "DefaultStrategy", "tail" : "", "member" : "monix.reactive.compression.CompressionStrategy.DefaultStrategy", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#DefaultStrategy", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/CompressionStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/compression\/CompressionStrategy.html", "kind" : "class"}, {"name" : "monix.reactive.compression.FlushMode", "shortDescription" : "", "object" : "monix\/reactive\/compression\/FlushMode$.html", "members_class" : [{"label" : "jValue", "tail" : ": Int", "member" : "monix.reactive.compression.FlushMode.jValue", "link" : "monix\/reactive\/compression\/FlushMode.html#jValue:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/FlushMode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/FlushMode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/FlushMode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/FlushMode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/FlushMode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/FlushMode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/FlushMode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/FlushMode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/FlushMode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/FlushMode.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/FlushMode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/FlushMode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/FlushMode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/FlushMode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/FlushMode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/FlushMode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/FlushMode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/FlushMode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/FlushMode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "FullFlush", "tail" : "", "member" : "monix.reactive.compression.FlushMode.FullFlush", "link" : "monix\/reactive\/compression\/FlushMode$.html#FullFlush", "kind" : "case object"}, {"label" : "SyncFlush", "tail" : "", "member" : "monix.reactive.compression.FlushMode.SyncFlush", "link" : "monix\/reactive\/compression\/FlushMode$.html#SyncFlush", "kind" : "case object"}, {"label" : "NoFlush", "tail" : "", "member" : "monix.reactive.compression.FlushMode.NoFlush", "link" : "monix\/reactive\/compression\/FlushMode$.html#NoFlush", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/compression\/FlushMode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/compression\/FlushMode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/compression\/FlushMode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/compression\/FlushMode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/compression\/FlushMode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/compression\/FlushMode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/compression\/FlushMode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/FlushMode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/FlushMode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/compression\/FlushMode$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/compression\/FlushMode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/compression\/FlushMode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/compression\/FlushMode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/compression\/FlushMode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/compression\/FlushMode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/compression\/FlushMode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/compression\/FlushMode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/compression\/FlushMode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/compression\/FlushMode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/compression\/FlushMode.html", "kind" : "class"}], "monix.execution.exceptions" : [{"name" : "monix.execution.exceptions.APIContractViolationException", "shortDescription" : "Generic exception thrown on API contract violations.", "object" : "monix\/execution\/exceptions\/APIContractViolationException$.html", "members_class" : [{"member" : "monix.execution.exceptions.APIContractViolationException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.APIContractViolationException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.APIContractViolationException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.APIContractViolationException.message", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(arg: APIContractViolationException): Option[(String, Throwable)]", "member" : "monix.execution.exceptions.APIContractViolationException.unapply", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#unapply(arg:monix.execution.exceptions.APIContractViolationException):Option[(String,Throwable)]", "kind" : "def"}, {"label" : "apply", "tail" : "(message: String): APIContractViolationException", "member" : "monix.execution.exceptions.APIContractViolationException.apply", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#apply(message:String):monix.execution.exceptions.APIContractViolationException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (APIContractViolationException) => A): (String) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => String): (A) => APIContractViolationException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/APIContractViolationException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/APIContractViolationException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.BufferOverflowException", "shortDescription" : "An exception emitted on buffer overflows, like when usingOverflowStrategy.Fail.", "object" : "monix\/execution\/exceptions\/BufferOverflowException$.html", "members_class" : [{"member" : "monix.execution.exceptions.BufferOverflowException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.BufferOverflowException.message", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(message: String): BufferOverflowException", "member" : "monix.execution.exceptions.BufferOverflowException.apply", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#apply(message:String):monix.execution.exceptions.BufferOverflowException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (BufferOverflowException) => A): (String) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => String): (A) => BufferOverflowException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/BufferOverflowException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/BufferOverflowException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.CallbackCalledMultipleTimesException", "shortDescription" : "Thrown when signaling is attempted multiple times forCallback or similar.", "object" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html", "members_class" : [{"member" : "monix.execution.exceptions.CallbackCalledMultipleTimesException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.CallbackCalledMultipleTimesException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.CallbackCalledMultipleTimesException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.APIContractViolationException.message", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "forResult", "tail" : "(r: Either[E, _]): CallbackCalledMultipleTimesException", "member" : "monix.execution.exceptions.CallbackCalledMultipleTimesException.forResult", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#forResult[E](r:Either[E,_]):monix.execution.exceptions.CallbackCalledMultipleTimesException", "kind" : "def"}, {"label" : "forResult", "tail" : "(r: Try[_]): CallbackCalledMultipleTimesException", "member" : "monix.execution.exceptions.CallbackCalledMultipleTimesException.forResult", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#forResult[E](r:scala.util.Try[_]):monix.execution.exceptions.CallbackCalledMultipleTimesException", "kind" : "def"}, {"label" : "unapply", "tail" : "(arg: CallbackCalledMultipleTimesException): Option[(String, Throwable)]", "member" : "monix.execution.exceptions.CallbackCalledMultipleTimesException.unapply", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#unapply(arg:monix.execution.exceptions.CallbackCalledMultipleTimesException):Option[(String,Throwable)]", "kind" : "def"}, {"label" : "apply", "tail" : "(message: String): CallbackCalledMultipleTimesException", "member" : "monix.execution.exceptions.CallbackCalledMultipleTimesException.apply", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#apply(message:String):monix.execution.exceptions.CallbackCalledMultipleTimesException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (CallbackCalledMultipleTimesException) => A): (String) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => String): (A) => CallbackCalledMultipleTimesException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/CallbackCalledMultipleTimesException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.CompositeException", "shortDescription" : "A composite exception represents a list of exceptionsthat were caught while delaying errors.", "object" : "monix\/execution\/exceptions\/CompositeException$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.exceptions.CompositeException.toString", "link" : "monix\/execution\/exceptions\/CompositeException.html#toString():String", "kind" : "def"}, {"member" : "monix.execution.exceptions.CompositeException#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": Seq[Throwable]", "member" : "monix.execution.exceptions.CompositeException.errors", "link" : "monix\/execution\/exceptions\/CompositeException.html#errors:Seq[Throwable]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/CompositeException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/CompositeException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/CompositeException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/CompositeException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/CompositeException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/CompositeException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/CompositeException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/CompositeException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/CompositeException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/CompositeException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/CompositeException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/CompositeException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/CompositeException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/CompositeException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/CompositeException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/CompositeException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/CompositeException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/CompositeException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/CompositeException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/CompositeException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(ref: CompositeException): Option[List[Throwable]]", "member" : "monix.execution.exceptions.CompositeException.unapply", "link" : "monix\/execution\/exceptions\/CompositeException$.html#unapply(ref:monix.execution.exceptions.CompositeException):Option[List[Throwable]]", "kind" : "def"}, {"label" : "apply", "tail" : "(errors: Seq[Throwable]): CompositeException", "member" : "monix.execution.exceptions.CompositeException.apply", "link" : "monix\/execution\/exceptions\/CompositeException$.html#apply(errors:Seq[Throwable]):monix.execution.exceptions.CompositeException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/CompositeException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (CompositeException) => A): (Seq[Throwable]) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/CompositeException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Seq[Throwable]): (A) => CompositeException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/CompositeException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/CompositeException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/CompositeException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/CompositeException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/CompositeException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/CompositeException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/CompositeException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/CompositeException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/CompositeException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/CompositeException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/CompositeException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/CompositeException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/CompositeException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/CompositeException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/CompositeException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/CompositeException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/CompositeException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.DownstreamTimeoutException", "shortDescription" : "Exception thrown whenever a downstream listener on aback-pressured data-source is taking too long to processa received event.", "object" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html", "members_class" : [{"member" : "monix.execution.exceptions.DownstreamTimeoutException#<init>", "error" : "unsupported entity"}, {"label" : "timeout", "tail" : ": FiniteDuration", "member" : "monix.execution.exceptions.DownstreamTimeoutException.timeout", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#timeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(ex: DownstreamTimeoutException): Option[FiniteDuration]", "member" : "monix.execution.exceptions.DownstreamTimeoutException.unapply", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#unapply(ex:monix.execution.exceptions.DownstreamTimeoutException):Option[scala.concurrent.duration.FiniteDuration]", "kind" : "def"}, {"label" : "apply", "tail" : "(timeout: FiniteDuration): DownstreamTimeoutException", "member" : "monix.execution.exceptions.DownstreamTimeoutException.apply", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#apply(timeout:scala.concurrent.duration.FiniteDuration):monix.execution.exceptions.DownstreamTimeoutException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (DownstreamTimeoutException) => A): (FiniteDuration) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => FiniteDuration): (A) => DownstreamTimeoutException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/DownstreamTimeoutException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/DownstreamTimeoutException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.DummyException", "shortDescription" : "Used in testing to trigger dummy exceptions.", "members_case class" : [{"member" : "monix.execution.exceptions.DummyException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.DummyException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.DummyException.message", "link" : "monix\/execution\/exceptions\/DummyException.html#message:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/execution\/exceptions\/DummyException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/DummyException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/DummyException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/DummyException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/DummyException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/DummyException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/DummyException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/DummyException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/DummyException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/DummyException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/DummyException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/DummyException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/DummyException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/DummyException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/DummyException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/DummyException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DummyException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DummyException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/DummyException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/DummyException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/DummyException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/DummyException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/DummyException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/DummyException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/DummyException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/execution\/exceptions\/DummyException.html", "kind" : "case class"}, {"name" : "monix.execution.exceptions.ExecutionRejectedException", "shortDescription" : "Exception thrown whenever an execution attempt was rejected.", "object" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html", "members_class" : [{"member" : "monix.execution.exceptions.ExecutionRejectedException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.ExecutionRejectedException#<init>", "error" : "unsupported entity"}, {"member" : "monix.execution.exceptions.ExecutionRejectedException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "monix.execution.exceptions.ExecutionRejectedException.message", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(message: String): ExecutionRejectedException", "member" : "monix.execution.exceptions.ExecutionRejectedException.apply", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#apply(message:String):monix.execution.exceptions.ExecutionRejectedException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (ExecutionRejectedException) => A): (String) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => String): (A) => ExecutionRejectedException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/ExecutionRejectedException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/ExecutionRejectedException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.UncaughtErrorException", "shortDescription" : "The UncaughtErrorException wraps uncaught, generic errors.", "object" : "monix\/execution\/exceptions\/UncaughtErrorException$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.exceptions.UncaughtErrorException.toString", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#toString():String", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/UncaughtErrorException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "wrap", "tail" : "(error: E): Throwable", "member" : "monix.execution.exceptions.UncaughtErrorException.wrap", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#wrap[E](error:E):Throwable", "kind" : "def"}, {"label" : "apply", "tail" : "(error: E): UncaughtErrorException[E]", "member" : "monix.execution.exceptions.UncaughtErrorException.apply", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#apply[E](error:E):monix.execution.exceptions.UncaughtErrorException[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/UncaughtErrorException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/UncaughtErrorException.html", "kind" : "class"}, {"name" : "monix.execution.exceptions.UpstreamTimeoutException", "shortDescription" : "Exception thrown whenever a upstream listener on aback-pressured data-source is taking too long to processa received event.", "object" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html", "members_class" : [{"member" : "monix.execution.exceptions.UpstreamTimeoutException#<init>", "error" : "unsupported entity"}, {"label" : "timeout", "tail" : ": FiniteDuration", "member" : "monix.execution.exceptions.UpstreamTimeoutException.timeout", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#timeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unapply", "tail" : "(ex: UpstreamTimeoutException): Option[FiniteDuration]", "member" : "monix.execution.exceptions.UpstreamTimeoutException.unapply", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#unapply(ex:monix.execution.exceptions.UpstreamTimeoutException):Option[scala.concurrent.duration.FiniteDuration]", "kind" : "def"}, {"label" : "apply", "tail" : "(timeout: FiniteDuration): UpstreamTimeoutException", "member" : "monix.execution.exceptions.UpstreamTimeoutException.apply", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#apply(timeout:scala.concurrent.duration.FiniteDuration):monix.execution.exceptions.UpstreamTimeoutException", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (UpstreamTimeoutException) => A): (FiniteDuration) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => FiniteDuration): (A) => UpstreamTimeoutException", "member" : "scala.Function1.compose", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/exceptions\/UpstreamTimeoutException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/exceptions\/UpstreamTimeoutException.html", "kind" : "class"}], "monix.execution.misc" : [{"name" : "monix.execution.misc.CanBindLocals", "object" : "monix\/execution\/misc\/CanBindLocals$.html", "members_object" : [{"label" : "Implicits", "tail" : "", "member" : "monix.execution.misc.CanIsolateInstancesLevel1.Implicits", "link" : "monix\/execution\/misc\/CanBindLocals$.html#Implicits", "kind" : "object"}, {"label" : "FutureInstance", "tail" : "", "member" : "monix.execution.misc.CanIsolateInstancesLevel0.FutureInstance", "link" : "monix\/execution\/misc\/CanBindLocals$.html#FutureInstance", "kind" : "object"}, {"label" : "CancelableFutureInstance", "tail" : "", "member" : "monix.execution.misc.CanIsolateInstancesLevel0.CancelableFutureInstance", "link" : "monix\/execution\/misc\/CanBindLocals$.html#CancelableFutureInstance", "kind" : "object"}, {"label" : "SynchronousInstance", "tail" : "", "member" : "monix.execution.misc.CanIsolateInstancesLevel0.SynchronousInstance", "link" : "monix\/execution\/misc\/CanBindLocals$.html#SynchronousInstance", "kind" : "object"}, {"label" : "apply", "tail" : "(R: CanBindLocals[R]): CanBindLocals[R]", "member" : "monix.execution.misc.CanBindLocals.apply", "link" : "monix\/execution\/misc\/CanBindLocals$.html#apply[R](implicitR:monix.execution.misc.CanBindLocals[R]):monix.execution.misc.CanBindLocals[R]", "kind" : "def"}, {"label" : "cancelableFuture", "tail" : "(): CanBindLocals[CancelableFuture[R]]", "member" : "monix.execution.misc.CanIsolateInstancesLevel1.cancelableFuture", "link" : "monix\/execution\/misc\/CanBindLocals$.html#cancelableFuture[R]:monix.execution.misc.CanBindLocals[monix.execution.CancelableFuture[R]]", "kind" : "implicit def"}, {"label" : "synchronous", "tail" : "(): CanBindLocals[R]", "member" : "monix.execution.misc.CanIsolateInstancesLevel0.synchronous", "link" : "monix\/execution\/misc\/CanBindLocals$.html#synchronous[R]:monix.execution.misc.CanBindLocals[R]", "kind" : "def"}, {"label" : "forUnit", "tail" : "(): CanBindLocals[Unit]", "member" : "monix.execution.misc.CanIsolateInstancesLevel0.forUnit", "link" : "monix\/execution\/misc\/CanBindLocals$.html#forUnit:monix.execution.misc.CanBindLocals[Unit]", "kind" : "implicit def"}, {"label" : "future", "tail" : "(): CanBindLocals[Future[R]]", "member" : "monix.execution.misc.CanIsolateInstancesLevel0.future", "link" : "monix\/execution\/misc\/CanBindLocals$.html#future[R]:monix.execution.misc.CanBindLocals[scala.concurrent.Future[R]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/CanBindLocals$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/CanBindLocals$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/CanBindLocals$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/CanBindLocals$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/CanBindLocals$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/CanBindLocals$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/CanBindLocals$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/CanBindLocals$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/CanBindLocals$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/CanBindLocals$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/CanBindLocals$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/CanBindLocals$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/CanBindLocals$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/CanBindLocals$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/CanBindLocals$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/CanBindLocals$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/CanBindLocals$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/CanBindLocals$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/CanBindLocals$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/misc\/CanBindLocals.html", "kind" : "trait", "members_trait" : [{"label" : "isolate", "tail" : "(f: => R): R", "member" : "monix.execution.misc.CanBindLocals.isolate", "link" : "monix\/execution\/misc\/CanBindLocals.html#isolate(f:=>R):R", "kind" : "def"}, {"label" : "bindKey", "tail" : "(local: Local[A], value: Option[A])(f: => R): R", "member" : "monix.execution.misc.CanBindLocals.bindKey", "link" : "monix\/execution\/misc\/CanBindLocals.html#bindKey[A](local:monix.execution.misc.Local[A],value:Option[A])(f:=>R):R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/CanBindLocals.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/CanBindLocals.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/CanBindLocals.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/CanBindLocals.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/CanBindLocals.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/CanBindLocals.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/CanBindLocals.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/CanBindLocals.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/CanBindLocals.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/CanBindLocals.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/CanBindLocals.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/CanBindLocals.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/CanBindLocals.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/CanBindLocals.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/CanBindLocals.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/CanBindLocals.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/CanBindLocals.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/CanBindLocals.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/CanBindLocals.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "bindContext", "tail" : "(ctx: Context)(f: => R): R", "member" : "monix.execution.misc.CanBindLocals.bindContext", "link" : "monix\/execution\/misc\/CanBindLocals.html#bindContext(ctx:monix.execution.misc.Local.Context)(f:=>R):R", "kind" : "abstract def"}], "shortDescription" : "Type class describing how Local binding works for specific data types."}, {"name" : "monix.execution.misc.HygieneUtilMacros", "trait" : "monix\/execution\/misc\/HygieneUtilMacros.html", "kind" : "trait", "members_trait" : [{"label" : "util", "tail" : "", "member" : "monix.execution.misc.HygieneUtilMacros.util", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#util", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "c", "tail" : ": Context", "member" : "monix.execution.misc.HygieneUtilMacros.c", "link" : "monix\/execution\/misc\/HygieneUtilMacros.html#c:scala.reflect.macros.whitebox.Context", "kind" : "abstract val"}], "shortDescription" : "Utilities for macro-hygiene."}, {"name" : "monix.execution.misc.InlineMacros", "trait" : "monix\/execution\/misc\/InlineMacros.html", "kind" : "trait", "members_trait" : [{"label" : "stripUnApplyNodes", "tail" : "(): scala.reflect.macros.Universe.Transformer", "member" : "monix.execution.misc.InlineMacros.stripUnApplyNodes", "link" : "monix\/execution\/misc\/InlineMacros.html#stripUnApplyNodes():InlineMacros.this.c.universe.Transformer", "kind" : "def"}, {"label" : "inlineApplyRecursive", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "monix.execution.misc.InlineMacros.inlineApplyRecursive", "link" : "monix\/execution\/misc\/InlineMacros.html#inlineApplyRecursive(tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "resetTree", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "monix.execution.misc.InlineMacros.resetTree", "link" : "monix\/execution\/misc\/InlineMacros.html#resetTree(tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "inlineAndResetTree", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "monix.execution.misc.InlineMacros.inlineAndResetTree", "link" : "monix\/execution\/misc\/InlineMacros.html#inlineAndResetTree(tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.universe.Tree", "kind" : "def"}, {"label" : "inlineAndReset", "tail" : "(tree: scala.reflect.macros.Universe.Tree): scala.reflect.macros.whitebox.Context.Expr[A]", "member" : "monix.execution.misc.InlineMacros.inlineAndReset", "link" : "monix\/execution\/misc\/InlineMacros.html#inlineAndReset[A](tree:InlineMacros.this.c.universe.Tree):InlineMacros.this.c.Expr[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/InlineMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/InlineMacros.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/InlineMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/InlineMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/InlineMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/InlineMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/InlineMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/InlineMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/InlineMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/InlineMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/InlineMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/InlineMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/InlineMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/InlineMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/InlineMacros.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/InlineMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/InlineMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/InlineMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/InlineMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "c", "tail" : ": Context", "member" : "monix.execution.misc.InlineMacros.c", "link" : "monix\/execution\/misc\/InlineMacros.html#c:scala.reflect.macros.whitebox.Context", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "monix.execution.misc.Local", "shortDescription" : "A Local is a ThreadLocal whose scope is flexible.", "object" : "monix\/execution\/misc\/Local$.html", "members_class" : [{"label" : "clear", "tail" : "(): Unit", "member" : "monix.execution.misc.Local.clear", "link" : "monix\/execution\/misc\/Local.html#clear():Unit", "kind" : "def"}, {"label" : "bindClear", "tail" : "(f: => R)(R: CanBindLocals[R]): R", "member" : "monix.execution.misc.Local.bindClear", "link" : "monix\/execution\/misc\/Local.html#bindClear[R](f:=>R)(implicitR:monix.execution.misc.CanBindLocals[R]):R", "kind" : "def"}, {"label" : "bind", "tail" : "(value: A)(f: => R)(R: CanBindLocals[R]): R", "member" : "monix.execution.misc.Local.bind", "link" : "monix\/execution\/misc\/Local.html#bind[R](value:A)(f:=>R)(implicitR:monix.execution.misc.CanBindLocals[R]):R", "kind" : "def"}, {"label" : "value_=", "tail" : "(update: Option[A]): Unit", "member" : "monix.execution.misc.Local.value_=", "link" : "monix\/execution\/misc\/Local.html#value_=(update:Option[A]):Unit", "kind" : "def"}, {"label" : "value", "tail" : "(): Option[A]", "member" : "monix.execution.misc.Local.value", "link" : "monix\/execution\/misc\/Local.html#value:Option[A]", "kind" : "def"}, {"label" : ":=", "tail" : "(value: A): Unit", "member" : "monix.execution.misc.Local.:=", "link" : "monix\/execution\/misc\/Local.html#:=(value:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.misc.Local.get", "link" : "monix\/execution\/misc\/Local.html#get:A", "kind" : "def"}, {"label" : "update", "tail" : "(value: A): Unit", "member" : "monix.execution.misc.Local.update", "link" : "monix\/execution\/misc\/Local.html#update(value:A):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.execution.misc.Local.apply", "link" : "monix\/execution\/misc\/Local.html#apply():A", "kind" : "def"}, {"label" : "key", "tail" : ": Key", "member" : "monix.execution.misc.Local.key", "link" : "monix\/execution\/misc\/Local.html#key:monix.execution.misc.Local.Key", "kind" : "val"}, {"member" : "monix.execution.misc.Local#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/Local.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/Local.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/Local.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/Local.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/Local.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/Local.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/Local.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/Local.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/Local.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/Local.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/Local.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/Local.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/Local.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/Local.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/Local.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/Local.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Context", "tail" : "", "member" : "monix.execution.misc.Local.Context", "link" : "monix\/execution\/misc\/Local$.html#ContextextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "closed", "tail" : "(fn: () => R)(R: CanBindLocals[R]): () => R", "member" : "monix.execution.misc.Local.closed", "link" : "monix\/execution\/misc\/Local$.html#closed[R](fn:()=>R)(implicitR:monix.execution.misc.CanBindLocals[R]):()=>R", "kind" : "def"}, {"label" : "bindClear", "tail" : "(f: => R)(R: CanBindLocals[R]): R", "member" : "monix.execution.misc.Local.bindClear", "link" : "monix\/execution\/misc\/Local$.html#bindClear[R](f:=>R)(implicitR:monix.execution.misc.CanBindLocals[R]):R", "kind" : "def"}, {"label" : "bind", "tail" : "(ctx: Context)(f: => R)(R: CanBindLocals[R]): R", "member" : "monix.execution.misc.Local.bind", "link" : "monix\/execution\/misc\/Local$.html#bind[R](ctx:monix.execution.misc.Local.Context)(f:=>R)(implicitR:monix.execution.misc.CanBindLocals[R]):R", "kind" : "def"}, {"label" : "isolate", "tail" : "(f: => R)(R: CanBindLocals[R]): R", "member" : "monix.execution.misc.Local.isolate", "link" : "monix\/execution\/misc\/Local$.html#isolate[R](f:=>R)(implicitR:monix.execution.misc.CanBindLocals[R]):R", "kind" : "def"}, {"label" : "clearContext", "tail" : "(): Unit", "member" : "monix.execution.misc.Local.clearContext", "link" : "monix\/execution\/misc\/Local$.html#clearContext():Unit", "kind" : "def"}, {"label" : "setContext", "tail" : "(ctx: Context): Unit", "member" : "monix.execution.misc.Local.setContext", "link" : "monix\/execution\/misc\/Local$.html#setContext(ctx:monix.execution.misc.Local.Context):Unit", "kind" : "def"}, {"label" : "getContext", "tail" : "(): Context", "member" : "monix.execution.misc.Local.getContext", "link" : "monix\/execution\/misc\/Local$.html#getContext():monix.execution.misc.Local.Context", "kind" : "def"}, {"label" : "newContext", "tail" : "(): Context", "member" : "monix.execution.misc.Local.newContext", "link" : "monix\/execution\/misc\/Local$.html#newContext():monix.execution.misc.Local.Context", "kind" : "def"}, {"label" : "Key", "tail" : "", "member" : "monix.execution.misc.Local.Key", "link" : "monix\/execution\/misc\/Local$.html#KeyextendsSerializable", "kind" : "final class"}, {"label" : "apply", "tail" : "(default: A): Local[A]", "member" : "monix.execution.misc.Local.apply", "link" : "monix\/execution\/misc\/Local$.html#apply[A](default:A):monix.execution.misc.Local[A]", "kind" : "def"}, {"label" : "closed", "tail" : "(fn: () => R): () => R", "member" : "monix.execution.misc.LocalCompanionDeprecated.closed", "link" : "monix\/execution\/misc\/Local$.html#closed[R](fn:()=>R):()=>R", "kind" : "def"}, {"label" : "defaultContext", "tail" : "(): Unbound", "member" : "monix.execution.misc.LocalCompanionDeprecated.defaultContext", "link" : "monix\/execution\/misc\/Local$.html#defaultContext():monix.execution.misc.Local.Unbound", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/Local$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/Local$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/Local$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/Local$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/Local$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/Local$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/Local$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/Local$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/Local$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/Local$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/Local$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/Local$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/Local$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/Local$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/Local$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/Local$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/Local$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/misc\/Local.html", "kind" : "class"}, {"name" : "monix.execution.misc.ThreadLocal", "shortDescription" : "Cross-platform equivalent for java.lang.ThreadLocal,for specifying thread-local variables.", "object" : "monix\/execution\/misc\/ThreadLocal$.html", "members_class" : [{"label" : "reset", "tail" : "(): Unit", "member" : "monix.execution.misc.ThreadLocal.reset", "link" : "monix\/execution\/misc\/ThreadLocal.html#reset():Unit", "kind" : "def"}, {"label" : "set", "tail" : "(value: A): Unit", "member" : "monix.execution.misc.ThreadLocal.set", "link" : "monix\/execution\/misc\/ThreadLocal.html#set(value:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): A", "member" : "monix.execution.misc.ThreadLocal.get", "link" : "monix\/execution\/misc\/ThreadLocal.html#get():A", "kind" : "def"}, {"label" : "initial", "tail" : ": A", "member" : "monix.execution.misc.ThreadLocal.initial", "link" : "monix\/execution\/misc\/ThreadLocal.html#initial:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/ThreadLocal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/ThreadLocal.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/ThreadLocal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/ThreadLocal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/ThreadLocal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/ThreadLocal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/ThreadLocal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/ThreadLocal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/ThreadLocal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/ThreadLocal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/ThreadLocal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/ThreadLocal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/ThreadLocal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/ThreadLocal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initial: A): ThreadLocal[A]", "member" : "monix.execution.misc.ThreadLocal.apply", "link" : "monix\/execution\/misc\/ThreadLocal$.html#apply[A](initial:A):monix.execution.misc.ThreadLocal[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(): ThreadLocal[A]", "member" : "monix.execution.misc.ThreadLocal.apply", "link" : "monix\/execution\/misc\/ThreadLocal$.html#apply[A<:AnyRef]():monix.execution.misc.ThreadLocal[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/misc\/ThreadLocal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/misc\/ThreadLocal$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/misc\/ThreadLocal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/misc\/ThreadLocal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/misc\/ThreadLocal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/misc\/ThreadLocal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/misc\/ThreadLocal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/misc\/ThreadLocal$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/misc\/ThreadLocal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/misc\/ThreadLocal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/misc\/ThreadLocal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/misc\/ThreadLocal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/misc\/ThreadLocal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/misc\/ThreadLocal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/misc\/ThreadLocal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/misc\/ThreadLocal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/misc\/ThreadLocal.html", "kind" : "class"}], "monix.reactive.observers" : [{"name" : "monix.reactive.observers.BufferedSubscriber", "object" : "monix\/reactive\/observers\/BufferedSubscriber$.html", "members_object" : [{"label" : "batched", "tail" : "(underlying: Subscriber[List[A]], bufferSize: Int, producerType: ProducerSide): Subscriber[A]", "member" : "monix.reactive.observers.buffers.BuildersImpl.batched", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#batched[A](underlying:monix.reactive.observers.Subscriber[List[A]],bufferSize:Int,producerType:monix.execution.ChannelType.ProducerSide):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "synchronous", "tail" : "(subscriber: Subscriber[A], bufferPolicy: Synchronous[A], producerType: ProducerSide): Sync[A]", "member" : "monix.reactive.observers.buffers.BuildersImpl.synchronous", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#synchronous[A](subscriber:monix.reactive.observers.Subscriber[A],bufferPolicy:monix.reactive.OverflowStrategy.Synchronous[A],producerType:monix.execution.ChannelType.ProducerSide):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(subscriber: Subscriber[A], bufferPolicy: OverflowStrategy[A], producerType: ProducerSide): Subscriber[A]", "member" : "monix.reactive.observers.buffers.BuildersImpl.apply", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#apply[A](subscriber:monix.reactive.observers.Subscriber[A],bufferPolicy:monix.reactive.OverflowStrategy[A],producerType:monix.execution.ChannelType.ProducerSide):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/reactive\/observers\/BufferedSubscriber.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "scheduler", "tail" : "(): Scheduler", "member" : "monix.reactive.observers.Subscriber.scheduler", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/observers\/BufferedSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}], "shortDescription" : "Interface describing Observer wrappersthat are thread-safe (can receive concurrent events) and thatreturn an immediate Continue when receiving onNextevents."}, {"name" : "monix.reactive.observers.CacheUntilConnectSubscriber", "shortDescription" : "Wraps an underlying Subscriber into an implementation that cachesall events until the call to connect() happens.", "object" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html", "members_class" : [{"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.onError", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.onComplete", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#onComplete():Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.onNext", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "connect", "tail" : "(): CancelableFuture[Ack]", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.connect", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#connect():monix.execution.CancelableFuture[monix.execution.Ack]", "kind" : "def"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.scheduler", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(underlying: Subscriber[A]): CacheUntilConnectSubscriber[A]", "member" : "monix.reactive.observers.CacheUntilConnectSubscriber.apply", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#apply[A](underlying:monix.reactive.observers.Subscriber[A]):monix.reactive.observers.CacheUntilConnectSubscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observers\/CacheUntilConnectSubscriber.html", "kind" : "class"}, {"name" : "monix.reactive.observers.ConnectableSubscriber", "shortDescription" : "Wraps a Subscriber into an implementation that abstains from emitting items until the callto connect() happens.", "object" : "monix\/reactive\/observers\/ConnectableSubscriber$.html", "members_class" : [{"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.onError", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.onComplete", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#onComplete():Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.observers.ConnectableSubscriber.onNext", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "pushError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushError", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "pushComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushComplete", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushComplete():Unit", "kind" : "def"}, {"label" : "pushFirstAll", "tail" : "(xs: Iterable[U]): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushFirstAll", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushFirstAll[U<:A](xs:Iterable[U]):Unit", "kind" : "def"}, {"label" : "pushFirst", "tail" : "(elem: A): Unit", "member" : "monix.reactive.observers.ConnectableSubscriber.pushFirst", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#pushFirst(elem:A):Unit", "kind" : "def"}, {"label" : "connect", "tail" : "(): CancelableFuture[Ack]", "member" : "monix.reactive.observers.ConnectableSubscriber.connect", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#connect():monix.execution.CancelableFuture[monix.execution.Ack]", "kind" : "def"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "monix.reactive.observers.ConnectableSubscriber.scheduler", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(subscriber: Subscriber[A]): ConnectableSubscriber[A]", "member" : "monix.reactive.observers.ConnectableSubscriber.apply", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#apply[A](subscriber:monix.reactive.observers.Subscriber[A]):monix.reactive.observers.ConnectableSubscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/ConnectableSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observers\/ConnectableSubscriber.html", "kind" : "class"}, {"name" : "monix.reactive.observers.SafeSubscriber", "shortDescription" : "A safe subscriber safe guards subscriber implementations, such that:", "object" : "monix\/reactive\/observers\/SafeSubscriber$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.observers.SafeSubscriber.onComplete", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.observers.SafeSubscriber.onError", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.observers.SafeSubscriber.onNext", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "monix.reactive.observers.SafeSubscriber.scheduler", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/SafeSubscriber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(subscriber: Subscriber[A]): SafeSubscriber[A]", "member" : "monix.reactive.observers.SafeSubscriber.apply", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#apply[A](subscriber:monix.reactive.observers.Subscriber[A]):monix.reactive.observers.SafeSubscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/SafeSubscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/observers\/SafeSubscriber.html", "kind" : "class"}, {"name" : "monix.reactive.observers.Subscriber", "object" : "monix\/reactive\/observers\/Subscriber$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.reactive.observers.Subscriber.Extensions", "link" : "monix\/reactive\/observers\/Subscriber$.html#Extensions[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "toReactiveSubscriber", "tail" : "(source: Subscriber[A], requestCount: Int): org.reactivestreams.Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.toReactiveSubscriber", "link" : "monix\/reactive\/observers\/Subscriber$.html#toReactiveSubscriber[A](source:monix.reactive.observers.Subscriber[A],requestCount:Int):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "toReactiveSubscriber", "tail" : "(subscriber: Subscriber[A]): org.reactivestreams.Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.toReactiveSubscriber", "link" : "monix\/reactive\/observers\/Subscriber$.html#toReactiveSubscriber[A](subscriber:monix.reactive.observers.Subscriber[A]):org.reactivestreams.Subscriber[A]", "kind" : "def"}, {"label" : "fromReactiveSubscriber", "tail" : "(subscriber: org.reactivestreams.Subscriber[A], subscription: Cancelable)(s: Scheduler): Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.fromReactiveSubscriber", "link" : "monix\/reactive\/observers\/Subscriber$.html#fromReactiveSubscriber[A](subscriber:org.reactivestreams.Subscriber[A],subscription:monix.execution.Cancelable)(implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(fa: Subscriber[A])(f: (B) => A): Subscriber[B]", "member" : "monix.reactive.observers.Subscriber.contramap", "link" : "monix\/reactive\/observers\/Subscriber$.html#contramap[A,B](fa:monix.reactive.observers.Subscriber[A])(f:B=>A):monix.reactive.observers.Subscriber[B]", "kind" : "def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream)(s: Scheduler): Sync[A]", "member" : "monix.reactive.observers.Subscriber.dump", "link" : "monix\/reactive\/observers\/Subscriber$.html#dump[A](prefix:String,out:java.io.PrintStream)(implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "canceled", "tail" : "(s: Scheduler): Sync[A]", "member" : "monix.reactive.observers.Subscriber.canceled", "link" : "monix\/reactive\/observers\/Subscriber$.html#canceled[A](implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(s: Scheduler): Sync[A]", "member" : "monix.reactive.observers.Subscriber.empty", "link" : "monix\/reactive\/observers\/Subscriber$.html#empty[A](implicits:monix.execution.Scheduler):monix.reactive.observers.Subscriber.Sync[A]", "kind" : "def"}, {"label" : "Sync", "tail" : "", "member" : "monix.reactive.observers.Subscriber.Sync", "link" : "monix\/reactive\/observers\/Subscriber$.html#Sync", "kind" : "object"}, {"label" : "Sync", "tail" : "", "member" : "monix.reactive.observers.Subscriber.Sync", "link" : "monix\/reactive\/observers\/Subscriber$.html#Sync[-A]extendsSubscriber[A]withObserver.Sync[A]", "kind" : "trait"}, {"label" : "apply", "tail" : "(observer: Observer[A], scheduler: Scheduler): Subscriber[A]", "member" : "monix.reactive.observers.Subscriber.apply", "link" : "monix\/reactive\/observers\/Subscriber$.html#apply[A](observer:monix.reactive.Observer[A],scheduler:monix.execution.Scheduler):monix.reactive.observers.Subscriber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/Subscriber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/Subscriber$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/Subscriber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/Subscriber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/Subscriber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/Subscriber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/Subscriber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/Subscriber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/Subscriber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/Subscriber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/Subscriber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/Subscriber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/Subscriber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/Subscriber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/reactive\/observers\/Subscriber.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/observers\/Subscriber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/observers\/Subscriber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/observers\/Subscriber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/observers\/Subscriber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/observers\/Subscriber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/observers\/Subscriber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/observers\/Subscriber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/observers\/Subscriber.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/observers\/Subscriber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/observers\/Subscriber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/observers\/Subscriber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/observers\/Subscriber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/observers\/Subscriber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/observers\/Subscriber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/observers\/Subscriber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/observers\/Subscriber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "scheduler", "tail" : "(): Scheduler", "member" : "monix.reactive.observers.Subscriber.scheduler", "link" : "monix\/reactive\/observers\/Subscriber.html#scheduler:monix.execution.Scheduler", "kind" : "implicit abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/observers\/Subscriber.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/observers\/Subscriber.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/observers\/Subscriber.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}], "shortDescription" : "A Subscriber is an Observer with an attached Scheduler."}], "monix.execution" : [{"name" : "monix.execution.Ack", "shortDescription" : "Represents an acknowledgement of processing that a consumersends back upstream.", "object" : "monix\/execution\/Ack$.html", "members_class" : [{"label" : "onComplete", "tail" : "(func: (Try[Ack]) => U)(executor: ExecutionContext): Unit", "member" : "monix.execution.Ack.onComplete", "link" : "monix\/execution\/Ack.html#onComplete[U](func:scala.util.Try[monix.execution.Ack]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "final def"}, {"label" : "transformWith", "tail" : "(f: (Try[Ack]) => Future[S])(executor: ExecutionContext): Future[S]", "member" : "monix.execution.Ack.transformWith", "link" : "monix\/execution\/Ack.html#transformWith[S](f:scala.util.Try[monix.execution.Ack]=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: (Try[Ack]) => Try[S])(executor: ExecutionContext): Future[S]", "member" : "monix.execution.Ack.transform", "link" : "monix\/execution\/Ack.html#transform[S](f:scala.util.Try[monix.execution.Ack]=>scala.util.Try[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "final def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[Ack], U])(executor: ExecutionContext): Future[Ack]", "member" : "scala.concurrent.Future.andThen", "link" : "monix\/execution\/Ack.html#andThen[U](pf:PartialFunction[scala.util.Try[T],U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): Future[S]", "member" : "scala.concurrent.Future.mapTo", "link" : "monix\/execution\/Ack.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): Future[U]", "member" : "scala.concurrent.Future.fallbackTo", "link" : "monix\/execution\/Ack.html#fallbackTo[U>:T](that:scala.concurrent.Future[U]):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (Ack, U) => R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "monix\/execution\/Ack.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Future[U]): Future[(Ack, U)]", "member" : "scala.concurrent.Future.zip", "link" : "monix\/execution\/Ack.html#zip[U](that:scala.concurrent.Future[U]):scala.concurrent.Future[(T,U)]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recoverWith", "link" : "monix\/execution\/Ack.html#recoverWith[U>:T](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recover", "link" : "monix\/execution\/Ack.html#recover[U>:T](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Ack, S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.collect", "link" : "monix\/execution\/Ack.html#collect[S](pf:PartialFunction[T,S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Ack) => Boolean)(executor: ExecutionContext): Future[Ack]", "member" : "scala.concurrent.Future.withFilter", "link" : "monix\/execution\/Ack.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (Ack) => Boolean)(executor: ExecutionContext): Future[Ack]", "member" : "scala.concurrent.Future.filter", "link" : "monix\/execution\/Ack.html#filter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[Ack, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "monix\/execution\/Ack.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Ack) => Future[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.flatMap", "link" : "monix\/execution\/Ack.html#flatMap[S](f:T=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Ack) => S)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.map", "link" : "monix\/execution\/Ack.html#map[S](f:T=>S)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(s: (Ack) => S, f: (Throwable) => Throwable)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transform", "link" : "monix\/execution\/Ack.html#transform[S](s:T=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Ack) => U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "monix\/execution\/Ack.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "failed", "tail" : "(): Future[Throwable]", "member" : "scala.concurrent.Future.failed", "link" : "monix\/execution\/Ack.html#failed:scala.concurrent.Future[Throwable]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Ack.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Ack.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Ack.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Ack.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Ack.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Ack.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Ack.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Ack.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Ack.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Ack.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Ack.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Ack.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Ack.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Ack.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Ack.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Ack.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "AsSuccess", "tail" : ": Success[Ack]", "member" : "monix.execution.Ack.AsSuccess", "link" : "monix\/execution\/Ack.html#AsSuccess:scala.util.Success[monix.execution.Ack]", "kind" : "abstract val"}, {"label" : "value", "tail" : "(): Option[Try[Ack]]", "member" : "scala.concurrent.Future.value", "link" : "monix\/execution\/Ack.html#value:Option[scala.util.Try[T]]", "kind" : "abstract def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "scala.concurrent.Future.isCompleted", "link" : "monix\/execution\/Ack.html#isCompleted:Boolean", "kind" : "abstract def"}, {"label" : "result", "tail" : "(atMost: Duration)(permit: CanAwait): Ack", "member" : "scala.concurrent.Awaitable.result", "link" : "monix\/execution\/Ack.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):T", "kind" : "abstract def"}, {"label" : "ready", "tail" : "(atMost: Duration)(permit: CanAwait): Ack.this.type", "member" : "scala.concurrent.Awaitable.ready", "link" : "monix\/execution\/Ack.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):Awaitable.this.type", "kind" : "abstract def"}], "members_object" : [{"label" : "AckExtensions", "tail" : "", "member" : "monix.execution.Ack.AckExtensions", "link" : "monix\/execution\/Ack$.html#AckExtensions[Self<:scala.concurrent.Future[monix.execution.Ack]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "Stop", "tail" : "", "member" : "monix.execution.Ack.Stop", "link" : "monix\/execution\/Ack$.html#Stop", "kind" : "case object"}, {"label" : "Continue", "tail" : "", "member" : "monix.execution.Ack.Continue", "link" : "monix\/execution\/Ack$.html#Continue", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Ack$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Ack$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Ack$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Ack$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Ack$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Ack$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Ack$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Ack$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Ack$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Ack$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Ack$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Ack$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Ack$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Ack$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Ack$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Ack$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Ack$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/Ack.html", "kind" : "class"}, {"name" : "monix.execution.AsyncQueue", "shortDescription" : "A high-performance, back-pressured, asynchronous queue implementation.", "object" : "monix\/execution\/AsyncQueue$.html", "members_class" : [{"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.execution.AsyncQueue.isEmpty", "link" : "monix\/execution\/AsyncQueue.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "monix.execution.AsyncQueue.clear", "link" : "monix\/execution\/AsyncQueue.html#clear():Unit", "kind" : "def"}, {"label" : "drain", "tail" : "(minLength: Int, maxLength: Int): CancelableFuture[Seq[A]]", "member" : "monix.execution.AsyncQueue.drain", "link" : "monix\/execution\/AsyncQueue.html#drain(minLength:Int,maxLength:Int):monix.execution.CancelableFuture[Seq[A]]", "kind" : "def"}, {"label" : "offerMany", "tail" : "(seq: Iterable[A]): CancelableFuture[Unit]", "member" : "monix.execution.AsyncQueue.offerMany", "link" : "monix\/execution\/AsyncQueue.html#offerMany(seq:Iterable[A]):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "offer", "tail" : "(a: A): CancelableFuture[Unit]", "member" : "monix.execution.AsyncQueue.offer", "link" : "monix\/execution\/AsyncQueue.html#offer(a:A):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "poll", "tail" : "(): CancelableFuture[A]", "member" : "monix.execution.AsyncQueue.poll", "link" : "monix\/execution\/AsyncQueue.html#poll():monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "tryPoll", "tail" : "(): Option[A]", "member" : "monix.execution.AsyncQueue.tryPoll", "link" : "monix\/execution\/AsyncQueue.html#tryPoll():Option[A]", "kind" : "def"}, {"label" : "tryOffer", "tail" : "(a: A): Boolean", "member" : "monix.execution.AsyncQueue.tryOffer", "link" : "monix\/execution\/AsyncQueue.html#tryOffer(a:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/AsyncQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/AsyncQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/AsyncQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/AsyncQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/AsyncQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/AsyncQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/AsyncQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/AsyncQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/AsyncQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/AsyncQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/AsyncQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/AsyncQueue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/AsyncQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/AsyncQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/AsyncQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/AsyncQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "withConfig", "tail" : "(capacity: BufferCapacity, channelType: ChannelType)(scheduler: Scheduler): AsyncQueue[A]", "member" : "monix.execution.AsyncQueue.withConfig", "link" : "monix\/execution\/AsyncQueue$.html#withConfig[A](capacity:monix.execution.BufferCapacity,channelType:monix.execution.ChannelType)(implicitscheduler:monix.execution.Scheduler):monix.execution.AsyncQueue[A]", "kind" : "def"}, {"label" : "unbounded", "tail" : "(chunkSizeHint: Option[Int])(s: Scheduler): AsyncQueue[A]", "member" : "monix.execution.AsyncQueue.unbounded", "link" : "monix\/execution\/AsyncQueue$.html#unbounded[A](chunkSizeHint:Option[Int])(implicits:monix.execution.Scheduler):monix.execution.AsyncQueue[A]", "kind" : "def"}, {"label" : "bounded", "tail" : "(capacity: Int)(s: Scheduler): AsyncQueue[A]", "member" : "monix.execution.AsyncQueue.bounded", "link" : "monix\/execution\/AsyncQueue$.html#bounded[A](capacity:Int)(implicits:monix.execution.Scheduler):monix.execution.AsyncQueue[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/AsyncQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/AsyncQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/AsyncQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/AsyncQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/AsyncQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/AsyncQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/AsyncQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/AsyncQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/AsyncQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/AsyncQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/AsyncQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/AsyncQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/AsyncQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/AsyncQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/AsyncQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/AsyncQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/AsyncQueue.html", "kind" : "class"}, {"name" : "monix.execution.AsyncSemaphore", "shortDescription" : "The AsyncSemaphore is an asynchronous semaphore implementation thatlimits the parallelism on Future execution.", "object" : "monix\/execution\/AsyncSemaphore$.html", "members_class" : [{"label" : "awaitAvailable", "tail" : "(n: Long): CancelableFuture[Unit]", "member" : "monix.execution.AsyncSemaphore.awaitAvailable", "link" : "monix\/execution\/AsyncSemaphore.html#awaitAvailable(n:Long):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "releaseN", "tail" : "(n: Long): Unit", "member" : "monix.execution.AsyncSemaphore.releaseN", "link" : "monix\/execution\/AsyncSemaphore.html#releaseN(n:Long):Unit", "kind" : "def"}, {"label" : "release", "tail" : "(): Unit", "member" : "monix.execution.AsyncSemaphore.release", "link" : "monix\/execution\/AsyncSemaphore.html#release():Unit", "kind" : "def"}, {"label" : "tryAcquireN", "tail" : "(n: Long): Boolean", "member" : "monix.execution.AsyncSemaphore.tryAcquireN", "link" : "monix\/execution\/AsyncSemaphore.html#tryAcquireN(n:Long):Boolean", "kind" : "def"}, {"label" : "tryAcquire", "tail" : "(): Boolean", "member" : "monix.execution.AsyncSemaphore.tryAcquire", "link" : "monix\/execution\/AsyncSemaphore.html#tryAcquire():Boolean", "kind" : "def"}, {"label" : "acquireN", "tail" : "(n: Long): CancelableFuture[Unit]", "member" : "monix.execution.AsyncSemaphore.acquireN", "link" : "monix\/execution\/AsyncSemaphore.html#acquireN(n:Long):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "acquire", "tail" : "(): CancelableFuture[Unit]", "member" : "monix.execution.AsyncSemaphore.acquire", "link" : "monix\/execution\/AsyncSemaphore.html#acquire():monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "withPermitN", "tail" : "(n: Long)(f: () => Future[A]): CancelableFuture[A]", "member" : "monix.execution.AsyncSemaphore.withPermitN", "link" : "monix\/execution\/AsyncSemaphore.html#withPermitN[A](n:Long)(f:()=>scala.concurrent.Future[A]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "withPermit", "tail" : "(f: () => Future[A]): CancelableFuture[A]", "member" : "monix.execution.AsyncSemaphore.withPermit", "link" : "monix\/execution\/AsyncSemaphore.html#withPermit[A](f:()=>scala.concurrent.Future[A]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "monix.execution.AsyncSemaphore.count", "link" : "monix\/execution\/AsyncSemaphore.html#count():Long", "kind" : "def"}, {"label" : "available", "tail" : "(): Long", "member" : "monix.execution.AsyncSemaphore.available", "link" : "monix\/execution\/AsyncSemaphore.html#available():Long", "kind" : "def"}, {"label" : "makeCancelable", "tail" : "(f: (Listener[Unit]) => Unit, p: Listener[Unit]): Cancelable", "member" : "monix.execution.AsyncSemaphore.makeCancelable", "link" : "monix\/execution\/AsyncSemaphore.html#makeCancelable(f:monix.execution.internal.GenericSemaphore.Listener[Unit]=>Unit,p:monix.execution.internal.GenericSemaphore.Listener[Unit]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "emptyCancelable", "tail" : "(): Cancelable", "member" : "monix.execution.AsyncSemaphore.emptyCancelable", "link" : "monix\/execution\/AsyncSemaphore.html#emptyCancelable:monix.execution.Cancelable", "kind" : "def"}, {"label" : "unsafeAwaitAvailable", "tail" : "(n: Long, await: Listener[Unit]): Cancelable", "member" : "monix.execution.internal.GenericSemaphore.unsafeAwaitAvailable", "link" : "monix\/execution\/AsyncSemaphore.html#unsafeAwaitAvailable(n:Long,await:monix.execution.internal.GenericSemaphore.Listener[Unit]):CancelToken", "kind" : "final def"}, {"label" : "unsafeReleaseN", "tail" : "(n: Long): Unit", "member" : "monix.execution.internal.GenericSemaphore.unsafeReleaseN", "link" : "monix\/execution\/AsyncSemaphore.html#unsafeReleaseN(n:Long):Unit", "kind" : "final def"}, {"label" : "unsafeTryAcquireN", "tail" : "(n: Long): Boolean", "member" : "monix.execution.internal.GenericSemaphore.unsafeTryAcquireN", "link" : "monix\/execution\/AsyncSemaphore.html#unsafeTryAcquireN(n:Long):Boolean", "kind" : "final def"}, {"label" : "unsafeAsyncAcquireN", "tail" : "(n: Long, await: Listener[Unit]): Cancelable", "member" : "monix.execution.internal.GenericSemaphore.unsafeAsyncAcquireN", "link" : "monix\/execution\/AsyncSemaphore.html#unsafeAsyncAcquireN(n:Long,await:monix.execution.internal.GenericSemaphore.Listener[Unit]):CancelToken", "kind" : "final def"}, {"label" : "unsafeAcquireN", "tail" : "(n: Long, await: Listener[Unit]): Cancelable", "member" : "monix.execution.internal.GenericSemaphore.unsafeAcquireN", "link" : "monix\/execution\/AsyncSemaphore.html#unsafeAcquireN(n:Long,await:monix.execution.internal.GenericSemaphore.Listener[Unit]):CancelToken", "kind" : "final def"}, {"label" : "unsafeCount", "tail" : "(): Long", "member" : "monix.execution.internal.GenericSemaphore.unsafeCount", "link" : "monix\/execution\/AsyncSemaphore.html#unsafeCount():Long", "kind" : "final def"}, {"label" : "unsafeAvailable", "tail" : "(): Long", "member" : "monix.execution.internal.GenericSemaphore.unsafeAvailable", "link" : "monix\/execution\/AsyncSemaphore.html#unsafeAvailable():Long", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/AsyncSemaphore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/AsyncSemaphore.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/AsyncSemaphore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/AsyncSemaphore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/AsyncSemaphore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/AsyncSemaphore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/AsyncSemaphore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncSemaphore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncSemaphore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncSemaphore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/AsyncSemaphore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/AsyncSemaphore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/AsyncSemaphore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/AsyncSemaphore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/AsyncSemaphore.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/AsyncSemaphore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/AsyncSemaphore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/AsyncSemaphore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/AsyncSemaphore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(provisioned: Long, ps: PaddingStrategy): AsyncSemaphore", "member" : "monix.execution.AsyncSemaphore.apply", "link" : "monix\/execution\/AsyncSemaphore$.html#apply(provisioned:Long,ps:monix.execution.atomic.PaddingStrategy):monix.execution.AsyncSemaphore", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/AsyncSemaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/AsyncSemaphore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/AsyncSemaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/AsyncSemaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/AsyncSemaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/AsyncSemaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/AsyncSemaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncSemaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncSemaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncSemaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/AsyncSemaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/AsyncSemaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/AsyncSemaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/AsyncSemaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/AsyncSemaphore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/AsyncSemaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/AsyncSemaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/AsyncSemaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/AsyncSemaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/AsyncSemaphore.html", "kind" : "class"}, {"name" : "monix.execution.AsyncVar", "shortDescription" : "Asynchronous mutable location, that is either empty or containsa value of type A.", "object" : "monix\/execution\/AsyncVar$.html", "members_class" : [{"label" : "iEmpty", "tail" : "(): Boolean", "member" : "monix.execution.AsyncVar.iEmpty", "link" : "monix\/execution\/AsyncVar.html#iEmpty():Boolean", "kind" : "def"}, {"label" : "tryRead", "tail" : "(): Option[A]", "member" : "monix.execution.AsyncVar.tryRead", "link" : "monix\/execution\/AsyncVar.html#tryRead():Option[A]", "kind" : "def"}, {"label" : "readByCallback", "tail" : "(await: Callback[Nothing, A]): Cancelable", "member" : "monix.execution.AsyncVar.readByCallback", "link" : "monix\/execution\/AsyncVar.html#readByCallback(await:monix.execution.Callback[Nothing,A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "read", "tail" : "(): CancelableFuture[A]", "member" : "monix.execution.AsyncVar.read", "link" : "monix\/execution\/AsyncVar.html#read():monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "tryTake", "tail" : "(): Option[A]", "member" : "monix.execution.AsyncVar.tryTake", "link" : "monix\/execution\/AsyncVar.html#tryTake():Option[A]", "kind" : "def"}, {"label" : "takeByCallback", "tail" : "(await: Callback[Nothing, A]): Cancelable", "member" : "monix.execution.AsyncVar.takeByCallback", "link" : "monix\/execution\/AsyncVar.html#takeByCallback(await:monix.execution.Callback[Nothing,A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "take", "tail" : "(): CancelableFuture[A]", "member" : "monix.execution.AsyncVar.take", "link" : "monix\/execution\/AsyncVar.html#take():monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "tryPut", "tail" : "(a: A): Boolean", "member" : "monix.execution.AsyncVar.tryPut", "link" : "monix\/execution\/AsyncVar.html#tryPut(a:A):Boolean", "kind" : "def"}, {"label" : "putByCallback", "tail" : "(a: A, await: Callback[Nothing, Unit]): Cancelable", "member" : "monix.execution.AsyncVar.putByCallback", "link" : "monix\/execution\/AsyncVar.html#putByCallback(a:A,await:monix.execution.Callback[Nothing,Unit]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "put", "tail" : "(a: A): CancelableFuture[Unit]", "member" : "monix.execution.AsyncVar.put", "link" : "monix\/execution\/AsyncVar.html#put(a:A):monix.execution.CancelableFuture[Unit]", "kind" : "def"}, {"label" : "emptyCancelable", "tail" : "(): Cancelable", "member" : "monix.execution.AsyncVar.emptyCancelable", "link" : "monix\/execution\/AsyncVar.html#emptyCancelable:monix.execution.Cancelable", "kind" : "def"}, {"label" : "makeCancelable", "tail" : "(f: (Id) => Unit, id: Id): Cancelable", "member" : "monix.execution.AsyncVar.makeCancelable", "link" : "monix\/execution\/AsyncVar.html#makeCancelable(f:monix.execution.internal.GenericVar.Id=>Unit,id:monix.execution.internal.GenericVar.Id):monix.execution.Cancelable", "kind" : "def"}, {"label" : "unsafeIsEmpty", "tail" : "(): Boolean", "member" : "monix.execution.internal.GenericVar.unsafeIsEmpty", "link" : "monix\/execution\/AsyncVar.html#unsafeIsEmpty():Boolean", "kind" : "final def"}, {"label" : "unsafeTryRead", "tail" : "(): Option[A]", "member" : "monix.execution.internal.GenericVar.unsafeTryRead", "link" : "monix\/execution\/AsyncVar.html#unsafeTryRead():Option[A]", "kind" : "final def"}, {"label" : "unsafeRead", "tail" : "(await: (Either[Nothing, A]) => Unit): Cancelable", "member" : "monix.execution.internal.GenericVar.unsafeRead", "link" : "monix\/execution\/AsyncVar.html#unsafeRead(await:Either[Nothing,A]=>Unit):CancelToken", "kind" : "final def"}, {"label" : "unsafeTryTake", "tail" : "(): Option[A]", "member" : "monix.execution.internal.GenericVar.unsafeTryTake", "link" : "monix\/execution\/AsyncVar.html#unsafeTryTake():Option[A]", "kind" : "final def"}, {"label" : "unsafeTake", "tail" : "(await: (Either[Nothing, A]) => Unit): Cancelable", "member" : "monix.execution.internal.GenericVar.unsafeTake", "link" : "monix\/execution\/AsyncVar.html#unsafeTake(await:Either[Nothing,A]=>Unit):CancelToken", "kind" : "final def"}, {"label" : "unsafeTryPut", "tail" : "(a: A): Boolean", "member" : "monix.execution.internal.GenericVar.unsafeTryPut", "link" : "monix\/execution\/AsyncVar.html#unsafeTryPut(a:A):Boolean", "kind" : "final def"}, {"label" : "unsafePut", "tail" : "(a: A, await: (Either[Nothing, Unit]) => Unit): Cancelable", "member" : "monix.execution.internal.GenericVar.unsafePut", "link" : "monix\/execution\/AsyncVar.html#unsafePut(a:A,await:Either[Nothing,Unit]=>Unit):CancelToken", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/AsyncVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/AsyncVar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/AsyncVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/AsyncVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/AsyncVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/AsyncVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/AsyncVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncVar.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/AsyncVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/AsyncVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/AsyncVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/AsyncVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/AsyncVar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/AsyncVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/AsyncVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/AsyncVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/AsyncVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(ps: PaddingStrategy): AsyncVar[A]", "member" : "monix.execution.AsyncVar.empty", "link" : "monix\/execution\/AsyncVar$.html#empty[A](ps:monix.execution.atomic.PaddingStrategy):monix.execution.AsyncVar[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: A, ps: PaddingStrategy): AsyncVar[A]", "member" : "monix.execution.AsyncVar.apply", "link" : "monix\/execution\/AsyncVar$.html#apply[A](initial:A,ps:monix.execution.atomic.PaddingStrategy):monix.execution.AsyncVar[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/AsyncVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/AsyncVar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/AsyncVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/AsyncVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/AsyncVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/AsyncVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/AsyncVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/AsyncVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/AsyncVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/AsyncVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/AsyncVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/AsyncVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/AsyncVar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/AsyncVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/AsyncVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/AsyncVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/AsyncVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/AsyncVar.html", "kind" : "class"}, {"name" : "monix.execution.BufferCapacity", "shortDescription" : "Describes the capacity of internal buffers.", "object" : "monix\/execution\/BufferCapacity$.html", "members_class" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/execution\/BufferCapacity.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "monix\/execution\/BufferCapacity.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "monix\/execution\/BufferCapacity.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "monix\/execution\/BufferCapacity.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/BufferCapacity.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/BufferCapacity.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/BufferCapacity.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/BufferCapacity.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/BufferCapacity.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/BufferCapacity.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/BufferCapacity.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/BufferCapacity.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/BufferCapacity.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/BufferCapacity.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/BufferCapacity.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/BufferCapacity.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/BufferCapacity.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/BufferCapacity.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/BufferCapacity.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/BufferCapacity.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/BufferCapacity.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/BufferCapacity.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/BufferCapacity.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isBounded", "tail" : "(): Boolean", "member" : "monix.execution.BufferCapacity.isBounded", "link" : "monix\/execution\/BufferCapacity.html#isBounded:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "monix\/execution\/BufferCapacity.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "monix\/execution\/BufferCapacity.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "monix\/execution\/BufferCapacity.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Unbounded", "tail" : "", "member" : "monix.execution.BufferCapacity.Unbounded", "link" : "monix\/execution\/BufferCapacity$.html#UnboundedextendsBufferCapacitywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Bounded", "tail" : "", "member" : "monix.execution.BufferCapacity.Bounded", "link" : "monix\/execution\/BufferCapacity$.html#BoundedextendsBufferCapacitywithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/BufferCapacity$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/BufferCapacity$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/BufferCapacity$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/BufferCapacity$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/BufferCapacity$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/BufferCapacity$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/BufferCapacity$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/BufferCapacity$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/BufferCapacity$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/BufferCapacity$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/BufferCapacity$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/BufferCapacity$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/BufferCapacity$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/BufferCapacity$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/BufferCapacity$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/BufferCapacity$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/BufferCapacity$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/BufferCapacity$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/BufferCapacity$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/BufferCapacity.html", "kind" : "class"}, {"name" : "monix.execution.Callback", "shortDescription" : "Represents a callback that should be called asynchronouslywith the result of a computation.", "object" : "monix\/execution\/Callback$.html", "members_class" : [{"label" : "tryApply", "tail" : "(result: Either[E, A]): Boolean", "member" : "monix.execution.Callback.tryApply", "link" : "monix\/execution\/Callback.html#tryApply(result:Either[E,A]):Boolean", "kind" : "def"}, {"label" : "tryApply", "tail" : "(result: Try[A])(ev: <:<[Throwable, E]): Boolean", "member" : "monix.execution.Callback.tryApply", "link" : "monix\/execution\/Callback.html#tryApply(result:scala.util.Try[A])(implicitev:Throwable<:<E):Boolean", "kind" : "def"}, {"label" : "tryOnError", "tail" : "(e: E): Boolean", "member" : "monix.execution.Callback.tryOnError", "link" : "monix\/execution\/Callback.html#tryOnError(e:E):Boolean", "kind" : "def"}, {"label" : "tryOnSuccess", "tail" : "(value: A): Boolean", "member" : "monix.execution.Callback.tryOnSuccess", "link" : "monix\/execution\/Callback.html#tryOnSuccess(value:A):Boolean", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Callback[E, B]", "member" : "monix.execution.Callback.contramap", "link" : "monix\/execution\/Callback.html#contramap[B](f:B=>A):monix.execution.Callback[E,B]", "kind" : "def"}, {"label" : "apply", "tail" : "(result: Try[A])(ev: <:<[Throwable, E]): Unit", "member" : "monix.execution.Callback.apply", "link" : "monix\/execution\/Callback.html#apply(result:scala.util.Try[A])(implicitev:Throwable<:<E):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(result: Either[E, A]): Unit", "member" : "monix.execution.Callback.apply", "link" : "monix\/execution\/Callback.html#apply(result:Either[E,A]):Unit", "kind" : "def"}, {"member" : "monix.execution.Callback#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/execution\/Callback.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Unit) => A): (Either[E, A]) => A", "member" : "scala.Function1.andThen", "link" : "monix\/execution\/Callback.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Either[E, A]): (A) => Unit", "member" : "scala.Function1.compose", "link" : "monix\/execution\/Callback.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Callback.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Callback.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Callback.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Callback.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Callback.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Callback.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Callback.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Callback.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Callback.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Callback.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Callback.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Callback.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Callback.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Callback.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Callback.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Callback.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Callback.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Callback.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onError", "tail" : "(e: E): Unit", "member" : "monix.execution.Callback.onError", "link" : "monix\/execution\/Callback.html#onError(e:E):Unit", "kind" : "abstract def"}, {"label" : "onSuccess", "tail" : "(value: A): Unit", "member" : "monix.execution.Callback.onSuccess", "link" : "monix\/execution\/Callback.html#onSuccess(value:A):Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "Builders", "tail" : "", "member" : "monix.execution.Callback.Builders", "link" : "monix\/execution\/Callback$.html#Builders[E]extendsAnyVal", "kind" : "final class"}, {"label" : "fromTry", "tail" : "(cb: (Try[A]) => Unit): Callback[Throwable, A]", "member" : "monix.execution.Callback.fromTry", "link" : "monix\/execution\/Callback$.html#fromTry[A](cb:scala.util.Try[A]=>Unit):monix.execution.Callback[Throwable,A]", "kind" : "def"}, {"label" : "fromAttempt", "tail" : "(cb: (Either[E, A]) => Unit): Callback[E, A]", "member" : "monix.execution.Callback.fromAttempt", "link" : "monix\/execution\/Callback$.html#fromAttempt[E,A](cb:Either[E,A]=>Unit):monix.execution.Callback[E,A]", "kind" : "def"}, {"label" : "trampolined", "tail" : "(cb: Callback[E, A])(ec: ExecutionContext): Callback[E, A]", "member" : "monix.execution.Callback.trampolined", "link" : "monix\/execution\/Callback$.html#trampolined[E,A](cb:monix.execution.Callback[E,A])(implicitec:scala.concurrent.ExecutionContext):monix.execution.Callback[E,A]", "kind" : "def"}, {"label" : "forked", "tail" : "(cb: Callback[E, A])(ec: ExecutionContext): Callback[E, A]", "member" : "monix.execution.Callback.forked", "link" : "monix\/execution\/Callback$.html#forked[E,A](cb:monix.execution.Callback[E,A])(implicitec:scala.concurrent.ExecutionContext):monix.execution.Callback[E,A]", "kind" : "def"}, {"label" : "fromPromise", "tail" : "(p: Promise[A]): Callback[Throwable, A]", "member" : "monix.execution.Callback.fromPromise", "link" : "monix\/execution\/Callback$.html#fromPromise[A](p:scala.concurrent.Promise[A]):monix.execution.Callback[Throwable,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(r: UncaughtExceptionReporter): Callback[E, A]", "member" : "monix.execution.Callback.empty", "link" : "monix\/execution\/Callback$.html#empty[E,A](implicitr:monix.execution.UncaughtExceptionReporter):monix.execution.Callback[E,A]", "kind" : "def"}, {"label" : "safe", "tail" : "(cb: Callback[E, A])(r: UncaughtExceptionReporter): Callback[E, A]", "member" : "monix.execution.Callback.safe", "link" : "monix\/execution\/Callback$.html#safe[E,A](cb:monix.execution.Callback[E,A])(implicitr:monix.execution.UncaughtExceptionReporter):monix.execution.Callback[E,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Builders[E]", "member" : "monix.execution.Callback.apply", "link" : "monix\/execution\/Callback$.html#apply[E]:monix.execution.Callback.Builders[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Callback$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Callback$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Callback$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Callback$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Callback$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Callback$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Callback$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Callback$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Callback$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Callback$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Callback$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Callback$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Callback$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Callback$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Callback$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Callback$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Callback$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Callback$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Callback$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/Callback.html", "kind" : "class"}, {"name" : "monix.execution.Cancelable", "object" : "monix\/execution\/Cancelable$.html", "members_object" : [{"label" : "IsDummy", "tail" : "", "member" : "monix.execution.Cancelable.IsDummy", "link" : "monix\/execution\/Cancelable$.html#IsDummyextendsAnyRef", "kind" : "trait"}, {"label" : "Empty", "tail" : "", "member" : "monix.execution.Cancelable.Empty", "link" : "monix\/execution\/Cancelable$.html#EmptyextendsCancelablewithCancelable.IsDummy", "kind" : "trait"}, {"label" : "cancelAll", "tail" : "(seq: Iterable[Cancelable]): Unit", "member" : "monix.execution.Cancelable.cancelAll", "link" : "monix\/execution\/Cancelable$.html#cancelAll(seq:Iterable[monix.execution.Cancelable]):Unit", "kind" : "def"}, {"label" : "fromPromise", "tail" : "(p: Promise[A], e: Throwable): Cancelable", "member" : "monix.execution.Cancelable.fromPromise", "link" : "monix\/execution\/Cancelable$.html#fromPromise[A](p:scala.concurrent.Promise[A],e:Throwable):monix.execution.Cancelable", "kind" : "def"}, {"label" : "trampolined", "tail" : "(seq: Iterable[Cancelable])(s: Scheduler): Cancelable", "member" : "monix.execution.Cancelable.trampolined", "link" : "monix\/execution\/Cancelable$.html#trampolined(seq:Iterable[monix.execution.Cancelable])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "def"}, {"label" : "trampolined", "tail" : "(refs: Cancelable*)(s: Scheduler): Cancelable", "member" : "monix.execution.Cancelable.trampolined", "link" : "monix\/execution\/Cancelable$.html#trampolined(refs:monix.execution.Cancelable*)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "def"}, {"label" : "collection", "tail" : "(seq: Iterable[Cancelable]): Cancelable", "member" : "monix.execution.Cancelable.collection", "link" : "monix\/execution\/Cancelable$.html#collection(seq:Iterable[monix.execution.Cancelable]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "collection", "tail" : "(refs: Cancelable*): Cancelable", "member" : "monix.execution.Cancelable.collection", "link" : "monix\/execution\/Cancelable$.html#collection(refs:monix.execution.Cancelable*):monix.execution.Cancelable", "kind" : "def"}, {"label" : "empty", "tail" : ": Cancelable", "member" : "monix.execution.Cancelable.empty", "link" : "monix\/execution\/Cancelable$.html#empty:monix.execution.Cancelable", "kind" : "val"}, {"label" : "apply", "tail" : "(callback: () => Unit): Cancelable", "member" : "monix.execution.Cancelable.apply", "link" : "monix\/execution\/Cancelable$.html#apply(callback:()=>Unit):monix.execution.Cancelable", "kind" : "def"}, {"label" : "apply", "tail" : "(): Cancelable", "member" : "monix.execution.Cancelable.apply", "link" : "monix\/execution\/Cancelable$.html#apply():monix.execution.Cancelable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Cancelable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Cancelable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Cancelable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Cancelable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Cancelable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Cancelable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Cancelable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Cancelable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Cancelable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Cancelable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Cancelable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Cancelable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Cancelable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Cancelable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Cancelable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Cancelable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/Cancelable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Cancelable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Cancelable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Cancelable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Cancelable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Cancelable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Cancelable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Cancelable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Cancelable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Cancelable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Cancelable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Cancelable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Cancelable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Cancelable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Cancelable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Cancelable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Cancelable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Cancelable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/Cancelable.html#cancel():Unit", "kind" : "abstract def"}], "shortDescription" : "Represents a one-time idempotent action that can be usedto cancel async computations, or to release resources thatactive data sources are holding."}, {"name" : "monix.execution.CancelableFuture", "shortDescription" : "Represents an asynchronous computation that can be canceledas long as it isn't complete.", "object" : "monix\/execution\/CancelableFuture$.html", "members_class" : [{"label" : "transformWith", "tail" : "(f: (Try[A]) => Future[S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.transformWith", "link" : "monix\/execution\/CancelableFuture.html#transformWith[S](f:scala.util.Try[A]=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Try[A]) => Try[S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.transform", "link" : "monix\/execution\/CancelableFuture.html#transform[S](f:scala.util.Try[A]=>scala.util.Try[S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Future[S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.flatMap", "link" : "monix\/execution\/CancelableFuture.html#flatMap[S](f:A=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[A], U])(executor: ExecutionContext): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.andThen", "link" : "monix\/execution\/CancelableFuture.html#andThen[U](pf:PartialFunction[scala.util.Try[A],U])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.mapTo", "link" : "monix\/execution\/CancelableFuture.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): CancelableFuture[U]", "member" : "monix.execution.CancelableFuture.fallbackTo", "link" : "monix\/execution\/CancelableFuture.html#fallbackTo[U>:A](that:scala.concurrent.Future[U]):monix.execution.CancelableFuture[U]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: Future[U]): CancelableFuture[(A, U)]", "member" : "monix.execution.CancelableFuture.zip", "link" : "monix\/execution\/CancelableFuture.html#zip[U](that:scala.concurrent.Future[U]):monix.execution.CancelableFuture[(A,U)]", "kind" : "final def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): CancelableFuture[U]", "member" : "monix.execution.CancelableFuture.recoverWith", "link" : "monix\/execution\/CancelableFuture.html#recoverWith[U>:A](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[U]", "kind" : "final def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): CancelableFuture[U]", "member" : "monix.execution.CancelableFuture.recover", "link" : "monix\/execution\/CancelableFuture.html#recover[U>:A](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[U]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, S])(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.collect", "link" : "monix\/execution\/CancelableFuture.html#collect[S](pf:PartialFunction[A,S])(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean)(executor: ExecutionContext): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.filter", "link" : "monix\/execution\/CancelableFuture.html#filter(p:A=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => S)(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.map", "link" : "monix\/execution\/CancelableFuture.html#map[S](f:A=>S)(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "transform", "tail" : "(s: (A) => S, f: (Throwable) => Throwable)(executor: ExecutionContext): CancelableFuture[S]", "member" : "monix.execution.CancelableFuture.transform", "link" : "monix\/execution\/CancelableFuture.html#transform[S](s:A=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[S]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): CancelableFuture[Throwable]", "member" : "monix.execution.CancelableFuture.failed", "link" : "monix\/execution\/CancelableFuture.html#failed:monix.execution.CancelableFuture[Throwable]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (A, U) => R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "monix\/execution\/CancelableFuture.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean)(executor: ExecutionContext): Future[A]", "member" : "scala.concurrent.Future.withFilter", "link" : "monix\/execution\/CancelableFuture.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "monix\/execution\/CancelableFuture.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "monix\/execution\/CancelableFuture.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelableFuture.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelableFuture.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelableFuture.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelableFuture.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelableFuture.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelableFuture.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelableFuture.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelableFuture.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelableFuture.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelableFuture.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelableFuture.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelableFuture.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelableFuture.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelableFuture.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelableFuture.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelableFuture.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "monix.execution.Cancelable.cancel", "link" : "monix\/execution\/CancelableFuture.html#cancel():Unit", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): Option[Try[A]]", "member" : "scala.concurrent.Future.value", "link" : "monix\/execution\/CancelableFuture.html#value:Option[scala.util.Try[T]]", "kind" : "abstract def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "scala.concurrent.Future.isCompleted", "link" : "monix\/execution\/CancelableFuture.html#isCompleted:Boolean", "kind" : "abstract def"}, {"label" : "onComplete", "tail" : "(f: (Try[A]) => U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onComplete", "link" : "monix\/execution\/CancelableFuture.html#onComplete[U](f:scala.util.Try[T]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "abstract def"}, {"label" : "result", "tail" : "(atMost: Duration)(permit: CanAwait): A", "member" : "scala.concurrent.Awaitable.result", "link" : "monix\/execution\/CancelableFuture.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):T", "kind" : "abstract def"}, {"label" : "ready", "tail" : "(atMost: Duration)(permit: CanAwait): CancelableFuture.this.type", "member" : "scala.concurrent.Awaitable.ready", "link" : "monix\/execution\/CancelableFuture.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):Awaitable.this.type", "kind" : "abstract def"}], "members_object" : [{"label" : "async", "tail" : "(register: ((Try[A]) => Unit) => Cancelable)(ec: ExecutionContext): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.async", "link" : "monix\/execution\/CancelableFuture$.html#async[A](register:(scala.util.Try[A]=>Unit)=>monix.execution.Cancelable)(implicitec:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: Try[A]): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.fromTry", "link" : "monix\/execution\/CancelableFuture$.html#fromTry[A](value:scala.util.Try[A]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.never", "link" : "monix\/execution\/CancelableFuture$.html#never[A]:monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unit", "tail" : ": CancelableFuture[Unit]", "member" : "monix.execution.CancelableFuture.unit", "link" : "monix\/execution\/CancelableFuture$.html#unit:monix.execution.CancelableFuture[Unit]", "kind" : "val"}, {"label" : "raiseError", "tail" : "(e: Throwable): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.raiseError", "link" : "monix\/execution\/CancelableFuture$.html#raiseError[A](e:Throwable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: A): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.pure", "link" : "monix\/execution\/CancelableFuture$.html#pure[A](value:A):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "failed", "tail" : "(e: Throwable): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.failed", "link" : "monix\/execution\/CancelableFuture$.html#failed[A](e:Throwable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "successful", "tail" : "(value: A): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.successful", "link" : "monix\/execution\/CancelableFuture$.html#successful[A](value:A):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(underlying: Future[A], cancelable: Cancelable): CancelableFuture[A]", "member" : "monix.execution.CancelableFuture.apply", "link" : "monix\/execution\/CancelableFuture$.html#apply[A](underlying:scala.concurrent.Future[A],cancelable:monix.execution.Cancelable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "toJavaCompletable", "tail" : "(source: CancelableFuture[A])(ec: ExecutionContext): CompletableFuture[A]", "member" : "monix.execution.internal.CancelableFutureForPlatform.toJavaCompletable", "link" : "monix\/execution\/CancelableFuture$.html#toJavaCompletable[A](source:monix.execution.CancelableFuture[A])(implicitec:scala.concurrent.ExecutionContext):java.util.concurrent.CompletableFuture[A]", "kind" : "def"}, {"label" : "fromJavaCompletable", "tail" : "(cfa: CompletableFuture[A])(ec: ExecutionContext): CancelableFuture[A]", "member" : "monix.execution.internal.CancelableFutureForPlatform.fromJavaCompletable", "link" : "monix\/execution\/CancelableFuture$.html#fromJavaCompletable[A](cfa:java.util.concurrent.CompletableFuture[A])(implicitec:scala.concurrent.ExecutionContext):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelableFuture$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelableFuture$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelableFuture$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelableFuture$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelableFuture$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelableFuture$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelableFuture$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFuture$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelableFuture$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelableFuture$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelableFuture$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelableFuture$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelableFuture$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelableFuture$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelableFuture$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelableFuture$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelableFuture$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/CancelableFuture.html", "kind" : "class"}, {"name" : "monix.execution.CancelableFutureCatsInstances", "shortDescription" : "Implementation of Cats type classes for theCancelableFuture data type.", "object" : "monix\/execution\/CancelableFutureCatsInstances$.html", "members_class" : [{"label" : "adaptError", "tail" : "(fa: CancelableFuture[A])(pf: PartialFunction[Throwable, Throwable]): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.adaptError", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#adaptError[A](fa:monix.execution.CancelableFuture[A])(pf:PartialFunction[Throwable,Throwable]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.catchNonFatalEval", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<Throwable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.catchNonFatal", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<Throwable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: CancelableFuture[A])(pf: PartialFunction[Throwable, CancelableFuture[A]]): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.recoverWith", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#recoverWith[A](fa:monix.execution.CancelableFuture[A])(pf:PartialFunction[Throwable,monix.execution.CancelableFuture[A]]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: CancelableFuture[A])(pf: PartialFunction[Throwable, A]): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.recover", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#recover[A](fa:monix.execution.CancelableFuture[A])(pf:PartialFunction[Throwable,A]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: CancelableFuture[A]): CancelableFuture[Either[Throwable, A]]", "member" : "monix.execution.CancelableFutureCatsInstances.attempt", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#attempt[A](fa:monix.execution.CancelableFuture[A]):monix.execution.CancelableFuture[Either[Throwable,A]]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fea: CancelableFuture[A])(f: (Throwable) => A): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.handleError", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#handleError[A](fea:monix.execution.CancelableFuture[A])(f:Throwable=>A):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): CancelableFuture[Nothing]", "member" : "monix.execution.CancelableFutureCatsInstances.raiseError", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#raiseError[A](e:Throwable):monix.execution.CancelableFuture[Nothing]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: CancelableFuture[A])(f: (Throwable) => CancelableFuture[A]): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.handleErrorWith", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#handleErrorWith[A](fa:monix.execution.CancelableFuture[A])(f:Throwable=>monix.execution.CancelableFuture[A]):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: CancelableFuture[A])(f: (CancelableFuture[A]) => B): CancelableFuture[B]", "member" : "monix.execution.CancelableFutureCatsInstances.coflatMap", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#coflatMap[A,B](fa:monix.execution.CancelableFuture[A])(f:monix.execution.CancelableFuture[A]=>B):monix.execution.CancelableFuture[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: CancelableFuture[A])(f: (A) => CancelableFuture[B]): CancelableFuture[B]", "member" : "monix.execution.CancelableFutureCatsInstances.flatMap", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#flatMap[A,B](fa:monix.execution.CancelableFuture[A])(f:A=>monix.execution.CancelableFuture[B]):monix.execution.CancelableFuture[B]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: CancelableFuture[A])(f: (A) => B): CancelableFuture[B]", "member" : "monix.execution.CancelableFutureCatsInstances.map", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map[A,B](fa:monix.execution.CancelableFuture[A])(f:A=>B):monix.execution.CancelableFuture[B]", "kind" : "def"}, {"label" : "pure", "tail" : "(x: A): CancelableFuture[A]", "member" : "monix.execution.CancelableFutureCatsInstances.pure", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#pure[A](x:A):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"member" : "monix.execution.CancelableFutureCatsInstances#<init>", "error" : "unsupported entity"}, {"label" : "attemptTap", "tail" : "(fa: CancelableFuture[A])(f: (Either[Throwable, A]) => CancelableFuture[B]): CancelableFuture[A]", "member" : "cats.MonadError.attemptTap", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: CancelableFuture[A])(recover: (Throwable) => CancelableFuture[B], bind: (A) => CancelableFuture[B]): CancelableFuture[B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: CancelableFuture[Either[EE, A]]): CancelableFuture[A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: CancelableFuture[A])(error: (A) => Throwable)(predicate: (A) => Boolean): CancelableFuture[A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: CancelableFuture[A])(error: => Throwable)(predicate: (A) => Boolean): CancelableFuture[A]", "member" : "cats.MonadError.ensure", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): CancelableFuture[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): CancelableFuture[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): CancelableFuture[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): CancelableFuture[A]", "member" : "cats.ApplicativeError.fromTry", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, CancelableFuture, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: CancelableFuture[A])(pf: PartialFunction[Throwable, CancelableFuture[Unit]]): CancelableFuture[A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: CancelableFuture[A])(recover: (Throwable) => B, f: (A) => B): CancelableFuture[B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: CancelableFuture[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): CancelableFuture[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: CancelableFuture[A]): EitherT[CancelableFuture, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: CancelableFuture[A]): CancelableFuture[CancelableFuture[A]]", "member" : "cats.CoflatMap.coflatten", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#coflatten[A](fa:F[A]):F[F[A]]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => CancelableFuture[Either[A, B]]): CancelableFuture[B]", "member" : "cats.StackSafeMonad.tailRecM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tailRecM[A,B](a:A)(f:A=>F[scala.util.Either[A,B]]):F[B]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (CancelableFuture[Boolean], CancelableFuture[A])*)(els: CancelableFuture[A]): CancelableFuture[A]", "member" : "cats.Monad.ifElseM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => CancelableFuture[A])(p: (A) => Boolean): CancelableFuture[A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => CancelableFuture[A])(p: (A) => Boolean): CancelableFuture[A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: CancelableFuture[A])(p: (A) => Boolean): CancelableFuture[A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: CancelableFuture[A])(p: (A) => Boolean): CancelableFuture[A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: CancelableFuture[A])(cond: => CancelableFuture[Boolean]): CancelableFuture[Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: CancelableFuture[A])(cond: => CancelableFuture[Boolean])(G: Alternative[G]): CancelableFuture[G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: CancelableFuture[Boolean])(body: => CancelableFuture[A]): CancelableFuture[Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: CancelableFuture[Boolean])(body: => CancelableFuture[A])(G: Alternative[G]): CancelableFuture[G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => CancelableFuture[A]): CancelableFuture[Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => CancelableFuture[A]): CancelableFuture[Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]CancelableFuture[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]CancelableFuture[G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: CancelableFuture[A]): CancelableFuture[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): CancelableFuture[Unit]", "member" : "cats.Applicative.unit", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): CancelableFuture[A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: CancelableFuture[Option[A]]): CancelableFuture[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => CancelableFuture[A]): CancelableFuture[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: CancelableFuture[A]): CancelableFuture[B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: CancelableFuture[A])(f: (A) => CancelableFuture[B]): CancelableFuture[A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: CancelableFuture[Boolean])(ifTrue: => CancelableFuture[B], ifFalse: => CancelableFuture[B]): CancelableFuture[B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: CancelableFuture[A])(f: (A) => CancelableFuture[B]): CancelableFuture[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: CancelableFuture[A])(fb: CancelableFuture[B]): CancelableFuture[A]", "member" : "cats.FlatMap.productL", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: CancelableFuture[A])(fb: CancelableFuture[B]): CancelableFuture[B]", "member" : "cats.FlatMap.productR", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: CancelableFuture[A], fb: CancelableFuture[B])(f: (A, B) => Z): CancelableFuture[Z]", "member" : "cats.FlatMap.map2", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: CancelableFuture[(A, B) => Z])(fa: CancelableFuture[A], fb: CancelableFuture[B]): CancelableFuture[Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: CancelableFuture[A], fb: CancelableFuture[B]): CancelableFuture[(A, B)]", "member" : "cats.FlatMap.product", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: CancelableFuture[(A) => B])(fa: CancelableFuture[A]): CancelableFuture[B]", "member" : "cats.FlatMap.ap", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: CancelableFuture[A])(fb: Eval[CancelableFuture[B]]): CancelableFuture[A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: CancelableFuture[A])(fb: Eval[CancelableFuture[B]]): CancelableFuture[B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: CancelableFuture[CancelableFuture[A]]): CancelableFuture[A]", "member" : "cats.FlatMap.flatten", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: CancelableFuture[Boolean])(ifTrue: CancelableFuture[A], ifFalse: CancelableFuture[A]): CancelableFuture[A]", "member" : "cats.Apply.ifA", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]CancelableFuture[G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: CancelableFuture[A], fb: Eval[CancelableFuture[B]])(f: (A, B) => Z): Eval[CancelableFuture[Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: CancelableFuture[A])(fb: CancelableFuture[B]): CancelableFuture[A]", "member" : "cats.Apply.<*", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: CancelableFuture[A])(fb: CancelableFuture[B]): CancelableFuture[B]", "member" : "cats.Apply.*>", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: CancelableFuture[(A) => B])(fa: CancelableFuture[A]): CancelableFuture[B]", "member" : "cats.Apply.<*>", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19], f20: CancelableFuture[A20], f21: CancelableFuture[A21]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19], f20: CancelableFuture[A20], f21: CancelableFuture[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19], f20: CancelableFuture[A20], f21: CancelableFuture[A21]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19], f20: CancelableFuture[A20]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19], f20: CancelableFuture[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19], f20: CancelableFuture[A20]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18], f19: CancelableFuture[A19]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17], f18: CancelableFuture[A18]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16], f17: CancelableFuture[A17]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15], f16: CancelableFuture[A16]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14], f15: CancelableFuture[A15]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13], f14: CancelableFuture[A14]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12], f13: CancelableFuture[A13]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11], f12: CancelableFuture[A12]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10], f11: CancelableFuture[A11]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9], f10: CancelableFuture[A10]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8], f9: CancelableFuture[A9]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7], f8: CancelableFuture[A8]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6], f7: CancelableFuture[A7]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6]): CancelableFuture[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5], f6: CancelableFuture[A6]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5]): CancelableFuture[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4, A5) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4], f5: CancelableFuture[A5]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4]): CancelableFuture[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4])(f: (A0, A1, A2, A3, A4) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3, A4) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3], f4: CancelableFuture[A4]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3]): CancelableFuture[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3])(f: (A0, A1, A2, A3) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: CancelableFuture[(A0, A1, A2, A3) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2], f3: CancelableFuture[A3]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2]): CancelableFuture[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2])(f: (A0, A1, A2) => Z): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: CancelableFuture[(A0, A1, A2) => Z])(f0: CancelableFuture[A0], f1: CancelableFuture[A1], f2: CancelableFuture[A2]): CancelableFuture[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: CancelableFuture[A], f2: CancelableFuture[B]): CancelableFuture[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]CancelableFuture[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]CancelableFuture[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]CancelableFuture[G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: CancelableFuture[Boolean])(ifTrue: => A, ifFalse: => A): CancelableFuture[A]", "member" : "cats.Functor.ifF", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: CancelableFuture[(A, B)]): (CancelableFuture[A], CancelableFuture[B])", "member" : "cats.Functor.unzip", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: CancelableFuture[A], b: B): CancelableFuture[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: CancelableFuture[A], b: B): CancelableFuture[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: CancelableFuture[A], b: B): CancelableFuture[B]", "member" : "cats.Functor.as", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: CancelableFuture[A])(f: (A) => B): CancelableFuture[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: CancelableFuture[A])(f: (A) => B): CancelableFuture[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: CancelableFuture[A]): CancelableFuture[Unit]", "member" : "cats.Functor.void", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (CancelableFuture[A]) => CancelableFuture[B]", "member" : "cats.Functor.lift", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: CancelableFuture[A]): CancelableFuture[B]", "member" : "cats.Functor.widen", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: CancelableFuture[A])(f: (A) => B): CancelableFuture[B]", "member" : "cats.Functor.fmap", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: CancelableFuture[A])(f: (A) => B)(g: (B) => A): CancelableFuture[B]", "member" : "cats.Functor.imap", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]CancelableFuture[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]CancelableFuture[G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelableFutureCatsInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelableFutureCatsInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelableFutureCatsInstances$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/CancelableFutureCatsInstances.html", "kind" : "class"}, {"name" : "monix.execution.CancelablePromise", "shortDescription" : "CancelablePromise is a scala.concurrent.Promise implementation thatallows listeners to unsubscribe from receiving future results.", "object" : "monix\/execution\/CancelablePromise$.html", "members_class" : [{"label" : "tryFailure", "tail" : "(cause: Throwable): Boolean", "member" : "scala.concurrent.Promise.tryFailure", "link" : "monix\/execution\/CancelablePromise.html#tryFailure(cause:Throwable):Boolean", "kind" : "def"}, {"label" : "failure", "tail" : "(cause: Throwable): CancelablePromise.this.type", "member" : "scala.concurrent.Promise.failure", "link" : "monix\/execution\/CancelablePromise.html#failure(cause:Throwable):Promise.this.type", "kind" : "def"}, {"label" : "trySuccess", "tail" : "(value: A): Boolean", "member" : "scala.concurrent.Promise.trySuccess", "link" : "monix\/execution\/CancelablePromise.html#trySuccess(value:T):Boolean", "kind" : "def"}, {"label" : "success", "tail" : "(value: A): CancelablePromise.this.type", "member" : "scala.concurrent.Promise.success", "link" : "monix\/execution\/CancelablePromise.html#success(value:T):Promise.this.type", "kind" : "def"}, {"label" : "tryCompleteWith", "tail" : "(other: Future[A]): CancelablePromise.this.type", "member" : "scala.concurrent.Promise.tryCompleteWith", "link" : "monix\/execution\/CancelablePromise.html#tryCompleteWith(other:scala.concurrent.Future[T]):Promise.this.type", "kind" : "final def"}, {"label" : "completeWith", "tail" : "(other: Future[A]): CancelablePromise.this.type", "member" : "scala.concurrent.Promise.completeWith", "link" : "monix\/execution\/CancelablePromise.html#completeWith(other:scala.concurrent.Future[T]):Promise.this.type", "kind" : "def"}, {"label" : "complete", "tail" : "(result: Try[A]): CancelablePromise.this.type", "member" : "scala.concurrent.Promise.complete", "link" : "monix\/execution\/CancelablePromise.html#complete(result:scala.util.Try[T]):Promise.this.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelablePromise.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelablePromise.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelablePromise.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelablePromise.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelablePromise.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelablePromise.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelablePromise.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelablePromise.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelablePromise.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelablePromise.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelablePromise.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelablePromise.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelablePromise.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelablePromise.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelablePromise.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelablePromise.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelablePromise.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelablePromise.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelablePromise.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(cb: (Try[A]) => Unit): Cancelable", "member" : "monix.execution.CancelablePromise.subscribe", "link" : "monix\/execution\/CancelablePromise.html#subscribe(cb:scala.util.Try[A]=>Unit):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "future", "tail" : "(): CancelableFuture[A]", "member" : "monix.execution.CancelablePromise.future", "link" : "monix\/execution\/CancelablePromise.html#future:monix.execution.CancelableFuture[A]", "kind" : "abstract def"}, {"label" : "tryComplete", "tail" : "(result: Try[A]): Boolean", "member" : "scala.concurrent.Promise.tryComplete", "link" : "monix\/execution\/CancelablePromise.html#tryComplete(result:scala.util.Try[T]):Boolean", "kind" : "abstract def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "scala.concurrent.Promise.isCompleted", "link" : "monix\/execution\/CancelablePromise.html#isCompleted:Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "failed", "tail" : "(e: Throwable): CancelablePromise[A]", "member" : "monix.execution.CancelablePromise.failed", "link" : "monix\/execution\/CancelablePromise$.html#failed[A](e:Throwable):monix.execution.CancelablePromise[A]", "kind" : "def"}, {"label" : "successful", "tail" : "(value: A): CancelablePromise[A]", "member" : "monix.execution.CancelablePromise.successful", "link" : "monix\/execution\/CancelablePromise$.html#successful[A](value:A):monix.execution.CancelablePromise[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: Try[A]): CancelablePromise[A]", "member" : "monix.execution.CancelablePromise.fromTry", "link" : "monix\/execution\/CancelablePromise$.html#fromTry[A](value:scala.util.Try[A]):monix.execution.CancelablePromise[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ps: PaddingStrategy): CancelablePromise[A]", "member" : "monix.execution.CancelablePromise.apply", "link" : "monix\/execution\/CancelablePromise$.html#apply[A](ps:monix.execution.atomic.PaddingStrategy):monix.execution.CancelablePromise[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/CancelablePromise$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/CancelablePromise$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/CancelablePromise$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/CancelablePromise$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/CancelablePromise$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/CancelablePromise$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/CancelablePromise$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelablePromise$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelablePromise$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/CancelablePromise$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/CancelablePromise$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/CancelablePromise$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/CancelablePromise$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/CancelablePromise$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/CancelablePromise$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/CancelablePromise$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/CancelablePromise$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/CancelablePromise$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/CancelablePromise$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/CancelablePromise.html", "kind" : "class"}, {"name" : "monix.execution.ChannelType", "shortDescription" : "An enumeration of all types", "object" : "monix\/execution\/ChannelType$.html", "members_class" : [{"label" : "value", "tail" : ": String", "member" : "monix.execution.ChannelType.value", "link" : "monix\/execution\/ChannelType.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/ChannelType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/ChannelType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/ChannelType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/ChannelType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/ChannelType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/ChannelType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/ChannelType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ChannelType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ChannelType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ChannelType.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/ChannelType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/ChannelType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/ChannelType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/ChannelType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/ChannelType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/ChannelType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/ChannelType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/ChannelType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/ChannelType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "consumerType", "tail" : "(): ConsumerSide", "member" : "monix.execution.ChannelType.consumerType", "link" : "monix\/execution\/ChannelType.html#consumerType:monix.execution.ChannelType.ConsumerSide", "kind" : "abstract def"}, {"label" : "producerType", "tail" : "(): ProducerSide", "member" : "monix.execution.ChannelType.producerType", "link" : "monix\/execution\/ChannelType.html#producerType:monix.execution.ChannelType.ProducerSide", "kind" : "abstract def"}], "members_object" : [{"label" : "SingleConsumer", "tail" : "", "member" : "monix.execution.ChannelType.SingleConsumer", "link" : "monix\/execution\/ChannelType$.html#SingleConsumer", "kind" : "case object"}, {"label" : "MultiConsumer", "tail" : "", "member" : "monix.execution.ChannelType.MultiConsumer", "link" : "monix\/execution\/ChannelType$.html#MultiConsumer", "kind" : "case object"}, {"label" : "ConsumerSide", "tail" : "", "member" : "monix.execution.ChannelType.ConsumerSide", "link" : "monix\/execution\/ChannelType$.html#ConsumerSideextendsSerializable", "kind" : "sealed abstract class"}, {"label" : "SingleProducer", "tail" : "", "member" : "monix.execution.ChannelType.SingleProducer", "link" : "monix\/execution\/ChannelType$.html#SingleProducer", "kind" : "case object"}, {"label" : "MultiProducer", "tail" : "", "member" : "monix.execution.ChannelType.MultiProducer", "link" : "monix\/execution\/ChannelType$.html#MultiProducer", "kind" : "case object"}, {"label" : "ProducerSide", "tail" : "", "member" : "monix.execution.ChannelType.ProducerSide", "link" : "monix\/execution\/ChannelType$.html#ProducerSideextendsSerializable", "kind" : "sealed abstract class"}, {"label" : "SPSC", "tail" : "", "member" : "monix.execution.ChannelType.SPSC", "link" : "monix\/execution\/ChannelType$.html#SPSC", "kind" : "case object"}, {"label" : "SPMC", "tail" : "", "member" : "monix.execution.ChannelType.SPMC", "link" : "monix\/execution\/ChannelType$.html#SPMC", "kind" : "case object"}, {"label" : "MPSC", "tail" : "", "member" : "monix.execution.ChannelType.MPSC", "link" : "monix\/execution\/ChannelType$.html#MPSC", "kind" : "case object"}, {"label" : "MPMC", "tail" : "", "member" : "monix.execution.ChannelType.MPMC", "link" : "monix\/execution\/ChannelType$.html#MPMC", "kind" : "case object"}, {"label" : "assemble", "tail" : "(p: ProducerSide, c: ConsumerSide): ChannelType", "member" : "monix.execution.ChannelType.assemble", "link" : "monix\/execution\/ChannelType$.html#assemble(p:monix.execution.ChannelType.ProducerSide,c:monix.execution.ChannelType.ConsumerSide):monix.execution.ChannelType", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String): Option[ChannelType]", "member" : "monix.execution.ChannelType.apply", "link" : "monix\/execution\/ChannelType$.html#apply(id:String):Option[monix.execution.ChannelType]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/ChannelType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/ChannelType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/ChannelType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/ChannelType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/ChannelType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/ChannelType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/ChannelType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ChannelType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ChannelType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ChannelType$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/ChannelType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/ChannelType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/ChannelType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/ChannelType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/ChannelType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/ChannelType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/ChannelType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/ChannelType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/ChannelType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/ChannelType.html", "kind" : "class"}, {"name" : "monix.execution.compat", "shortDescription" : "", "object" : "monix\/execution\/compat$.html", "members_object" : [{"label" : "BuildFrom", "tail" : "", "member" : "monix.execution.compat.BuildFrom", "link" : "monix\/execution\/compat$.html#BuildFrom[-From,-A,+C]=scala.collection.BuildFrom[From,A,C]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/compat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/compat$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/compat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/compat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/compat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/compat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/compat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/compat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/compat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/compat$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/compat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/compat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/compat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/compat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/compat$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/compat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/compat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/compat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/compat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.execution.ExecutionModel", "shortDescription" : "Specification for run-loops, imposed by the Scheduler.", "object" : "monix\/execution\/ExecutionModel$.html", "members_class" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/execution\/ExecutionModel.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "monix\/execution\/ExecutionModel.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "monix\/execution\/ExecutionModel.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "monix\/execution\/ExecutionModel.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/ExecutionModel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/ExecutionModel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/ExecutionModel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/ExecutionModel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/ExecutionModel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/ExecutionModel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/ExecutionModel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/ExecutionModel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/ExecutionModel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/ExecutionModel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/ExecutionModel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/ExecutionModel.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/ExecutionModel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/ExecutionModel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/ExecutionModel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/ExecutionModel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nextFrameIndex", "tail" : "(current: Int): Int", "member" : "monix.execution.ExecutionModel.nextFrameIndex", "link" : "monix\/execution\/ExecutionModel.html#nextFrameIndex(current:Int):Int", "kind" : "abstract def"}, {"label" : "batchedExecutionModulus", "tail" : ": Int", "member" : "monix.execution.ExecutionModel.batchedExecutionModulus", "link" : "monix\/execution\/ExecutionModel.html#batchedExecutionModulus:Int", "kind" : "abstract val"}, {"label" : "recommendedBatchSize", "tail" : ": Int", "member" : "monix.execution.ExecutionModel.recommendedBatchSize", "link" : "monix\/execution\/ExecutionModel.html#recommendedBatchSize:Int", "kind" : "abstract val"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "monix\/execution\/ExecutionModel.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "monix\/execution\/ExecutionModel.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "monix\/execution\/ExecutionModel.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Default", "tail" : ": ExecutionModel", "member" : "monix.execution.ExecutionModel.Default", "link" : "monix\/execution\/ExecutionModel$.html#Default:monix.execution.ExecutionModel", "kind" : "val"}, {"label" : "Extensions", "tail" : "", "member" : "monix.execution.ExecutionModel.Extensions", "link" : "monix\/execution\/ExecutionModel$.html#ExtensionsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "BatchedExecution", "tail" : "", "member" : "monix.execution.ExecutionModel.BatchedExecution", "link" : "monix\/execution\/ExecutionModel$.html#BatchedExecutionextendsExecutionModelwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AlwaysAsyncExecution", "tail" : "", "member" : "monix.execution.ExecutionModel.AlwaysAsyncExecution", "link" : "monix\/execution\/ExecutionModel$.html#AlwaysAsyncExecution", "kind" : "case object"}, {"label" : "SynchronousExecution", "tail" : "", "member" : "monix.execution.ExecutionModel.SynchronousExecution", "link" : "monix\/execution\/ExecutionModel$.html#SynchronousExecution", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/ExecutionModel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/ExecutionModel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/ExecutionModel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/ExecutionModel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/ExecutionModel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/ExecutionModel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/ExecutionModel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/ExecutionModel$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/ExecutionModel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/ExecutionModel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/ExecutionModel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/ExecutionModel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/ExecutionModel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/ExecutionModel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/ExecutionModel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/ExecutionModel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/ExecutionModel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/ExecutionModel.html", "kind" : "class"}, {"name" : "monix.execution.Features", "shortDescription" : "Features describes a set of features described viabitwise operators applied to ints, but made type safe.", "object" : "monix\/execution\/Features$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.execution.Features.toString", "link" : "monix\/execution\/Features.html#toString():String", "kind" : "def"}, {"label" : "contains", "tail" : "(feature: Flag): Boolean", "member" : "monix.execution.Features.contains", "link" : "monix\/execution\/Features.html#contains(feature:monix.execution.Features.Flag):Boolean", "kind" : "def"}, {"label" : "+", "tail" : "(feature: Flag): Features", "member" : "monix.execution.Features.+", "link" : "monix\/execution\/Features.html#+(feature:monix.execution.Features.Flag):monix.execution.Features", "kind" : "def"}, {"label" : "diff", "tail" : "(other: Features): Features", "member" : "monix.execution.Features.diff", "link" : "monix\/execution\/Features.html#diff(other:monix.execution.Features):monix.execution.Features", "kind" : "def"}, {"label" : "union", "tail" : "(other: Features): Features", "member" : "monix.execution.Features.union", "link" : "monix\/execution\/Features.html#union(other:monix.execution.Features):monix.execution.Features", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Features): Features", "member" : "monix.execution.Features.intersect", "link" : "monix\/execution\/Features.html#intersect(other:monix.execution.Features):monix.execution.Features", "kind" : "def"}, {"member" : "monix.execution.Features#<init>", "error" : "unsupported entity"}, {"label" : "flags", "tail" : ": Flags", "member" : "monix.execution.Features.flags", "link" : "monix\/execution\/Features.html#flags:monix.execution.Features.Flags", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "monix\/execution\/Features.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "monix\/execution\/Features.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Features.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Features.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "monix\/execution\/Features.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "monix\/execution\/Features.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "flag", "tail" : "(value: Long): Flag", "member" : "monix.execution.Features.flag", "link" : "monix\/execution\/Features$.html#flag(value:Long):monix.execution.Features.Flag", "kind" : "def"}, {"label" : "apply", "tail" : "(flags: Flag*): Features", "member" : "monix.execution.Features.apply", "link" : "monix\/execution\/Features$.html#apply(flags:monix.execution.Features.Flag*):monix.execution.Features", "kind" : "def"}, {"label" : "empty", "tail" : ": Features", "member" : "monix.execution.Features.empty", "link" : "monix\/execution\/Features$.html#empty:monix.execution.Features", "kind" : "val"}, {"label" : "Flags", "tail" : "", "member" : "monix.execution.Features.Flags", "link" : "monix\/execution\/Features$.html#Flags=monix.execution.compat.Features.Flags", "kind" : "type"}, {"label" : "Flag", "tail" : "", "member" : "monix.execution.Features.Flag", "link" : "monix\/execution\/Features$.html#Flag=monix.execution.compat.Features.Flag", "kind" : "type"}, {"label" : "FlagsTag", "tail" : "", "member" : "monix.execution.Features.FlagsTag", "link" : "monix\/execution\/Features$.html#FlagsTagextendsAny", "kind" : "trait"}, {"label" : "FlagTag", "tail" : "", "member" : "monix.execution.Features.FlagTag", "link" : "monix\/execution\/Features$.html#FlagTagextendsAny", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Features$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Features$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Features$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Features$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Features$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Features$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Features$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Features$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Features$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Features$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Features$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Features$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Features$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Features$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Features$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Features$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Features$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Features$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Features$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/execution\/Features.html", "kind" : "class"}, {"name" : "monix.execution.FutureUtils", "shortDescription" : "Utilities for Scala's standard concurrent.Future.", "object" : "monix\/execution\/FutureUtils$.html", "members_object" : [{"label" : "Java8Extensions", "tail" : "", "member" : "monix.execution.internal.FutureUtilsForPlatform.Java8Extensions", "link" : "monix\/execution\/FutureUtils$.html#Java8Extensions[F[T]<:scala.concurrent.Future[T],A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "extensions", "tail" : "", "member" : "monix.execution.FutureUtils.extensions", "link" : "monix\/execution\/FutureUtils$.html#extensions", "kind" : "object"}, {"label" : "delayedResult", "tail" : "(delay: FiniteDuration)(result: => A)(s: Scheduler): Future[A]", "member" : "monix.execution.FutureUtils.delayedResult", "link" : "monix\/execution\/FutureUtils$.html#delayedResult[A](delay:scala.concurrent.duration.FiniteDuration)(result:=>A)(implicits:monix.execution.Scheduler):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "dematerialize", "tail" : "(source: Future[Try[A]])(ec: ExecutionContext): Future[A]", "member" : "monix.execution.FutureUtils.dematerialize", "link" : "monix\/execution\/FutureUtils$.html#dematerialize[A](source:scala.concurrent.Future[scala.util.Try[A]])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "transformWith", "tail" : "(source: Future[A], f: (Try[A]) => Future[B])(ec: ExecutionContext): Future[B]", "member" : "monix.execution.FutureUtils.transformWith", "link" : "monix\/execution\/FutureUtils$.html#transformWith[A,B](source:scala.concurrent.Future[A],f:scala.util.Try[A]=>scala.concurrent.Future[B])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[B]", "kind" : "def"}, {"label" : "transform", "tail" : "(source: Future[A], f: (Try[A]) => Try[B])(ec: ExecutionContext): Future[B]", "member" : "monix.execution.FutureUtils.transform", "link" : "monix\/execution\/FutureUtils$.html#transform[A,B](source:scala.concurrent.Future[A],f:scala.util.Try[A]=>scala.util.Try[B])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[B]", "kind" : "def"}, {"label" : "materialize", "tail" : "(source: Future[A])(ec: ExecutionContext): Future[Try[A]]", "member" : "monix.execution.FutureUtils.materialize", "link" : "monix\/execution\/FutureUtils$.html#materialize[A](source:scala.concurrent.Future[A])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[scala.util.Try[A]]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(source: Future[A], atMost: FiniteDuration, fallback: => Future[A])(s: Scheduler): Future[A]", "member" : "monix.execution.FutureUtils.timeoutTo", "link" : "monix\/execution\/FutureUtils$.html#timeoutTo[A](source:scala.concurrent.Future[A],atMost:scala.concurrent.duration.FiniteDuration,fallback:=>scala.concurrent.Future[A])(implicits:monix.execution.Scheduler):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "timeout", "tail" : "(source: Future[A], atMost: FiniteDuration)(s: Scheduler): Future[A]", "member" : "monix.execution.FutureUtils.timeout", "link" : "monix\/execution\/FutureUtils$.html#timeout[A](source:scala.concurrent.Future[A],atMost:scala.concurrent.duration.FiniteDuration)(implicits:monix.execution.Scheduler):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "fromJavaCompletable", "tail" : "(cfa: CompletableFuture[A])(ec: ExecutionContext): Future[A]", "member" : "monix.execution.internal.FutureUtilsForPlatform.fromJavaCompletable", "link" : "monix\/execution\/FutureUtils$.html#fromJavaCompletable[A](cfa:java.util.concurrent.CompletableFuture[A])(implicitec:scala.concurrent.ExecutionContext):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "toJavaCompletable", "tail" : "(source: Future[A])(ec: ExecutionContext): CompletableFuture[A]", "member" : "monix.execution.internal.FutureUtilsForPlatform.toJavaCompletable", "link" : "monix\/execution\/FutureUtils$.html#toJavaCompletable[A](source:scala.concurrent.Future[A])(implicitec:scala.concurrent.ExecutionContext):java.util.concurrent.CompletableFuture[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/FutureUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/FutureUtils$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/FutureUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/FutureUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/FutureUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/FutureUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/FutureUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/FutureUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/FutureUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/FutureUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/FutureUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/FutureUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/FutureUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/FutureUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/FutureUtils$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/FutureUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/FutureUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/FutureUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/FutureUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.execution.Scheduler", "object" : "monix\/execution\/Scheduler$.html", "members_object" : [{"label" : "Implicits", "tail" : "", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.Implicits", "link" : "monix\/execution\/Scheduler$.html#Implicits", "kind" : "object"}, {"label" : "ImplicitsLike", "tail" : "", "member" : "monix.execution.SchedulerCompanion.ImplicitsLike", "link" : "monix\/execution\/Scheduler$.html#ImplicitsLikeextendsAnyRef", "kind" : "trait"}, {"label" : "Extensions", "tail" : "", "member" : "monix.execution.Scheduler.Extensions", "link" : "monix\/execution\/Scheduler$.html#ExtensionsextendsAnyValwithExecuteExtensions", "kind" : "implicit final class"}, {"label" : "TRACING", "tail" : ": Flag", "member" : "monix.execution.Scheduler.TRACING", "link" : "monix\/execution\/Scheduler$.html#TRACING:monix.execution.Features.Flag", "kind" : "val"}, {"label" : "BATCHING", "tail" : ": Flag", "member" : "monix.execution.Scheduler.BATCHING", "link" : "monix\/execution\/Scheduler$.html#BATCHING:monix.execution.Features.Flag", "kind" : "val"}, {"label" : "traced", "tail" : "(): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.traced", "link" : "monix\/execution\/Scheduler$.html#traced:monix.execution.Scheduler", "kind" : "def"}, {"label" : "global", "tail" : "(): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.global", "link" : "monix\/execution\/Scheduler$.html#global:monix.execution.Scheduler", "kind" : "def"}, {"label" : "fixedPool", "tail" : "(name: String, poolSize: Int, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.fixedPool", "link" : "monix\/execution\/Scheduler$.html#fixedPool(name:String,poolSize:Int,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "singleThread", "tail" : "(name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.singleThread", "link" : "monix\/execution\/Scheduler$.html#singleThread(name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "cached", "tail" : "(name: String, minThreads: Int, maxThreads: Int, keepAliveTime: FiniteDuration, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.cached", "link" : "monix\/execution\/Scheduler$.html#cached(name:String,minThreads:Int,maxThreads:Int,keepAliveTime:scala.concurrent.duration.FiniteDuration,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "io", "tail" : "(name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.io", "link" : "monix\/execution\/Scheduler$.html#io(name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "forkJoin", "tail" : "(parallelism: Int, maxThreads: Int, name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.forkJoin", "link" : "monix\/execution\/Scheduler$.html#forkJoin(parallelism:Int,maxThreads:Int,name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "computation", "tail" : "(parallelism: Int, name: String, daemonic: Boolean, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.computation", "link" : "monix\/execution\/Scheduler$.html#computation(parallelism:Int,name:String,daemonic:Boolean,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "trampoline", "tail" : "(underlying: Scheduler, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.trampoline", "link" : "monix\/execution\/Scheduler$.html#trampoline(underlying:monix.execution.Scheduler,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ExecutorService, reporter: UncaughtExceptionReporter): SchedulerService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ExecutorService,reporter:monix.execution.UncaughtExceptionReporter):monix.execution.schedulers.SchedulerService", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(ec: ExecutionContext, reporter: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(ec:scala.concurrent.ExecutionContext,reporter:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ScheduledExecutorService, ec: ExecutionContext): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ScheduledExecutorService,ec:scala.concurrent.ExecutionContext):monix.execution.Scheduler", "kind" : "def"}, {"label" : "apply", "tail" : "(executor: ScheduledExecutorService, ec: ExecutionContext, reporter: UncaughtExceptionReporter, executionModel: ExecutionModel): Scheduler", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.apply", "link" : "monix\/execution\/Scheduler$.html#apply(executor:java.util.concurrent.ScheduledExecutorService,ec:scala.concurrent.ExecutionContext,reporter:monix.execution.UncaughtExceptionReporter,executionModel:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "def"}, {"label" : "DefaultScheduledExecutor", "tail" : ": ScheduledExecutorService", "member" : "monix.execution.schedulers.SchedulerCompanionImpl.DefaultScheduledExecutor", "link" : "monix\/execution\/Scheduler$.html#DefaultScheduledExecutor:java.util.concurrent.ScheduledExecutorService", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Scheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Scheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Scheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Scheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Scheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Scheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Scheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Scheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Scheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Scheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Scheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Scheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Scheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Scheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Scheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Scheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/Scheduler.html", "kind" : "trait", "members_trait" : [{"label" : "executeTrampolined", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeTrampolined", "link" : "monix\/execution\/Scheduler.html#executeTrampolined(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "executeAsyncBatch", "tail" : "(cb: TrampolinedRunnable): Unit", "member" : "monix.execution.Scheduler.executeAsyncBatch", "link" : "monix\/execution\/Scheduler.html#executeAsyncBatch(cb:monix.execution.schedulers.TrampolinedRunnable):Unit", "kind" : "final def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: FiniteDuration, period: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/Scheduler.html#scheduleAtFixedRate(initialDelay:scala.concurrent.duration.FiniteDuration,period:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: FiniteDuration, delay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/Scheduler.html#scheduleWithFixedDelay(initialDelay:scala.concurrent.duration.FiniteDuration,delay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: FiniteDuration)(action: => Unit): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/Scheduler.html#scheduleOnce(initialDelay:scala.concurrent.duration.FiniteDuration)(action:=>Unit):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "features", "tail" : "(): Features", "member" : "monix.execution.Scheduler.features", "link" : "monix\/execution\/Scheduler.html#features:monix.execution.Features", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "monix\/execution\/Scheduler.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/Scheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/Scheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/Scheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/Scheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/Scheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/Scheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/Scheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/Scheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/Scheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/Scheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/Scheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/Scheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/Scheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/Scheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/Scheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/Scheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/Scheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withUncaughtExceptionReporter", "tail" : "(r: UncaughtExceptionReporter): Scheduler", "member" : "monix.execution.Scheduler.withUncaughtExceptionReporter", "link" : "monix\/execution\/Scheduler.html#withUncaughtExceptionReporter(r:monix.execution.UncaughtExceptionReporter):monix.execution.Scheduler", "kind" : "abstract def"}, {"label" : "withExecutionModel", "tail" : "(em: ExecutionModel): Scheduler", "member" : "monix.execution.Scheduler.withExecutionModel", "link" : "monix\/execution\/Scheduler.html#withExecutionModel(em:monix.execution.ExecutionModel):monix.execution.Scheduler", "kind" : "abstract def"}, {"label" : "executionModel", "tail" : "(): ExecutionModel", "member" : "monix.execution.Scheduler.executionModel", "link" : "monix\/execution\/Scheduler.html#executionModel:monix.execution.ExecutionModel", "kind" : "abstract def"}, {"label" : "reportFailure", "tail" : "(t: Throwable): Unit", "member" : "monix.execution.Scheduler.reportFailure", "link" : "monix\/execution\/Scheduler.html#reportFailure(t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "clockMonotonic", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockMonotonic", "link" : "monix\/execution\/Scheduler.html#clockMonotonic(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "clockRealTime", "tail" : "(unit: TimeUnit): Long", "member" : "monix.execution.Scheduler.clockRealTime", "link" : "monix\/execution\/Scheduler.html#clockRealTime(unit:concurrent.duration.TimeUnit):Long", "kind" : "abstract def"}, {"label" : "scheduleAtFixedRate", "tail" : "(initialDelay: Long, period: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleAtFixedRate", "link" : "monix\/execution\/Scheduler.html#scheduleAtFixedRate(initialDelay:Long,period:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleWithFixedDelay", "tail" : "(initialDelay: Long, delay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleWithFixedDelay", "link" : "monix\/execution\/Scheduler.html#scheduleWithFixedDelay(initialDelay:Long,delay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "scheduleOnce", "tail" : "(initialDelay: Long, unit: TimeUnit, r: Runnable): Cancelable", "member" : "monix.execution.Scheduler.scheduleOnce", "link" : "monix\/execution\/Scheduler.html#scheduleOnce(initialDelay:Long,unit:concurrent.duration.TimeUnit,r:Runnable):monix.execution.Cancelable", "kind" : "abstract def"}, {"label" : "execute", "tail" : "(command: Runnable): Unit", "member" : "monix.execution.Scheduler.execute", "link" : "monix\/execution\/Scheduler.html#execute(command:Runnable):Unit", "kind" : "abstract def"}], "shortDescription" : "A Scheduler is an scala.concurrent.ExecutionContext that additionally canschedule the execution of units of work to run with a delay or periodically."}, {"name" : "monix.execution.UncaughtExceptionReporter", "object" : "monix\/execution\/UncaughtExceptionReporter$.html", "members_object" : [{"label" : "Extensions", "tail" : "", "member" : "monix.execution.UncaughtExceptionReporter.Extensions", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#ExtensionsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "LogExceptionsToStandardErr", "tail" : ": UncaughtExceptionReporter", "member" : "monix.execution.UncaughtExceptionReporter.LogExceptionsToStandardErr", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#LogExceptionsToStandardErr:monix.execution.UncaughtExceptionReporter", "kind" : "val"}, {"label" : "default", "tail" : ": UncaughtExceptionReporter", "member" : "monix.execution.UncaughtExceptionReporter.default", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#default:monix.execution.UncaughtExceptionReporter", "kind" : "val"}, {"label" : "apply", "tail" : "(reporter: (Throwable) => Unit): UncaughtExceptionReporter", "member" : "monix.execution.UncaughtExceptionReporter.apply", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#apply(reporter:Throwable=>Unit):monix.execution.UncaughtExceptionReporter", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/UncaughtExceptionReporter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/execution\/UncaughtExceptionReporter.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/execution\/UncaughtExceptionReporter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/execution\/UncaughtExceptionReporter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/execution\/UncaughtExceptionReporter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/execution\/UncaughtExceptionReporter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/execution\/UncaughtExceptionReporter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/execution\/UncaughtExceptionReporter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/execution\/UncaughtExceptionReporter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/execution\/UncaughtExceptionReporter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/execution\/UncaughtExceptionReporter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/execution\/UncaughtExceptionReporter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/execution\/UncaughtExceptionReporter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/execution\/UncaughtExceptionReporter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/execution\/UncaughtExceptionReporter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/execution\/UncaughtExceptionReporter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/execution\/UncaughtExceptionReporter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/execution\/UncaughtExceptionReporter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reportFailure", "tail" : "(ex: Throwable): Unit", "member" : "monix.execution.UncaughtExceptionReporter.reportFailure", "link" : "monix\/execution\/UncaughtExceptionReporter.html#reportFailure(ex:Throwable):Unit", "kind" : "abstract def"}], "shortDescription" : "An exception reporter is a function that logs an uncaught error."}], "monix.reactive.subjects" : [{"name" : "monix.reactive.subjects.AsyncSubject", "shortDescription" : "An AsyncSubject emits the last value (and only the last value) emitted bythe source and only after the source completes.", "object" : "monix\/reactive\/subjects\/AsyncSubject$.html", "members_class" : [{"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.AsyncSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.AsyncSubject.onComplete", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.AsyncSubject.onError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Ack", "member" : "monix.reactive.subjects.AsyncSubject.onNext", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onNext(elem:A):monix.execution.Ack", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.AsyncSubject.size", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#size:Int", "kind" : "def"}, {"member" : "monix.reactive.subjects.AsyncSubject#<init>", "error" : "unsupported entity"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/AsyncSubject.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): AsyncSubject[A]", "member" : "monix.reactive.subjects.AsyncSubject.apply", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#apply[A]():monix.reactive.subjects.AsyncSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/AsyncSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/AsyncSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.BehaviorSubject", "shortDescription" : "BehaviorSubject when subscribed, will emit the most recently emitted item by the source,or the initialValue (as the seed) in case no value has yet been emitted, then continuingto emit events subsequent to the time of invocation.", "object" : "monix\/reactive\/subjects\/BehaviorSubject$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.BehaviorSubject.onComplete", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.BehaviorSubject.onError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.BehaviorSubject.onNext", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.BehaviorSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.BehaviorSubject.size", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#size:Int", "kind" : "def"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initialValue: A): BehaviorSubject[A]", "member" : "monix.reactive.subjects.BehaviorSubject.apply", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#apply[A](initialValue:A):monix.reactive.subjects.BehaviorSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/BehaviorSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/BehaviorSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.ConcurrentSubject", "shortDescription" : "A concurrent subject is meant for imperative style feeding of events.", "object" : "monix\/reactive\/subjects\/ConcurrentSubject$.html", "members_class" : [{"member" : "monix.reactive.subjects.ConcurrentSubject#<init>", "error" : "unsupported entity"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "transform", "tail" : "(transformer: Transformer[O, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (O) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[O]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (O) => K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (O) => K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (O) => K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (O) => K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, O) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, O) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[O]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (O) => F[Boolean])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (O) => Task[Boolean]): Observable[O]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (O) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (O) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, O) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, O) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (O) => Boolean): Task[Option[O]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(O, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (O, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (O, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (O, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (O, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (O, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (O, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (O, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (O) => S)(aggregate: (S, O) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[O]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[O]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[O]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[O]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[O]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (O) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (O) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, O) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, O) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, O) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, O) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, O) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, O) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, O) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[O]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[O]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[O]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (O) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (O) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[O]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (O) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (O) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (O) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (O) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (O) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (O) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (O) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, O]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (O) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (O) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (O) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (O) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (O) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[O]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[O]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (O, Int) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (O) => F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (O) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (O, Ack) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (O, Ack) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (O) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (O) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (O) => K)(K: Eq[K]): Observable[O]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[O, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[O]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (O) => Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (O, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[O, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[O, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (O) => Observable[B])(release: (O, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (O) => Observable[B])(release: (O, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (O) => Observable[B])(release: (O) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (O) => Observable[B])(release: (O) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[O]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (O) => Boolean): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (O) => Boolean): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[O, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[O, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[O, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (O) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onNext", "tail" : "(elem: I): Ack", "member" : "monix.reactive.Observer.Sync.onNext", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onNext(elem:A):monix.execution.Ack", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.Subject.size", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#size:Int", "kind" : "abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ConcurrentSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "toReactiveProcessor", "tail" : "(source: ConcurrentSubject[I, O], bufferSize: Int)(s: Scheduler): Processor[I, O]", "member" : "monix.reactive.subjects.ConcurrentSubject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#toReactiveProcessor[I,O](source:monix.reactive.subjects.ConcurrentSubject[I,O],bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,O]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A], strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int,initial:Seq[A],strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int, initial: Seq[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int,initial:Seq[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int, strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int,strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replayLimited", "tail" : "(capacity: Int)(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replayLimited", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replayLimited[A](capacity:Int)(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(initial: Seq[A], strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](initial:Seq[A],strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(initial: Seq[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](initial:Seq[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.replay", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#replay[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "async", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.async", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#async[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "behavior", "tail" : "(initial: A, strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.behavior", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#behavior[A](initial:A,strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "behavior", "tail" : "(initial: A)(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.behavior", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#behavior[A](initial:A)(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publishToOne", "tail" : "(strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publishToOne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publishToOne[A](strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publishToOne", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publishToOne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publishToOne[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publish", "tail" : "(strategy: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publish", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publish[A](strategy:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.publish", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#publish[A](implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "from", "tail" : "(p: Subject[I, O], overflowStrategy: Synchronous[I], producerType: ProducerSide)(s: Scheduler): ConcurrentSubject[I, O]", "member" : "monix.reactive.subjects.ConcurrentSubject.from", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#from[I,O](p:monix.reactive.subjects.Subject[I,O],overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[I],producerType:monix.execution.ChannelType.ProducerSide)(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[I,O]", "kind" : "def"}, {"label" : "apply", "tail" : "(multicast: MulticastStrategy[A], overflow: Synchronous[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.apply", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#apply[A](multicast:monix.reactive.MulticastStrategy[A],overflow:monix.reactive.OverflowStrategy.Synchronous[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(multicast: MulticastStrategy[A])(s: Scheduler): ConcurrentSubject[A, A]", "member" : "monix.reactive.subjects.ConcurrentSubject.apply", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#apply[A](multicast:monix.reactive.MulticastStrategy[A])(implicits:monix.execution.Scheduler):monix.reactive.subjects.ConcurrentSubject[A,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ConcurrentSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/ConcurrentSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.PublishSubject", "shortDescription" : "A PublishSubject emits to a subscriber only those items that areemitted by the source subsequent to the time of the subscription.", "object" : "monix\/reactive\/subjects\/PublishSubject$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.PublishSubject.onComplete", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.PublishSubject.onError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.PublishSubject.onNext", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.PublishSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.PublishSubject.size", "link" : "monix\/reactive\/subjects\/PublishSubject.html#size:Int", "kind" : "def"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/PublishSubject.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/PublishSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/PublishSubject.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/PublishSubject.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/PublishSubject.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/PublishSubject.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/PublishSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/PublishSubject.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/PublishSubject.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/PublishSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/PublishSubject.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/PublishSubject.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/PublishSubject.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/PublishSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/PublishSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/PublishSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/PublishSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/PublishSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/PublishSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/PublishSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/PublishSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/PublishSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/PublishSubject.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/PublishSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/PublishSubject.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/PublishSubject.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/PublishSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/PublishSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/PublishSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/PublishSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/PublishSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/PublishSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/PublishSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/PublishSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/PublishSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/PublishSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/PublishSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/PublishSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/PublishSubject.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/PublishSubject.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/PublishSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/PublishSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/PublishSubject.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/PublishSubject.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/PublishSubject.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/PublishSubject.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/PublishSubject.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/PublishSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/PublishSubject.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/PublishSubject.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/PublishSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/PublishSubject.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/PublishSubject.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/PublishSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/PublishSubject.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/PublishSubject.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/PublishSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/PublishSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/PublishSubject.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/PublishSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/PublishSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/PublishSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/PublishSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/PublishSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/PublishSubject.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/PublishSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/PublishSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/PublishSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/PublishSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/PublishSubject.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/PublishSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/PublishSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/PublishSubject.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/PublishSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/PublishSubject.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/PublishSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/PublishSubject.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/PublishSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/PublishSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/PublishSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/PublishSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/PublishSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/PublishSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/PublishSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/PublishSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishSubject.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishSubject.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): PublishSubject[A]", "member" : "monix.reactive.subjects.PublishSubject.apply", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#apply[A]():monix.reactive.subjects.PublishSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishSubject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/PublishSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.PublishToOneSubject", "shortDescription" : "PublishToOneSubject is a monix.reactive.subjects.PublishSubjectthat can be subscribed at most once.", "object" : "monix\/reactive\/subjects\/PublishToOneSubject$.html", "members_class" : [{"label" : "cancel", "tail" : "(): Unit", "member" : "monix.reactive.subjects.PublishToOneSubject.cancel", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#cancel():Unit", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "monix.reactive.subjects.PublishToOneSubject.isCanceled", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.PublishToOneSubject.onComplete", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.PublishToOneSubject.onError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.PublishToOneSubject.onNext", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.PublishToOneSubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.PublishToOneSubject.size", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#size:Int", "kind" : "def"}, {"label" : "subscription", "tail" : ": Future[Ack]", "member" : "monix.reactive.subjects.PublishToOneSubject.subscription", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscription:scala.concurrent.Future[monix.execution.Ack]", "kind" : "val"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): PublishToOneSubject[A]", "member" : "monix.reactive.subjects.PublishToOneSubject.apply", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#apply[A]():monix.reactive.subjects.PublishToOneSubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/PublishToOneSubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/PublishToOneSubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.ReplaySubject", "shortDescription" : "ReplaySubject emits to any observer all of the items that were emittedby the source, regardless of when the observer subscribes.", "object" : "monix\/reactive\/subjects\/ReplaySubject$.html", "members_class" : [{"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.subjects.ReplaySubject.onComplete", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onComplete():Unit", "kind" : "def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.subjects.ReplaySubject.onError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onError(ex:Throwable):Unit", "kind" : "def"}, {"label" : "onNext", "tail" : "(elem: A): Future[Ack]", "member" : "monix.reactive.subjects.ReplaySubject.onNext", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.ReplaySubject.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.ReplaySubject.size", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#size:Int", "kind" : "def"}, {"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[A, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ReplaySubject.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "createLimited", "tail" : "(capacity: Int, initial: Seq[A]): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.createLimited", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#createLimited[A](capacity:Int,initial:Seq[A]):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "createLimited", "tail" : "(capacity: Int): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.createLimited", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#createLimited[A](capacity:Int):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "create", "tail" : "(initial: Seq[A]): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.create", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#create[A](initial:Seq[A]):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: A*): ReplaySubject[A]", "member" : "monix.reactive.subjects.ReplaySubject.apply", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#apply[A](initial:A*):monix.reactive.subjects.ReplaySubject[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/ReplaySubject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/ReplaySubject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.Subject", "shortDescription" : "A Subject is a sort of bridge or proxy that acts both as anObserver and as an Observable and that must respectthe contract of both.", "object" : "monix\/reactive\/subjects\/Subject$.html", "members_class" : [{"label" : "toReactiveProcessor", "tail" : "(bufferSize: Int)(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/Subject.html#toReactiveProcessor[U>:O](bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"label" : "toReactiveProcessor", "tail" : "(s: Scheduler): Processor[I, U]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/Subject.html#toReactiveProcessor[U>:O](implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,U]", "kind" : "final def"}, {"member" : "monix.reactive.subjects.Subject#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : "(transformer: Transformer[O, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/Subject.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (O) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/Subject.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/Subject.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[O]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/Subject.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/Subject.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/Subject.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/Subject.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/Subject.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (O) => K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/Subject.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (O) => K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/Subject.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/Subject.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/Subject.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (O) => K)(K: Order[K]): Observable[O]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/Subject.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (O) => K)(K: Order[K]): Task[Option[O]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/Subject.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/Subject.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/Subject.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/Subject.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/Subject.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/Subject.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/Subject.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/Subject.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/Subject.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/Subject.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/Subject.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, O) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/Subject.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, O) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/Subject.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[O]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/Subject.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/Subject.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (O) => F[Boolean])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/Subject.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (O) => Task[Boolean]): Observable[O]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/Subject.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/Subject.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/Subject.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/Subject.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (O) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/Subject.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (O) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/Subject.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/Subject.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/Subject.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[O]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/Subject.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, O) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/Subject.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, O) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/Subject.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/Subject.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/Subject.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (O) => Boolean): Task[Option[O]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/Subject.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/Subject.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/Subject.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/Subject.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/Subject.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[O]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/Subject.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/Subject.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Subject.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Subject.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(O, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/Subject.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (O, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/Subject.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/Subject.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (O, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (O, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (O, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (O, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (O, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (O, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/Subject.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (O) => S)(aggregate: (S, O) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/Subject.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/Subject.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/Subject.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/Subject.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/Subject.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/Subject.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/Subject.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/Subject.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/Subject.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/Subject.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[O]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/Subject.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/Subject.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/Subject.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[O]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/Subject.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[O]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/Subject.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/Subject.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/Subject.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/Subject.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[O]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/Subject.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/Subject.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/Subject.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/Subject.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[O]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/Subject.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/Subject.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/Subject.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/Subject.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/Subject.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/Subject.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (O) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/Subject.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (O) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/Subject.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, O) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/Subject.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, O) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/Subject.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, O) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/Subject.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, O) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/Subject.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, O) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/Subject.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, O) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/Subject.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, O) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/Subject.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/Subject.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/Subject.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/Subject.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/Subject.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/Subject.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/Subject.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[O]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/Subject.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/Subject.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[O]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/Subject.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/Subject.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Subject.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Subject.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[O]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/Subject.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/Subject.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[O]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/Subject.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (O) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (O) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/Subject.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[O, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/Subject.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[O]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/Subject.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (O) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/Subject.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (O) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/Subject.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (O) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/Subject.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (O) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/Subject.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (O) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/Subject.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (O) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/Subject.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/Subject.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/Subject.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/Subject.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/Subject.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/Subject.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/Subject.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/Subject.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/Subject.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (O) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, O]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/Subject.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (O) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/Subject.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (O) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/Subject.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/Subject.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/Subject.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/Subject.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[O, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/Subject.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/Subject.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, O) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/Subject.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/Subject.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Subject.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/Subject.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/Subject.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (O) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/Subject.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (O) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/Subject.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (O) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/Subject.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/Subject.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/Subject.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/Subject.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[O]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/Subject.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/Subject.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/Subject.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/Subject.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/Subject.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/Subject.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[O]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/Subject.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (O, Int) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/Subject.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/Subject.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (O) => Boolean): Observable[O]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/Subject.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[O]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/Subject.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[O]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/Subject.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/Subject.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/Subject.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/Subject.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/Subject.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (O) => F[Unit])(F: Effect[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (O) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/Subject.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (O, Ack) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (O, Ack) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (O) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (O) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/Subject.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/Subject.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/Subject.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/Subject.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/Subject.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[O]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/Subject.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (O) => K)(K: Eq[K]): Observable[O]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/Subject.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/Subject.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[O, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/Subject.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[O]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/Subject.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/Subject.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (O) => Observable[B]): Observable[O]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/Subject.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/Subject.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/Subject.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/Subject.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/Subject.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/Subject.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[O]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/Subject.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (O) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/Subject.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/Subject.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (O, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/Subject.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(O, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/Subject.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[O, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/Subject.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[O, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/Subject.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (O) => Observable[B])(release: (O, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/Subject.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (O) => Observable[B])(release: (O, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/Subject.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (O) => Observable[B])(release: (O) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/Subject.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (O) => Observable[B])(release: (O) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/Subject.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[O]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/Subject.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Subject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Subject.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (O) => Boolean): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/Subject.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (O) => Boolean): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/Subject.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/Subject.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[O]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/Subject.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/Subject.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/Subject.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/Subject.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/Subject.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/Subject.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[O, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/Subject.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[O, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/Subject.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[O, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/Subject.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (O) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/Subject.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/Subject.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[O]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/Subject.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/Subject.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/Subject.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Subject.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Subject.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/Subject.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Subject.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[O]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Subject.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[O]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/Subject.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[O]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/Subject.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/Subject.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (O) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Subject.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[O])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Subject.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Subject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Subject.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Subject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Subject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Subject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Subject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Subject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Subject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Subject.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Subject.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Subject.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Subject.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Subject.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Subject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Subject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Subject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "monix.reactive.subjects.Subject.size", "link" : "monix\/reactive\/subjects\/Subject.html#size:Int", "kind" : "abstract def"}, {"label" : "onComplete", "tail" : "(): Unit", "member" : "monix.reactive.Observer.onComplete", "link" : "monix\/reactive\/subjects\/Subject.html#onComplete():Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(ex: Throwable): Unit", "member" : "monix.reactive.Observer.onError", "link" : "monix\/reactive\/subjects\/Subject.html#onError(ex:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onNext", "tail" : "(elem: I): Future[Ack]", "member" : "monix.reactive.Observer.onNext", "link" : "monix\/reactive\/subjects\/Subject.html#onNext(elem:A):scala.concurrent.Future[monix.execution.Ack]", "kind" : "abstract def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[O]): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Subject.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "abstract def"}], "members_object" : [{"label" : "catsProfunctor", "tail" : ": Profunctor[Subject]", "member" : "monix.reactive.subjects.Subject.catsProfunctor", "link" : "monix\/reactive\/subjects\/Subject$.html#catsProfunctor:cats.arrow.Profunctor[monix.reactive.subjects.Subject]", "kind" : "implicit val"}, {"label" : "toReactiveProcessor", "tail" : "(source: Subject[I, O], bufferSize: Int)(s: Scheduler): Processor[I, O]", "member" : "monix.reactive.subjects.Subject.toReactiveProcessor", "link" : "monix\/reactive\/subjects\/Subject$.html#toReactiveProcessor[I,O](source:monix.reactive.subjects.Subject[I,O],bufferSize:Int)(implicits:monix.execution.Scheduler):org.reactivestreams.Processor[I,O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Subject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Subject$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Subject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Subject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Subject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Subject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Subject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Subject$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Subject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Subject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Subject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Subject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Subject$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Subject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Subject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Subject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Subject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/Subject.html", "kind" : "class"}, {"name" : "monix.reactive.subjects.Var", "shortDescription" : "Var when subscribed, will emit the most recently emitted item by the source,or the initial (as the seed) in case no value has yet been emitted, then continuingto emit events subsequent to the time of invocation via an underlying ConcurrentSubject.", "object" : "monix\/reactive\/subjects\/Var$.html", "members_class" : [{"label" : ":=", "tail" : "(update: A): Ack", "member" : "monix.reactive.subjects.Var.:=", "link" : "monix\/reactive\/subjects\/Var.html#:=(update:A):monix.execution.Ack", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.reactive.subjects.Var.apply", "link" : "monix\/reactive\/subjects\/Var.html#apply():A", "kind" : "def"}, {"label" : "unsafeSubscribeFn", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.subjects.Var.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Var.html#unsafeSubscribeFn(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "def"}, {"label" : "transform", "tail" : "(transformer: Transformer[A, B]): Observable[B]", "member" : "monix.reactive.Observable.transform", "link" : "monix\/reactive\/subjects\/Var.html#transform[B](transformer:monix.reactive.Observable.Transformer[A,B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "foreachL", "tail" : "(cb: (A) => Unit): Task[Unit]", "member" : "monix.reactive.Observable.foreachL", "link" : "monix\/reactive\/subjects\/Var.html#foreachL(cb:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.uncancelable", "link" : "monix\/reactive\/subjects\/Var.html#uncancelable:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "toListL", "tail" : "(): Task[List[A]]", "member" : "monix.reactive.Observable.toListL", "link" : "monix\/reactive\/subjects\/Var.html#toListL:monix.eval.Task[List[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Numeric[AA]): Observable[AA]", "member" : "monix.reactive.Observable.sum", "link" : "monix\/reactive\/subjects\/Var.html#sum[AA>:A](implicitA:Numeric[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "sumL", "tail" : "(B: Numeric[B]): Task[B]", "member" : "monix.reactive.Observable.sumL", "link" : "monix\/reactive\/subjects\/Var.html#sumL[B>:A](implicitB:Numeric[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.nonEmpty", "link" : "monix\/reactive\/subjects\/Var.html#nonEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "nonEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.nonEmptyL", "link" : "monix\/reactive\/subjects\/Var.html#nonEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "minBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.minBy", "link" : "monix\/reactive\/subjects\/Var.html#minBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "minByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.minByL", "link" : "monix\/reactive\/subjects\/Var.html#minByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.min", "link" : "monix\/reactive\/subjects\/Var.html#min[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "minL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.minL", "link" : "monix\/reactive\/subjects\/Var.html#minL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(key: (A) => K)(K: Order[K]): Observable[A]", "member" : "monix.reactive.Observable.maxBy", "link" : "monix\/reactive\/subjects\/Var.html#maxBy[K](key:A=>K)(implicitK:cats.Order[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "maxByL", "tail" : "(key: (A) => K)(K: Order[K]): Task[Option[A]]", "member" : "monix.reactive.Observable.maxByL", "link" : "monix\/reactive\/subjects\/Var.html#maxByL[K](key:A=>K)(implicitK:cats.Order[K]):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "firstOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.firstOptionL", "link" : "monix\/reactive\/subjects\/Var.html#firstOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "headOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.headOptionL", "link" : "monix\/reactive\/subjects\/Var.html#headOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Order[AA]): Observable[AA]", "member" : "monix.reactive.Observable.max", "link" : "monix\/reactive\/subjects\/Var.html#max[AA>:A](implicitA:cats.Order[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "maxL", "tail" : "(A: Order[AA]): Task[Option[AA]]", "member" : "monix.reactive.Observable.maxL", "link" : "monix\/reactive\/subjects\/Var.html#maxL[AA>:A](implicitA:cats.Order[AA]):monix.eval.Task[Option[AA]]", "kind" : "final def"}, {"label" : "completedF", "tail" : "(F: TaskLift[F]): F[Unit]", "member" : "monix.reactive.Observable.completedF", "link" : "monix\/reactive\/subjects\/Var.html#completedF[F[_]](implicitF:monix.eval.TaskLift[F]):F[Unit]", "kind" : "final def"}, {"label" : "completedL", "tail" : "(): Task[Unit]", "member" : "monix.reactive.Observable.completedL", "link" : "monix\/reactive\/subjects\/Var.html#completedL:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Observable[Boolean]", "member" : "monix.reactive.Observable.isEmpty", "link" : "monix\/reactive\/subjects\/Var.html#isEmpty:monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "isEmptyL", "tail" : "(): Task[Boolean]", "member" : "monix.reactive.Observable.isEmptyL", "link" : "monix\/reactive\/subjects\/Var.html#isEmptyL:monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "lastL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.lastL", "link" : "monix\/reactive\/subjects\/Var.html#lastL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.headOrElseL", "link" : "monix\/reactive\/subjects\/Var.html#headOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "foldLeftL", "tail" : "(seed: => R)(op: (R, A) => R): Task[R]", "member" : "monix.reactive.Observable.foldLeftL", "link" : "monix\/reactive\/subjects\/Var.html#foldLeftL[R](seed:=>R)(op:(R,A)=>R):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(seed: => R)(op: (R, A) => R): Observable[R]", "member" : "monix.reactive.Observable.foldLeft", "link" : "monix\/reactive\/subjects\/Var.html#foldLeft[R](seed:=>R)(op:(R,A)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.take", "link" : "monix\/reactive\/subjects\/Var.html#take(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.head", "link" : "monix\/reactive\/subjects\/Var.html#head:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEvalF", "tail" : "(p: (A) => F[Boolean])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.filterEvalF", "link" : "monix\/reactive\/subjects\/Var.html#filterEvalF[F[_]](p:A=>F[Boolean])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterEval", "tail" : "(p: (A) => Task[Boolean]): Observable[A]", "member" : "monix.reactive.Observable.filterEval", "link" : "monix\/reactive\/subjects\/Var.html#filterEval(p:A=>monix.eval.Task[Boolean]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filterNot", "link" : "monix\/reactive\/subjects\/Var.html#filterNot(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.withFilter", "link" : "monix\/reactive\/subjects\/Var.html#withFilter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.filter", "link" : "monix\/reactive\/subjects\/Var.html#filter(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "existsL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.existsL", "link" : "monix\/reactive\/subjects\/Var.html#existsL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "forallL", "tail" : "(p: (A) => Boolean): Task[Boolean]", "member" : "monix.reactive.Observable.forallL", "link" : "monix\/reactive\/subjects\/Var.html#forallL(p:A=>Boolean):monix.eval.Task[Boolean]", "kind" : "final def"}, {"label" : "firstOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.firstOrElseL", "link" : "monix\/reactive\/subjects\/Var.html#firstOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "firstL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.firstL", "link" : "monix\/reactive\/subjects\/Var.html#firstL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "headL", "tail" : "(): Task[A]", "member" : "monix.reactive.Observable.headL", "link" : "monix\/reactive\/subjects\/Var.html#headL:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "foldWhileLeftL", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Task[S]", "member" : "monix.reactive.Observable.foldWhileLeftL", "link" : "monix\/reactive\/subjects\/Var.html#foldWhileLeftL[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "foldWhileLeft", "tail" : "(seed: => S)(op: (S, A) => Either[S, S]): Observable[S]", "member" : "monix.reactive.Observable.foldWhileLeft", "link" : "monix\/reactive\/subjects\/Var.html#foldWhileLeft[S](seed:=>S)(op:(S,A)=>Either[S,S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "foldL", "tail" : "(A: Monoid[AA]): Task[AA]", "member" : "monix.reactive.Observable.foldL", "link" : "monix\/reactive\/subjects\/Var.html#foldL[AA>:A](implicitA:cats.Monoid[AA]):monix.eval.Task[AA]", "kind" : "final def"}, {"label" : "fold", "tail" : "(A: Monoid[AA]): Observable[AA]", "member" : "monix.reactive.Observable.fold", "link" : "monix\/reactive\/subjects\/Var.html#fold[AA>:A](implicitA:cats.Monoid[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "findL", "tail" : "(p: (A) => Boolean): Task[Option[A]]", "member" : "monix.reactive.Observable.findL", "link" : "monix\/reactive\/subjects\/Var.html#findL(p:A=>Boolean):monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.find", "link" : "monix\/reactive\/subjects\/Var.html#find(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "countL", "tail" : "(): Task[Long]", "member" : "monix.reactive.Observable.countL", "link" : "monix\/reactive\/subjects\/Var.html#countL:monix.eval.Task[Long]", "kind" : "final def"}, {"label" : "count", "tail" : "(): Observable[Long]", "member" : "monix.reactive.Observable.count", "link" : "monix\/reactive\/subjects\/Var.html#count:monix.reactive.Observable[Long]", "kind" : "final def"}, {"label" : "lastOrElseL", "tail" : "(default: => B): Task[B]", "member" : "monix.reactive.Observable.lastOrElseL", "link" : "monix\/reactive\/subjects\/Var.html#lastOrElseL[B>:A](default:=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "lastOptionL", "tail" : "(): Task[Option[A]]", "member" : "monix.reactive.Observable.lastOptionL", "link" : "monix\/reactive\/subjects\/Var.html#lastOptionL:monix.eval.Task[Option[A]]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[B]", "member" : "monix.reactive.Observable.toReactivePublisher", "link" : "monix\/reactive\/subjects\/Var.html#toReactivePublisher[B>:A](implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: B, separator: B, end: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Var.html#intersperse[B>:A](start:B,separator:B,end:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(separator: B): Observable[B]", "member" : "monix.reactive.Observable.intersperse", "link" : "monix\/reactive\/subjects\/Var.html#intersperse[B>:A](separator:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Observable[(A, Long)]", "member" : "monix.reactive.Observable.zipWithIndex", "link" : "monix\/reactive\/subjects\/Var.html#zipWithIndex:monix.reactive.Observable[(A,Long)]", "kind" : "final def"}, {"label" : "zipMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.zipMap", "link" : "monix\/reactive\/subjects\/Var.html#zipMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "zip", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.zip", "link" : "monix\/reactive\/subjects\/Var.html#zip[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "withLatestFrom6", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5], o6: Observable[B6])(f: (A, B1, B2, B3, B4, B5, B6) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom6", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom6[B1,B2,B3,B4,B5,B6,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5],o6:monix.reactive.Observable[B6])(f:(A,B1,B2,B3,B4,B5,B6)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom5", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4], o5: Observable[B5])(f: (A, B1, B2, B3, B4, B5) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom5", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom5[B1,B2,B3,B4,B5,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4],o5:monix.reactive.Observable[B5])(f:(A,B1,B2,B3,B4,B5)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom4", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3], o4: Observable[B4])(f: (A, B1, B2, B3, B4) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom4", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom4[B1,B2,B3,B4,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3],o4:monix.reactive.Observable[B4])(f:(A,B1,B2,B3,B4)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom3", "tail" : "(o1: Observable[B1], o2: Observable[B2], o3: Observable[B3])(f: (A, B1, B2, B3) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom3", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom3[B1,B2,B3,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2],o3:monix.reactive.Observable[B3])(f:(A,B1,B2,B3)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom2", "tail" : "(o1: Observable[B1], o2: Observable[B2])(f: (A, B1, B2) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom2", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom2[B1,B2,R](o1:monix.reactive.Observable[B1],o2:monix.reactive.Observable[B2])(f:(A,B1,B2)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "withLatestFrom", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.withLatestFrom", "link" : "monix\/reactive\/subjects\/Var.html#withLatestFrom[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "whileBusyReduceEvents", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyReduceEvents", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyReduceEvents[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyAggregateEvents", "tail" : "(seed: (A) => S)(aggregate: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.whileBusyAggregateEvents", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyAggregateEvents[S](seed:A=>S)(aggregate:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "def"}, {"label" : "whileBusyDropEventsAndSignal", "tail" : "(onOverflow: (Long) => B): Observable[B]", "member" : "monix.reactive.Observable.whileBusyDropEventsAndSignal", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyDropEventsAndSignal[B>:A](onOverflow:Long=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyDropEvents", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.whileBusyDropEvents", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyDropEvents:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(overflowStrategy: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.asyncBoundary", "link" : "monix\/reactive\/subjects\/Var.html#asyncBoundary[B>:A](overflowStrategy:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "whileBusyBuffer", "tail" : "(overflowStrategy: Synchronous[B]): Observable[B]", "member" : "monix.reactive.Observable.whileBusyBuffer", "link" : "monix\/reactive\/subjects\/Var.html#whileBusyBuffer[B>:A](overflowStrategy:monix.reactive.OverflowStrategy.Synchronous[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstream", "link" : "monix\/reactive\/subjects\/Var.html#timeoutOnSlowUpstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowUpstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowUpstreamTo", "link" : "monix\/reactive\/subjects\/Var.html#timeoutOnSlowUpstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstream", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstream", "link" : "monix\/reactive\/subjects\/Var.html#timeoutOnSlowDownstream(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "timeoutOnSlowDownstreamTo", "tail" : "(timeout: FiniteDuration, backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.timeoutOnSlowDownstreamTo", "link" : "monix\/reactive\/subjects\/Var.html#timeoutOnSlowDownstreamTo[B>:A](timeout:scala.concurrent.duration.FiniteDuration,backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounce", "link" : "monix\/reactive\/subjects\/Var.html#debounce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleWithTimeout", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleWithTimeout", "link" : "monix\/reactive\/subjects\/Var.html#throttleWithTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleBy", "link" : "monix\/reactive\/subjects\/Var.html#sampleBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sample", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sample", "link" : "monix\/reactive\/subjects\/Var.html#sample(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLatest", "tail" : "(period: FiniteDuration, emitLast: Boolean): Observable[A]", "member" : "monix.reactive.Observable.throttleLatest", "link" : "monix\/reactive\/subjects\/Var.html#throttleLatest(period:scala.concurrent.duration.FiniteDuration,emitLast:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleLast", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleLast", "link" : "monix\/reactive\/subjects\/Var.html#throttleLast(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttleFirst", "tail" : "(interval: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.throttleFirst", "link" : "monix\/reactive\/subjects\/Var.html#throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "throttle", "tail" : "(period: FiniteDuration, n: Int): Observable[A]", "member" : "monix.reactive.Observable.throttle", "link" : "monix\/reactive\/subjects\/Var.html#throttle(period:scala.concurrent.duration.FiniteDuration,n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileNotCanceled", "tail" : "(c: BooleanCancelable): Observable[A]", "member" : "monix.reactive.Observable.takeWhileNotCanceled", "link" : "monix\/reactive\/subjects\/Var.html#takeWhileNotCanceled(c:monix.execution.cancelables.BooleanCancelable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhileInclusive", "link" : "monix\/reactive\/subjects\/Var.html#takeWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.takeWhile", "link" : "monix\/reactive\/subjects\/Var.html#takeWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEvalF", "tail" : "(trigger: F[B])(taskLike: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEvalF", "link" : "monix\/reactive\/subjects\/Var.html#takeUntilEvalF[F[_],B](trigger:F[B])(implicittaskLike:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntilEval", "tail" : "(trigger: Task[_]): Observable[A]", "member" : "monix.reactive.Observable.takeUntilEval", "link" : "monix\/reactive\/subjects\/Var.html#takeUntilEval(trigger:monix.eval.Task[_]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.takeUntil", "link" : "monix\/reactive\/subjects\/Var.html#takeUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeEveryNth", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeEveryNth", "link" : "monix\/reactive\/subjects\/Var.html#takeEveryNth(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "takeByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.takeByTimespan", "link" : "monix\/reactive\/subjects\/Var.html#takeByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/Var.html#drop(n:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.drop", "link" : "monix\/reactive\/subjects\/Var.html#drop(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "tail", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.tail", "link" : "monix\/reactive\/subjects\/Var.html#tail:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchIfEmpty", "tail" : "(backup: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchIfEmpty", "link" : "monix\/reactive\/subjects\/Var.html#switchIfEmpty[B>:A](backup:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "subscribeOn", "tail" : "(scheduler: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.subscribeOn", "link" : "monix\/reactive\/subjects\/Var.html#subscribeOn(scheduler:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "startWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.startWith", "link" : "monix\/reactive\/subjects\/Var.html#startWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap0", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap0", "link" : "monix\/reactive\/subjects\/Var.html#scanMap0[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanMap", "tail" : "(f: (A) => B)(B: Monoid[B]): Observable[B]", "member" : "monix.reactive.Observable.scanMap", "link" : "monix\/reactive\/subjects\/Var.html#scanMap[B](f:A=>B)(implicitB:cats.Monoid[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "scanEval0", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0", "link" : "monix\/reactive\/subjects\/Var.html#scanEval0[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval", "tail" : "(seed: Task[S])(op: (S, A) => Task[S]): Observable[S]", "member" : "monix.reactive.Observable.scanEval", "link" : "monix\/reactive\/subjects\/Var.html#scanEval[S](seed:monix.eval.Task[S])(op:(S,A)=>monix.eval.Task[S]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEval0F", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F], A: Applicative[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEval0F", "link" : "monix\/reactive\/subjects\/Var.html#scanEval0F[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F],implicitA:cats.Applicative[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scanEvalF", "tail" : "(seed: F[S])(op: (S, A) => F[S])(F: TaskLike[F]): Observable[S]", "member" : "monix.reactive.Observable.scanEvalF", "link" : "monix\/reactive\/subjects\/Var.html#scanEvalF[F[_],S](seed:F[S])(op:(S,A)=>F[S])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "scan0", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan0", "link" : "monix\/reactive\/subjects\/Var.html#scan0[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "mapAccumulate", "tail" : "(seed: => S)(op: (S, A) => (S, R)): Observable[R]", "member" : "monix.reactive.Observable.mapAccumulate", "link" : "monix\/reactive\/subjects\/Var.html#mapAccumulate[S,R](seed:=>S)(op:(S,A)=>(S,R)):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "scan", "tail" : "(seed: => S)(op: (S, A) => S): Observable[S]", "member" : "monix.reactive.Observable.scan", "link" : "monix\/reactive\/subjects\/Var.html#scan[S](seed:=>S)(op:(S,A)=>S):monix.reactive.Observable[S]", "kind" : "final def"}, {"label" : "sampleRepeatedBy", "tail" : "(sampler: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeatedBy", "link" : "monix\/reactive\/subjects\/Var.html#sampleRepeatedBy[B](sampler:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "sampleRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.sampleRepeated", "link" : "monix\/reactive\/subjects\/Var.html#sampleRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.restartUntil", "link" : "monix\/reactive\/subjects\/Var.html#restartUntil(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.repeat", "link" : "monix\/reactive\/subjects\/Var.html#repeat:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): Observable[B]", "member" : "monix.reactive.Observable.reduce", "link" : "monix\/reactive\/subjects\/Var.html#reduce[B>:A](op:(B,B)=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "pipeThroughSelector", "tail" : "(pipe: Pipe[S, B], f: (Observable[B]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.pipeThroughSelector", "link" : "monix\/reactive\/subjects\/Var.html#pipeThroughSelector[S>:A,B,R](pipe:monix.reactive.Pipe[S,B],f:monix.reactive.Observable[B]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "publishSelector", "tail" : "(f: (Observable[A]) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.publishSelector", "link" : "monix\/reactive\/subjects\/Var.html#publishSelector[R](f:monix.reactive.Observable[A]=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(pipe: Pipe[I, B]): Observable[B]", "member" : "monix.reactive.Observable.pipeThrough", "link" : "monix\/reactive\/subjects\/Var.html#pipeThrough[I>:A,B](pipe:monix.reactive.Pipe[I,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRestartUnlimited", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartUnlimited", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRestartUnlimited:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestartIf", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRestartIf(p:Throwable=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Observable[A]", "member" : "monix.reactive.Observable.onErrorRestart", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRestart(maxRetries:Long):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandleWith", "link" : "monix\/reactive\/subjects\/Var.html#onErrorHandleWith[B>:A](f:Throwable=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecoverWith", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.reactive.Observable[B]]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorRecover", "link" : "monix\/reactive\/subjects\/Var.html#onErrorRecover[B>:A](pf:PartialFunction[Throwable,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => B): Observable[B]", "member" : "monix.reactive.Observable.onErrorHandle", "link" : "monix\/reactive\/subjects\/Var.html#onErrorHandle[B>:A](f:Throwable=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.onErrorFallbackTo", "link" : "monix\/reactive\/subjects\/Var.html#onErrorFallbackTo[B>:A](that:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "onCancelTriggerError", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.onCancelTriggerError", "link" : "monix\/reactive\/subjects\/Var.html#onCancelTriggerError:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler, os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Var.html#observeOn[B>:A](s:monix.execution.Scheduler,os:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "observeOn", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.observeOn", "link" : "monix\/reactive\/subjects\/Var.html#observeOn(s:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Observable[A]", "member" : "monix.reactive.Observable.executeWithModel", "link" : "monix\/reactive\/subjects\/Var.html#executeWithModel(em:monix.execution.ExecutionModel):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.executeAsync", "link" : "monix\/reactive\/subjects\/Var.html#executeAsync:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Observable[A]", "member" : "monix.reactive.Observable.executeOn", "link" : "monix\/reactive\/subjects\/Var.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "mergeMapDelayErrors", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMapDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#mergeMapDelayErrors[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeDelayErrors", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#mergeDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mergeMap", "tail" : "(f: (A) => Observable[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mergeMap", "link" : "monix\/reactive\/subjects\/Var.html#mergeMap[B](f:A=>monix.reactive.Observable[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev: <:<[A, Observable[B]], os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.merge", "link" : "monix\/reactive\/subjects\/Var.html#merge[B](implicitev:A<:<monix.reactive.Observable[B],implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Observable[Notification[A]]", "member" : "monix.reactive.Observable.materialize", "link" : "monix\/reactive\/subjects\/Var.html#materialize:monix.reactive.Observable[monix.reactive.Notification[A]]", "kind" : "final def"}, {"label" : "mapParallelUnorderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnorderedF", "link" : "monix\/reactive\/subjects\/Var.html#mapParallelUnorderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelUnordered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelUnordered", "link" : "monix\/reactive\/subjects\/Var.html#mapParallelUnordered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrderedF", "tail" : "(parallelism: Int)(f: (A) => F[B])(os: OverflowStrategy[B], F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrderedF", "link" : "monix\/reactive\/subjects\/Var.html#mapParallelOrderedF[F[_],B](parallelism:Int)(f:A=>F[B])(implicitos:monix.reactive.OverflowStrategy[B],implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapParallelOrdered", "tail" : "(parallelism: Int)(f: (A) => Task[B])(os: OverflowStrategy[B]): Observable[B]", "member" : "monix.reactive.Observable.mapParallelOrdered", "link" : "monix\/reactive\/subjects\/Var.html#mapParallelOrdered[B](parallelism:Int)(f:A=>monix.eval.Task[B])(implicitos:monix.reactive.OverflowStrategy[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEvalF", "tail" : "(f: (A) => F[B])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.mapEvalF", "link" : "monix\/reactive\/subjects\/Var.html#mapEvalF[F[_],B](f:A=>F[B])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "mapEval", "tail" : "(f: (A) => Task[B]): Observable[B]", "member" : "monix.reactive.Observable.mapEval", "link" : "monix\/reactive\/subjects\/Var.html#mapEval[B](f:A=>monix.eval.Task[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "takeLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.takeLast", "link" : "monix\/reactive\/subjects\/Var.html#takeLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "last", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.last", "link" : "monix\/reactive\/subjects\/Var.html#last:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.interleave", "link" : "monix\/reactive\/subjects\/Var.html#interleave[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "ignoreElements", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.ignoreElements", "link" : "monix\/reactive\/subjects\/Var.html#ignoreElements:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "guaranteeCaseF", "tail" : "(f: (ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCaseF", "link" : "monix\/reactive\/subjects\/Var.html#guaranteeCaseF[F[_]](f:cats.effect.ExitCase[Throwable]=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(f: (ExitCase[Throwable]) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeCase", "link" : "monix\/reactive\/subjects\/Var.html#guaranteeCase(f:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guaranteeF", "tail" : "(f: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.guaranteeF", "link" : "monix\/reactive\/subjects\/Var.html#guaranteeF[F[_]](f:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(f: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.guarantee", "link" : "monix\/reactive\/subjects\/Var.html#guarantee(f:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(keySelector: (A) => K)(os: Synchronous[Nothing]): Observable[GroupedObservable[K, A]]", "member" : "monix.reactive.Observable.groupBy", "link" : "monix\/reactive\/subjects\/Var.html#groupBy[K](keySelector:A=>K)(implicitos:monix.reactive.OverflowStrategy.Synchronous[Nothing]):monix.reactive.Observable[monix.reactive.observables.GroupedObservable[K,A]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.exists", "link" : "monix\/reactive\/subjects\/Var.html#exists(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Observable[Boolean]", "member" : "monix.reactive.Observable.forall", "link" : "monix\/reactive\/subjects\/Var.html#forall(p:A=>Boolean):monix.reactive.Observable[Boolean]", "kind" : "final def"}, {"label" : "switch", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.switch", "link" : "monix\/reactive\/subjects\/Var.html#switch[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenLatest", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenLatest", "link" : "monix\/reactive\/subjects\/Var.html#flattenLatest[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#concatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concatDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#concatDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flattenDelayErrors", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flattenDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#flattenDelayErrors[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.concat", "link" : "monix\/reactive\/subjects\/Var.html#concat[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Observable[B]]): Observable[B]", "member" : "monix.reactive.Observable.flatten", "link" : "monix\/reactive\/subjects\/Var.html#flatten[B](implicitev:A<:<monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatScan0DelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0DelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#flatScan0DelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScanDelayErrors", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScanDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#flatScanDelayErrors[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan0", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan0", "link" : "monix\/reactive\/subjects\/Var.html#flatScan0[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatScan", "tail" : "(seed: => R)(op: (R, A) => Observable[R]): Observable[R]", "member" : "monix.reactive.Observable.flatScan", "link" : "monix\/reactive\/subjects\/Var.html#flatScan[R](seed:=>R)(op:(R,A)=>monix.reactive.Observable[R]):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "flatMapLatest", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapLatest", "link" : "monix\/reactive\/subjects\/Var.html#flatMapLatest[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapDelayErrors", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapDelayErrors", "link" : "monix\/reactive\/subjects\/Var.html#flatMapDelayErrors[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMap", "link" : "monix\/reactive\/subjects\/Var.html#concatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMap", "link" : "monix\/reactive\/subjects\/Var.html#flatMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "flatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.flatMapIterable", "link" : "monix\/reactive\/subjects\/Var.html#flatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "concatMapIterable", "tail" : "(f: (A) => Iterable[B]): Observable[B]", "member" : "monix.reactive.Observable.concatMapIterable", "link" : "monix\/reactive\/subjects\/Var.html#concatMapIterable[B](f:A=>scala.collection.immutable.Iterable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Observable[B]", "member" : "monix.reactive.Observable.map", "link" : "monix\/reactive\/subjects\/Var.html#map[B](f:A=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "headOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.headOrElse", "link" : "monix\/reactive\/subjects\/Var.html#headOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "firstOrElse", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.firstOrElse", "link" : "monix\/reactive\/subjects\/Var.html#firstOrElse[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Observable[Throwable]", "member" : "monix.reactive.Observable.failed", "link" : "monix\/reactive\/subjects\/Var.html#failed:monix.reactive.Observable[Throwable]", "kind" : "final def"}, {"label" : "endWithError", "tail" : "(error: Throwable): Observable[A]", "member" : "monix.reactive.Observable.endWithError", "link" : "monix\/reactive\/subjects\/Var.html#endWithError(error:Throwable):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "appendAll", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.appendAll", "link" : "monix\/reactive\/subjects\/Var.html#appendAll[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "++", "tail" : "(other: => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.++", "link" : "monix\/reactive\/subjects\/Var.html#++[B>:A](other:=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "endWith", "tail" : "(elems: Seq[B]): Observable[B]", "member" : "monix.reactive.Observable.endWith", "link" : "monix\/reactive\/subjects\/Var.html#endWith[B>:A](elems:Seq[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "echoRepeated", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoRepeated", "link" : "monix\/reactive\/subjects\/Var.html#echoRepeated(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "echoOnce", "tail" : "(timeout: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.echoOnce", "link" : "monix\/reactive\/subjects\/Var.html#echoOnce(timeout:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dump", "tail" : "(prefix: String, out: PrintStream): Observable[A]", "member" : "monix.reactive.Observable.dump", "link" : "monix\/reactive\/subjects\/Var.html#dump(prefix:String,out:java.io.PrintStream):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileWithIndex", "tail" : "(p: (A, Int) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileWithIndex", "link" : "monix\/reactive\/subjects\/Var.html#dropWhileWithIndex(p:(A,Int)=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhileInclusive", "link" : "monix\/reactive\/subjects\/Var.html#dropWhileInclusive(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Observable[A]", "member" : "monix.reactive.Observable.dropWhile", "link" : "monix\/reactive\/subjects\/Var.html#dropWhile(p:A=>Boolean):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(trigger: Observable[Any]): Observable[A]", "member" : "monix.reactive.Observable.dropUntil", "link" : "monix\/reactive\/subjects\/Var.html#dropUntil(trigger:monix.reactive.Observable[Any]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropLast", "tail" : "(n: Int): Observable[A]", "member" : "monix.reactive.Observable.dropLast", "link" : "monix\/reactive\/subjects\/Var.html#dropLast(n:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "dropByTimespan", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.dropByTimespan", "link" : "monix\/reactive\/subjects\/Var.html#dropByTimespan(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribeF", "link" : "monix\/reactive\/subjects\/Var.html#doAfterSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doAfterSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doAfterSubscribe", "link" : "monix\/reactive\/subjects\/Var.html#doAfterSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribeF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribeF", "link" : "monix\/reactive\/subjects\/Var.html#doOnSubscribeF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscribe", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscribe", "link" : "monix\/reactive\/subjects\/Var.html#doOnSubscribe(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStartF", "tail" : "(cb: (A) => F[Unit])(F: Effect[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnStartF", "link" : "monix\/reactive\/subjects\/Var.html#doOnStartF[F[_]](cb:A=>F[Unit])(implicitF:cats.effect.Effect[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnStart", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnStart", "link" : "monix\/reactive\/subjects\/Var.html#doOnStart(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAckF", "tail" : "(cb: (A, Ack) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAckF", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextAckF[F[_]](cb:(A,monix.execution.Ack)=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextAck", "tail" : "(cb: (A, Ack) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextAck", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextAck(cb:(A,monix.execution.Ack)=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNextF", "tail" : "(cb: (A) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnNextF", "link" : "monix\/reactive\/subjects\/Var.html#doOnNextF[F[_]](cb:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnNext", "tail" : "(cb: (A) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnNext", "link" : "monix\/reactive\/subjects\/Var.html#doOnNext(cb:A=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnErrorF", "tail" : "(cb: (Throwable) => F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnErrorF", "link" : "monix\/reactive\/subjects\/Var.html#doOnErrorF[F[_]](cb:Throwable=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnError", "tail" : "(cb: (Throwable) => Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnError", "link" : "monix\/reactive\/subjects\/Var.html#doOnError(cb:Throwable=>monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnCompleteF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnCompleteF", "link" : "monix\/reactive\/subjects\/Var.html#doOnCompleteF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnComplete", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnComplete", "link" : "monix\/reactive\/subjects\/Var.html#doOnComplete(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancelF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancelF", "link" : "monix\/reactive\/subjects\/Var.html#doOnSubscriptionCancelF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnSubscriptionCancel", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnSubscriptionCancel", "link" : "monix\/reactive\/subjects\/Var.html#doOnSubscriptionCancel(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStopF", "tail" : "(task: F[Unit])(F: TaskLike[F]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStopF", "link" : "monix\/reactive\/subjects\/Var.html#doOnEarlyStopF[F[_]](task:F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "doOnEarlyStop", "tail" : "(task: Task[Unit]): Observable[A]", "member" : "monix.reactive.Observable.doOnEarlyStop", "link" : "monix\/reactive\/subjects\/Var.html#doOnEarlyStop(task:monix.eval.Task[Unit]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChangedByKey", "tail" : "(key: (A) => K)(K: Eq[K]): Observable[A]", "member" : "monix.reactive.Observable.distinctUntilChangedByKey", "link" : "monix\/reactive\/subjects\/Var.html#distinctUntilChangedByKey[K](key:A=>K)(implicitK:cats.Eq[K]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "distinctUntilChanged", "tail" : "(A: Eq[AA]): Observable[AA]", "member" : "monix.reactive.Observable.distinctUntilChanged", "link" : "monix\/reactive\/subjects\/Var.html#distinctUntilChanged[AA>:A](implicitA:cats.Eq[AA]):monix.reactive.Observable[AA]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Notification[B]]): Observable[B]", "member" : "monix.reactive.Observable.dematerialize", "link" : "monix\/reactive\/subjects\/Var.html#dematerialize[B](implicitev:A<:<monix.reactive.Notification[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecutionWithF", "tail" : "(trigger: F[B])(F: ObservableLike[F]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWithF", "link" : "monix\/reactive\/subjects\/Var.html#delayExecutionWithF[F[_],B](trigger:F[B])(implicitF:monix.reactive.ObservableLike[F]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayExecutionWith", "tail" : "(trigger: Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayExecutionWith", "link" : "monix\/reactive\/subjects\/Var.html#delayExecutionWith[B](trigger:monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNextBySelector", "tail" : "(selector: (A) => Observable[B]): Observable[A]", "member" : "monix.reactive.Observable.delayOnNextBySelector", "link" : "monix\/reactive\/subjects\/Var.html#delayOnNextBySelector[B](selector:A=>monix.reactive.Observable[B]):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnNext", "tail" : "(duration: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnNext", "link" : "monix\/reactive\/subjects\/Var.html#delayOnNext(duration:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "delayOnComplete", "tail" : "(delay: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayOnComplete", "link" : "monix\/reactive\/subjects\/Var.html#delayOnComplete(delay:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(default: => B): Observable[B]", "member" : "monix.reactive.Observable.defaultIfEmpty", "link" : "monix\/reactive\/subjects\/Var.html#defaultIfEmpty[B>:A](default:=>B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "debounceRepeated", "tail" : "(period: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.debounceRepeated", "link" : "monix\/reactive\/subjects\/Var.html#debounceRepeated(period:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "switchMap", "tail" : "(f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.switchMap", "link" : "monix\/reactive\/subjects\/Var.html#switchMap[B](f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Observable[A]", "member" : "monix.reactive.Observable.delayExecution", "link" : "monix\/reactive\/subjects\/Var.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "debounceTo", "tail" : "(timeout: FiniteDuration, f: (A) => Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.debounceTo", "link" : "monix\/reactive\/subjects\/Var.html#debounceTo[B](timeout:scala.concurrent.duration.FiniteDuration,f:A=>monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "completed", "tail" : "(): Observable[Nothing]", "member" : "monix.reactive.Observable.completed", "link" : "monix\/reactive\/subjects\/Var.html#completed:monix.reactive.Observable[Nothing]", "kind" : "final def"}, {"label" : "combineLatestMap", "tail" : "(other: Observable[B])(f: (A, B) => R): Observable[R]", "member" : "monix.reactive.Observable.combineLatestMap", "link" : "monix\/reactive\/subjects\/Var.html#combineLatestMap[B,R](other:monix.reactive.Observable[B])(f:(A,B)=>R):monix.reactive.Observable[R]", "kind" : "final def"}, {"label" : "combineLatest", "tail" : "(other: Observable[B]): Observable[(A, B)]", "member" : "monix.reactive.Observable.combineLatest", "link" : "monix\/reactive\/subjects\/Var.html#combineLatest[B](other:monix.reactive.Observable[B]):monix.reactive.Observable[(A,B)]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collectWhile", "link" : "monix\/reactive\/subjects\/Var.html#collectWhile[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Observable[B]", "member" : "monix.reactive.Observable.collect", "link" : "monix\/reactive\/subjects\/Var.html#collect[B](pf:PartialFunction[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCaseF", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketCaseF", "link" : "monix\/reactive\/subjects\/Var.html#bracketCaseF[F[_],B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Observable[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracketCase", "link" : "monix\/reactive\/subjects\/Var.html#bracketCase[B](use:A=>monix.reactive.Observable[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracketF", "tail" : "(use: (A) => Observable[B])(release: (A) => F[Unit])(F: TaskLike[F]): Observable[B]", "member" : "monix.reactive.Observable.bracketF", "link" : "monix\/reactive\/subjects\/Var.html#bracketF[F[_],B](use:A=>monix.reactive.Observable[B])(release:A=>F[Unit])(implicitF:monix.eval.TaskLike[F]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Observable[B])(release: (A) => Task[Unit]): Observable[B]", "member" : "monix.reactive.Observable.bracket", "link" : "monix\/reactive\/subjects\/Var.html#bracket[B](use:A=>monix.reactive.Observable[B])(release:A=>monix.eval.Task[Unit]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "bufferIntrospective", "tail" : "(maxSize: Int): Observable[List[A]]", "member" : "monix.reactive.Observable.bufferIntrospective", "link" : "monix\/reactive\/subjects\/Var.html#bufferIntrospective(maxSize:Int):monix.reactive.Observable[List[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S], maxSize: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Var.html#bufferWithSelector[S](selector:monix.reactive.Observable[S],maxSize:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWithSelector", "tail" : "(selector: Observable[S]): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWithSelector", "link" : "monix\/reactive\/subjects\/Var.html#bufferWithSelector[S](selector:monix.reactive.Observable[S]):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhileInclusive", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhileInclusive", "link" : "monix\/reactive\/subjects\/Var.html#bufferWhileInclusive(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferWhile", "tail" : "(p: (A) => Boolean): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferWhile", "link" : "monix\/reactive\/subjects\/Var.html#bufferWhile(p:A=>Boolean):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimedWithPressure", "tail" : "(period: FiniteDuration, maxSize: Int, sizeOf: (AA) => Int): Observable[Seq[AA]]", "member" : "monix.reactive.Observable.bufferTimedWithPressure", "link" : "monix\/reactive\/subjects\/Var.html#bufferTimedWithPressure[AA>:A](period:scala.concurrent.duration.FiniteDuration,maxSize:Int,sizeOf:AA=>Int):monix.reactive.Observable[Seq[AA]]", "kind" : "final def"}, {"label" : "bufferTimedAndCounted", "tail" : "(timespan: FiniteDuration, maxCount: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimedAndCounted", "link" : "monix\/reactive\/subjects\/Var.html#bufferTimedAndCounted(timespan:scala.concurrent.duration.FiniteDuration,maxCount:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTimed", "tail" : "(timespan: FiniteDuration): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTimed", "link" : "monix\/reactive\/subjects\/Var.html#bufferTimed(timespan:scala.concurrent.duration.FiniteDuration):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(count: Int, skip: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferSliding", "link" : "monix\/reactive\/subjects\/Var.html#bufferSliding(count:Int,skip:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "bufferTumbling", "tail" : "(count: Int): Observable[Seq[A]]", "member" : "monix.reactive.Observable.bufferTumbling", "link" : "monix\/reactive\/subjects\/Var.html#bufferTumbling(count:Int):monix.reactive.Observable[Seq[A]]", "kind" : "final def"}, {"label" : "ambWith", "tail" : "(other: Observable[B]): Observable[B]", "member" : "monix.reactive.Observable.ambWith", "link" : "monix\/reactive\/subjects\/Var.html#ambWith[B>:A](other:monix.reactive.Observable[B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "append", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.append", "link" : "monix\/reactive\/subjects\/Var.html#append[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.:+", "link" : "monix\/reactive\/subjects\/Var.html#:+[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.prepend", "link" : "monix\/reactive\/subjects\/Var.html#prepend[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Observable[B]", "member" : "monix.reactive.Observable.+:", "link" : "monix\/reactive\/subjects\/Var.html#+:[B>:A](elem:B):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "consumeWithF", "tail" : "(f: Consumer[A, R])(F: TaskLift[F]): F[R]", "member" : "monix.reactive.Observable.consumeWithF", "link" : "monix\/reactive\/subjects\/Var.html#consumeWithF[F[_],R](f:monix.reactive.Consumer[A,R])(implicitF:monix.eval.TaskLift[F]):F[R]", "kind" : "final def"}, {"label" : "consumeWith", "tail" : "(f: Consumer[A, R]): Task[R]", "member" : "monix.reactive.Observable.consumeWith", "link" : "monix\/reactive\/subjects\/Var.html#consumeWith[R](f:monix.reactive.Consumer[A,R]):monix.eval.Task[R]", "kind" : "final def"}, {"label" : "liftByOperator", "tail" : "(operator: Operator[A, B]): Observable[B]", "member" : "monix.reactive.Observable.liftByOperator", "link" : "monix\/reactive\/subjects\/Var.html#liftByOperator[B](operator:monix.reactive.Observable.Operator[A,B]):monix.reactive.Observable[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(cb: (A) => Unit)(s: Scheduler): CancelableFuture[Unit]", "member" : "monix.reactive.Observable.foreach", "link" : "monix\/reactive\/subjects\/Var.html#foreach(cb:A=>Unit)(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[Unit]", "kind" : "final def"}, {"label" : "runAsyncGetLast", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetLast", "link" : "monix\/reactive\/subjects\/Var.html#runAsyncGetLast(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "runAsyncGetFirst", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[Option[A]]", "member" : "monix.reactive.Observable.runAsyncGetFirst", "link" : "monix\/reactive\/subjects\/Var.html#runAsyncGetFirst(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[Option[A]]", "kind" : "final def"}, {"label" : "publishLast", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publishLast", "link" : "monix\/reactive\/subjects\/Var.html#publishLast(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "unsafeMulticast", "tail" : "(processor: Subject[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.unsafeMulticast", "link" : "monix\/reactive\/subjects\/Var.html#unsafeMulticast[B>:A,R](processor:monix.reactive.subjects.Subject[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "replay", "tail" : "(bufferSize: Int)(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Var.html#replay(bufferSize:Int)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "replay", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.replay", "link" : "monix\/reactive\/subjects\/Var.html#replay(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "behavior", "tail" : "(initialValue: B)(s: Scheduler): ConnectableObservable[B]", "member" : "monix.reactive.Observable.behavior", "link" : "monix\/reactive\/subjects\/Var.html#behavior[B>:A](initialValue:B)(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[B]", "kind" : "final def"}, {"label" : "cache", "tail" : "(maxCapacity: Int): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Var.html#cache(maxCapacity:Int):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "cache", "tail" : "(): Observable[A]", "member" : "monix.reactive.Observable.cache", "link" : "monix\/reactive\/subjects\/Var.html#cache:monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "publish", "tail" : "(s: Scheduler): ConnectableObservable[A]", "member" : "monix.reactive.Observable.publish", "link" : "monix\/reactive\/subjects\/Var.html#publish(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[A]", "kind" : "final def"}, {"label" : "share", "tail" : "(s: Scheduler): Observable[A]", "member" : "monix.reactive.Observable.share", "link" : "monix\/reactive\/subjects\/Var.html#share(implicits:monix.execution.Scheduler):monix.reactive.Observable[A]", "kind" : "final def"}, {"label" : "multicast", "tail" : "(pipe: Pipe[B, R])(s: Scheduler): ConnectableObservable[R]", "member" : "monix.reactive.Observable.multicast", "link" : "monix\/reactive\/subjects\/Var.html#multicast[B>:A,R](pipe:monix.reactive.Pipe[B,R])(implicits:monix.execution.Scheduler):monix.reactive.observables.ConnectableObservable[R]", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit, completedFn: () => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit,completedFn:()=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "()(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe()(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(nextFn: (A) => Future[Ack], errorFn: (Throwable) => Unit)(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(nextFn:A=>scala.concurrent.Future[monix.execution.Ack],errorFn:Throwable=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(subscriber: Subscriber[A]): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(subscriber:monix.reactive.observers.Subscriber[A]):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.subscribe", "link" : "monix\/reactive\/subjects\/Var.html#subscribe(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "unsafeSubscribeFn", "tail" : "(observer: Observer[A])(s: Scheduler): Cancelable", "member" : "monix.reactive.Observable.unsafeSubscribeFn", "link" : "monix\/reactive\/subjects\/Var.html#unsafeSubscribeFn(observer:monix.reactive.Observer[A])(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Var.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Var.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Var.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Var.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Var.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Var.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Var.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Var.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Var.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Var.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Var.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Var.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Var.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Var.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Var.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Var.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(initial: A)(s: Scheduler): Var[A]", "member" : "monix.reactive.subjects.Var.apply", "link" : "monix\/reactive\/subjects\/Var$.html#apply[A](initial:A)(implicits:monix.execution.Scheduler):monix.reactive.subjects.Var[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/reactive\/subjects\/Var$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/reactive\/subjects\/Var$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/reactive\/subjects\/Var$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/reactive\/subjects\/Var$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/reactive\/subjects\/Var$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/reactive\/subjects\/Var$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/reactive\/subjects\/Var$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/reactive\/subjects\/Var$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/reactive\/subjects\/Var$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/reactive\/subjects\/Var$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/reactive\/subjects\/Var$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/reactive\/subjects\/Var$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/reactive\/subjects\/Var$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/reactive\/subjects\/Var$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/reactive\/subjects\/Var$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/reactive\/subjects\/Var$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/reactive\/subjects\/Var$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/reactive\/subjects\/Var.html", "kind" : "class"}], "monix.catnap" : [{"name" : "monix.catnap.CancelableF", "object" : "monix\/catnap\/CancelableF$.html", "members_object" : [{"label" : "IsDummy", "tail" : "", "member" : "monix.catnap.CancelableF.IsDummy", "link" : "monix\/catnap\/CancelableF$.html#IsDummy[F[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "Empty", "tail" : "", "member" : "monix.catnap.CancelableF.Empty", "link" : "monix\/catnap\/CancelableF$.html#Empty[F[_]]extendsCancelableF[F]withCancelableF.IsDummy[F]", "kind" : "trait"}, {"label" : "cancelAllTokens", "tail" : "(seq: CancelToken[F]*)(F: Sync[F]): CancelToken[F]", "member" : "monix.catnap.CancelableF.cancelAllTokens", "link" : "monix\/catnap\/CancelableF$.html#cancelAllTokens[F[_]](seq:cats.effect.CancelToken[F]*)(implicitF:cats.effect.Sync[F]):cats.effect.CancelToken[F]", "kind" : "def"}, {"label" : "cancelAll", "tail" : "(seq: CancelableF[F]*)(F: Sync[F]): CancelToken[F]", "member" : "monix.catnap.CancelableF.cancelAll", "link" : "monix\/catnap\/CancelableF$.html#cancelAll[F[_]](seq:monix.catnap.CancelableF[F]*)(implicitF:cats.effect.Sync[F]):cats.effect.CancelToken[F]", "kind" : "def"}, {"label" : "collection", "tail" : "(refs: CancelableF[F]*)(F: Sync[F]): CancelableF[F]", "member" : "monix.catnap.CancelableF.collection", "link" : "monix\/catnap\/CancelableF$.html#collection[F[_]](refs:monix.catnap.CancelableF[F]*)(implicitF:cats.effect.Sync[F]):monix.catnap.CancelableF[F]", "kind" : "def"}, {"label" : "empty", "tail" : "(F: Applicative[F]): CancelableF[F]", "member" : "monix.catnap.CancelableF.empty", "link" : "monix\/catnap\/CancelableF$.html#empty[F[_]](implicitF:cats.Applicative[F]):monix.catnap.CancelableF[F]", "kind" : "def"}, {"label" : "wrap", "tail" : "(token: CancelToken[F]): CancelableF[F]", "member" : "monix.catnap.CancelableF.wrap", "link" : "monix\/catnap\/CancelableF$.html#wrap[F[_]](token:cats.effect.CancelToken[F]):monix.catnap.CancelableF[F]", "kind" : "def"}, {"label" : "unsafeApply", "tail" : "(token: F[Unit])(F: Sync[F]): CancelableF[F]", "member" : "monix.catnap.CancelableF.unsafeApply", "link" : "monix\/catnap\/CancelableF$.html#unsafeApply[F[_]](token:F[Unit])(implicitF:cats.effect.Sync[F]):monix.catnap.CancelableF[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(token: F[Unit])(F: Sync[F]): F[CancelableF[F]]", "member" : "monix.catnap.CancelableF.apply", "link" : "monix\/catnap\/CancelableF$.html#apply[F[_]](token:F[Unit])(implicitF:cats.effect.Sync[F]):F[monix.catnap.CancelableF[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/CancelableF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/CancelableF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/CancelableF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/CancelableF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/CancelableF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/CancelableF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/CancelableF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CancelableF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CancelableF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CancelableF$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/CancelableF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/CancelableF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/CancelableF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/CancelableF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/CancelableF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/CancelableF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/CancelableF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/CancelableF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/CancelableF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/catnap\/CancelableF.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/CancelableF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/CancelableF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/CancelableF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/CancelableF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/CancelableF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/CancelableF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/CancelableF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CancelableF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CancelableF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CancelableF.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/CancelableF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/CancelableF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/CancelableF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/CancelableF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/CancelableF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/CancelableF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/CancelableF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/CancelableF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/CancelableF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cancel", "tail" : "(): CancelToken[F]", "member" : "monix.catnap.CancelableF.cancel", "link" : "monix\/catnap\/CancelableF.html#cancel:cats.effect.CancelToken[F]", "kind" : "abstract def"}], "shortDescription" : "Represents a pure data structure that describes an effectful,idempotent action that can be used to cancel async computations,or to release resources."}, {"name" : "monix.catnap.ChannelF", "trait" : "monix\/catnap\/ChannelF.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ChannelF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ChannelF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ChannelF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ChannelF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ChannelF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ChannelF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ChannelF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ChannelF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ChannelF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ChannelF.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ChannelF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ChannelF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ChannelF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ChannelF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ChannelF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ChannelF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ChannelF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ChannelF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ChannelF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "consumeWithConfig", "tail" : "(config: Config): Resource[F, ConsumerF[F, E, A]]", "member" : "monix.catnap.ChannelF.consumeWithConfig", "link" : "monix\/catnap\/ChannelF.html#consumeWithConfig(config:monix.catnap.ConsumerF.Config):cats.effect.Resource[F,monix.catnap.ConsumerF[F,E,A]]", "kind" : "abstract def"}, {"label" : "consume", "tail" : "(): Resource[F, ConsumerF[F, E, A]]", "member" : "monix.catnap.ChannelF.consume", "link" : "monix\/catnap\/ChannelF.html#consume:cats.effect.Resource[F,monix.catnap.ConsumerF[F,E,A]]", "kind" : "abstract def"}], "shortDescription" : "Channel is a communication channel that can be consumed viaconsume."}, {"name" : "monix.catnap.CircuitBreaker", "shortDescription" : "The CircuitBreaker is used to provide stability and preventcascading failures in distributed systems.", "object" : "monix\/catnap\/CircuitBreaker$.html", "members_class" : [{"label" : "doOnOpen", "tail" : "(callback: F[Unit]): CircuitBreaker[F]", "member" : "monix.catnap.CircuitBreaker.doOnOpen", "link" : "monix\/catnap\/CircuitBreaker.html#doOnOpen(callback:F[Unit]):monix.catnap.CircuitBreaker[F]", "kind" : "def"}, {"label" : "doOnHalfOpen", "tail" : "(callback: F[Unit]): CircuitBreaker[F]", "member" : "monix.catnap.CircuitBreaker.doOnHalfOpen", "link" : "monix\/catnap\/CircuitBreaker.html#doOnHalfOpen(callback:F[Unit]):monix.catnap.CircuitBreaker[F]", "kind" : "def"}, {"label" : "doOnClosed", "tail" : "(callback: F[Unit]): CircuitBreaker[F]", "member" : "monix.catnap.CircuitBreaker.doOnClosed", "link" : "monix\/catnap\/CircuitBreaker.html#doOnClosed(callback:F[Unit]):monix.catnap.CircuitBreaker[F]", "kind" : "def"}, {"label" : "doOnRejectedTask", "tail" : "(callback: F[Unit]): CircuitBreaker[F]", "member" : "monix.catnap.CircuitBreaker.doOnRejectedTask", "link" : "monix\/catnap\/CircuitBreaker.html#doOnRejectedTask(callback:F[Unit]):monix.catnap.CircuitBreaker[F]", "kind" : "def"}, {"label" : "awaitClose", "tail" : "(F: OrElse[Concurrent[F], Async[F]]): F[Unit]", "member" : "monix.catnap.CircuitBreaker.awaitClose", "link" : "monix\/catnap\/CircuitBreaker.html#awaitClose(implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]]):F[Unit]", "kind" : "def"}, {"label" : "protect", "tail" : "(task: F[A]): F[A]", "member" : "monix.catnap.CircuitBreaker.protect", "link" : "monix\/catnap\/CircuitBreaker.html#protect[A](task:F[A]):F[A]", "kind" : "def"}, {"label" : "state", "tail" : ": F[State]", "member" : "monix.catnap.CircuitBreaker.state", "link" : "monix\/catnap\/CircuitBreaker.html#state:F[monix.catnap.CircuitBreaker.State]", "kind" : "val"}, {"label" : "maxResetTimeout", "tail" : ": Duration", "member" : "monix.catnap.CircuitBreaker.maxResetTimeout", "link" : "monix\/catnap\/CircuitBreaker.html#maxResetTimeout:scala.concurrent.duration.Duration", "kind" : "val"}, {"label" : "exponentialBackoffFactor", "tail" : ": Double", "member" : "monix.catnap.CircuitBreaker.exponentialBackoffFactor", "link" : "monix\/catnap\/CircuitBreaker.html#exponentialBackoffFactor:Double", "kind" : "val"}, {"label" : "resetTimeout", "tail" : ": FiniteDuration", "member" : "monix.catnap.CircuitBreaker.resetTimeout", "link" : "monix\/catnap\/CircuitBreaker.html#resetTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "maxFailures", "tail" : ": Int", "member" : "monix.catnap.CircuitBreaker.maxFailures", "link" : "monix\/catnap\/CircuitBreaker.html#maxFailures:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/CircuitBreaker.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/CircuitBreaker.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/CircuitBreaker.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/CircuitBreaker.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/CircuitBreaker.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/CircuitBreaker.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/CircuitBreaker.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CircuitBreaker.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CircuitBreaker.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CircuitBreaker.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/CircuitBreaker.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/CircuitBreaker.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/CircuitBreaker.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/CircuitBreaker.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/CircuitBreaker.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/CircuitBreaker.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/CircuitBreaker.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/CircuitBreaker.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/CircuitBreaker.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "HalfOpen", "tail" : "", "member" : "monix.catnap.CircuitBreaker.HalfOpen", "link" : "monix\/catnap\/CircuitBreaker$.html#HalfOpen", "kind" : "object"}, {"label" : "HalfOpen", "tail" : "", "member" : "monix.catnap.CircuitBreaker.HalfOpen", "link" : "monix\/catnap\/CircuitBreaker$.html#HalfOpenextendsCircuitBreaker.State", "kind" : "final class"}, {"label" : "Open", "tail" : "", "member" : "monix.catnap.CircuitBreaker.Open", "link" : "monix\/catnap\/CircuitBreaker$.html#Open", "kind" : "object"}, {"label" : "Open", "tail" : "", "member" : "monix.catnap.CircuitBreaker.Open", "link" : "monix\/catnap\/CircuitBreaker$.html#OpenextendsCircuitBreaker.State", "kind" : "final class"}, {"label" : "Closed", "tail" : "", "member" : "monix.catnap.CircuitBreaker.Closed", "link" : "monix\/catnap\/CircuitBreaker$.html#ClosedextendsCircuitBreaker.StatewithProductwithSerializable", "kind" : "final case class"}, {"label" : "State", "tail" : "", "member" : "monix.catnap.CircuitBreaker.State", "link" : "monix\/catnap\/CircuitBreaker$.html#StateextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Timestamp", "tail" : "", "member" : "monix.catnap.CircuitBreaker.Timestamp", "link" : "monix\/catnap\/CircuitBreaker$.html#Timestamp=Long", "kind" : "type"}, {"label" : "Builders", "tail" : "", "member" : "monix.catnap.CircuitBreaker.Builders", "link" : "monix\/catnap\/CircuitBreaker$.html#Builders[F[_]]extendsAnyValwithCircuitBreakerDocs", "kind" : "final class"}, {"label" : "unsafe", "tail" : "(maxFailures: Int, resetTimeout: FiniteDuration, exponentialBackoffFactor: Double, maxResetTimeout: Duration, padding: PaddingStrategy)(F: Sync[F], clock: Clock[F]): CircuitBreaker[F]", "member" : "monix.catnap.CircuitBreaker.unsafe", "link" : "monix\/catnap\/CircuitBreaker$.html#unsafe[F[_]](maxFailures:Int,resetTimeout:scala.concurrent.duration.FiniteDuration,exponentialBackoffFactor:Double,maxResetTimeout:scala.concurrent.duration.Duration,padding:monix.execution.atomic.PaddingStrategy)(implicitF:cats.effect.Sync[F],implicitclock:cats.effect.Clock[F]):monix.catnap.CircuitBreaker[F]", "kind" : "def"}, {"label" : "of", "tail" : "(maxFailures: Int, resetTimeout: FiniteDuration, exponentialBackoffFactor: Double, maxResetTimeout: Duration, padding: PaddingStrategy)(F: Sync[F], clock: Clock[F]): F[CircuitBreaker[F]]", "member" : "monix.catnap.CircuitBreaker.of", "link" : "monix\/catnap\/CircuitBreaker$.html#of[F[_]](maxFailures:Int,resetTimeout:scala.concurrent.duration.FiniteDuration,exponentialBackoffFactor:Double,maxResetTimeout:scala.concurrent.duration.Duration,padding:monix.execution.atomic.PaddingStrategy)(implicitF:cats.effect.Sync[F],implicitclock:cats.effect.Clock[F]):F[monix.catnap.CircuitBreaker[F]]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Sync[F]): Builders[F]", "member" : "monix.catnap.CircuitBreaker.apply", "link" : "monix\/catnap\/CircuitBreaker$.html#apply[F[_]](implicitF:cats.effect.Sync[F]):monix.catnap.CircuitBreaker.Builders[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/CircuitBreaker$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/CircuitBreaker$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/CircuitBreaker$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/CircuitBreaker$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/CircuitBreaker$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/CircuitBreaker$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/CircuitBreaker$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CircuitBreaker$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CircuitBreaker$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/CircuitBreaker$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/CircuitBreaker$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/CircuitBreaker$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/CircuitBreaker$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/CircuitBreaker$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/CircuitBreaker$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/CircuitBreaker$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/CircuitBreaker$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/CircuitBreaker$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/CircuitBreaker$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/catnap\/CircuitBreaker.html", "kind" : "class"}, {"name" : "monix.catnap.ConcurrentChannel", "shortDescription" : "ConcurrentChannel can be used to model complex producer-consumer communication channels.", "object" : "monix\/catnap\/ConcurrentChannel$.html", "members_class" : [{"label" : "awaitConsumers", "tail" : "(n: Int): F[Boolean]", "member" : "monix.catnap.ConcurrentChannel.awaitConsumers", "link" : "monix\/catnap\/ConcurrentChannel.html#awaitConsumers(n:Int):F[Boolean]", "kind" : "def"}, {"label" : "consumeWithConfig", "tail" : "(config: Config): Resource[F, ConsumerF[F, E, A]]", "member" : "monix.catnap.ConcurrentChannel.consumeWithConfig", "link" : "monix\/catnap\/ConcurrentChannel.html#consumeWithConfig(config:monix.catnap.ConsumerF.Config):cats.effect.Resource[F,monix.catnap.ConsumerF[F,E,A]]", "kind" : "def"}, {"label" : "consume", "tail" : "(): Resource[F, ConsumerF[F, E, A]]", "member" : "monix.catnap.ConcurrentChannel.consume", "link" : "monix\/catnap\/ConcurrentChannel.html#consume:cats.effect.Resource[F,monix.catnap.ConsumerF[F,E,A]]", "kind" : "def"}, {"label" : "halt", "tail" : "(e: E): F[Unit]", "member" : "monix.catnap.ConcurrentChannel.halt", "link" : "monix\/catnap\/ConcurrentChannel.html#halt(e:E):F[Unit]", "kind" : "def"}, {"label" : "pushMany", "tail" : "(seq: Iterable[A]): F[Boolean]", "member" : "monix.catnap.ConcurrentChannel.pushMany", "link" : "monix\/catnap\/ConcurrentChannel.html#pushMany(seq:Iterable[A]):F[Boolean]", "kind" : "def"}, {"label" : "push", "tail" : "(a: A): F[Boolean]", "member" : "monix.catnap.ConcurrentChannel.push", "link" : "monix\/catnap\/ConcurrentChannel.html#push(a:A):F[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ConcurrentChannel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ConcurrentChannel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ConcurrentChannel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ConcurrentChannel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ConcurrentChannel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ConcurrentChannel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ConcurrentChannel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentChannel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentChannel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentChannel.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ConcurrentChannel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ConcurrentChannel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ConcurrentChannel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ConcurrentChannel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ConcurrentChannel.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ConcurrentChannel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ConcurrentChannel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ConcurrentChannel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ConcurrentChannel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ApplyBuilders", "tail" : "", "member" : "monix.catnap.ConcurrentChannel.ApplyBuilders", "link" : "monix\/catnap\/ConcurrentChannel$.html#ApplyBuilders[F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "unsafe", "tail" : "(defaultConsumerConfig: Config, producerType: ProducerSide)(F: Concurrent[F], cs: ContextShift[F]): ConcurrentChannel[F, E, A]", "member" : "monix.catnap.ConcurrentChannel.unsafe", "link" : "monix\/catnap\/ConcurrentChannel$.html#unsafe[F[_],E,A](defaultConsumerConfig:monix.catnap.ConsumerF.Config,producerType:monix.execution.ChannelType.ProducerSide)(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):monix.catnap.ConcurrentChannel[F,E,A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(defaultConsumerConfig: Config, producerType: ProducerSide)(F: Concurrent[F], cs: ContextShift[F]): F[ConcurrentChannel[F, E, A]]", "member" : "monix.catnap.ConcurrentChannel.withConfig", "link" : "monix\/catnap\/ConcurrentChannel$.html#withConfig[F[_],E,A](defaultConsumerConfig:monix.catnap.ConsumerF.Config,producerType:monix.execution.ChannelType.ProducerSide)(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.ConcurrentChannel[F,E,A]]", "kind" : "def"}, {"label" : "of", "tail" : "(F: Concurrent[F], cs: ContextShift[F]): F[ConcurrentChannel[F, E, A]]", "member" : "monix.catnap.ConcurrentChannel.of", "link" : "monix\/catnap\/ConcurrentChannel$.html#of[F[_],E,A](implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.ConcurrentChannel[F,E,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Concurrent[F]): ApplyBuilders[F]", "member" : "monix.catnap.ConcurrentChannel.apply", "link" : "monix\/catnap\/ConcurrentChannel$.html#apply[F[_]](implicitF:cats.effect.Concurrent[F]):monix.catnap.ConcurrentChannel.ApplyBuilders[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ConcurrentChannel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ConcurrentChannel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ConcurrentChannel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ConcurrentChannel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ConcurrentChannel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ConcurrentChannel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ConcurrentChannel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentChannel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentChannel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentChannel$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ConcurrentChannel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ConcurrentChannel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ConcurrentChannel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ConcurrentChannel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ConcurrentChannel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ConcurrentChannel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ConcurrentChannel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ConcurrentChannel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ConcurrentChannel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/catnap\/ConcurrentChannel.html", "kind" : "class"}, {"name" : "monix.catnap.ConcurrentQueue", "shortDescription" : "A high-performance, back-pressured, generic concurrent queue implementation.", "object" : "monix\/catnap\/ConcurrentQueue$.html", "members_class" : [{"label" : "isEmpty", "tail" : "(): F[Boolean]", "member" : "monix.catnap.ConcurrentQueue.isEmpty", "link" : "monix\/catnap\/ConcurrentQueue.html#isEmpty:F[Boolean]", "kind" : "def"}, {"label" : "clear", "tail" : "(): F[Unit]", "member" : "monix.catnap.ConcurrentQueue.clear", "link" : "monix\/catnap\/ConcurrentQueue.html#clear:F[Unit]", "kind" : "def"}, {"label" : "drain", "tail" : "(minLength: Int, maxLength: Int): F[Seq[A]]", "member" : "monix.catnap.ConcurrentQueue.drain", "link" : "monix\/catnap\/ConcurrentQueue.html#drain(minLength:Int,maxLength:Int):F[Seq[A]]", "kind" : "def"}, {"label" : "poll", "tail" : "(): F[A]", "member" : "monix.catnap.ConcurrentQueue.poll", "link" : "monix\/catnap\/ConcurrentQueue.html#poll:F[A]", "kind" : "def"}, {"label" : "tryPoll", "tail" : "(): F[Option[A]]", "member" : "monix.catnap.ConcurrentQueue.tryPoll", "link" : "monix\/catnap\/ConcurrentQueue.html#tryPoll:F[Option[A]]", "kind" : "def"}, {"label" : "offerMany", "tail" : "(seq: Iterable[A]): F[Unit]", "member" : "monix.catnap.ConcurrentQueue.offerMany", "link" : "monix\/catnap\/ConcurrentQueue.html#offerMany(seq:Iterable[A]):F[Unit]", "kind" : "def"}, {"label" : "offer", "tail" : "(a: A): F[Unit]", "member" : "monix.catnap.ConcurrentQueue.offer", "link" : "monix\/catnap\/ConcurrentQueue.html#offer(a:A):F[Unit]", "kind" : "def"}, {"label" : "tryOffer", "tail" : "(a: A): F[Boolean]", "member" : "monix.catnap.ConcurrentQueue.tryOffer", "link" : "monix\/catnap\/ConcurrentQueue.html#tryOffer(a:A):F[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ConcurrentQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ConcurrentQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ConcurrentQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ConcurrentQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ConcurrentQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ConcurrentQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ConcurrentQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ConcurrentQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ConcurrentQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ConcurrentQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ConcurrentQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ConcurrentQueue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ConcurrentQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ConcurrentQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ConcurrentQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ConcurrentQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ApplyBuilders", "tail" : "", "member" : "monix.catnap.ConcurrentQueue.ApplyBuilders", "link" : "monix\/catnap\/ConcurrentQueue$.html#ApplyBuilders[F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "unsafe", "tail" : "(capacity: BufferCapacity, channelType: ChannelType)(F: Concurrent[F], cs: ContextShift[F]): ConcurrentQueue[F, A]", "member" : "monix.catnap.ConcurrentQueue.unsafe", "link" : "monix\/catnap\/ConcurrentQueue$.html#unsafe[F[_],A](capacity:monix.execution.BufferCapacity,channelType:monix.execution.ChannelType)(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):monix.catnap.ConcurrentQueue[F,A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(capacity: BufferCapacity, channelType: ChannelType)(F: Concurrent[F], cs: ContextShift[F]): F[ConcurrentQueue[F, A]]", "member" : "monix.catnap.ConcurrentQueue.withConfig", "link" : "monix\/catnap\/ConcurrentQueue$.html#withConfig[F[_],A](capacity:monix.execution.BufferCapacity,channelType:monix.execution.ChannelType)(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.ConcurrentQueue[F,A]]", "kind" : "def"}, {"label" : "unbounded", "tail" : "(chunkSizeHint: Option[Int])(F: Concurrent[F], cs: ContextShift[F]): F[ConcurrentQueue[F, A]]", "member" : "monix.catnap.ConcurrentQueue.unbounded", "link" : "monix\/catnap\/ConcurrentQueue$.html#unbounded[F[_],A](chunkSizeHint:Option[Int])(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.ConcurrentQueue[F,A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(capacity: Int)(F: Concurrent[F], cs: ContextShift[F]): F[ConcurrentQueue[F, A]]", "member" : "monix.catnap.ConcurrentQueue.bounded", "link" : "monix\/catnap\/ConcurrentQueue$.html#bounded[F[_],A](capacity:Int)(implicitF:cats.effect.Concurrent[F],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.ConcurrentQueue[F,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Concurrent[F]): ApplyBuilders[F]", "member" : "monix.catnap.ConcurrentQueue.apply", "link" : "monix\/catnap\/ConcurrentQueue$.html#apply[F[_]](implicitF:cats.effect.Concurrent[F]):monix.catnap.ConcurrentQueue.ApplyBuilders[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ConcurrentQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ConcurrentQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ConcurrentQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ConcurrentQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ConcurrentQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ConcurrentQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ConcurrentQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConcurrentQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ConcurrentQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ConcurrentQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ConcurrentQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ConcurrentQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ConcurrentQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ConcurrentQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ConcurrentQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ConcurrentQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ConcurrentQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/catnap\/ConcurrentQueue.html", "kind" : "class"}, {"name" : "monix.catnap.ConsumerF", "object" : "monix\/catnap\/ConsumerF$.html", "members_object" : [{"label" : "Config", "tail" : "", "member" : "monix.catnap.ConsumerF.Config", "link" : "monix\/catnap\/ConsumerF$.html#Config", "kind" : "object"}, {"label" : "Config", "tail" : "", "member" : "monix.catnap.ConsumerF.Config", "link" : "monix\/catnap\/ConsumerF$.html#ConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ConsumerF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ConsumerF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ConsumerF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ConsumerF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ConsumerF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ConsumerF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ConsumerF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConsumerF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConsumerF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConsumerF$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ConsumerF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ConsumerF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ConsumerF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ConsumerF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ConsumerF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ConsumerF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ConsumerF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ConsumerF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ConsumerF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/catnap\/ConsumerF.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ConsumerF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ConsumerF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ConsumerF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ConsumerF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ConsumerF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ConsumerF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ConsumerF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConsumerF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConsumerF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ConsumerF.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ConsumerF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ConsumerF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ConsumerF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ConsumerF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ConsumerF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ConsumerF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ConsumerF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ConsumerF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ConsumerF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pullMany", "tail" : "(minLength: Int, maxLength: Int): F[Either[E, Seq[A]]]", "member" : "monix.catnap.ConsumerF.pullMany", "link" : "monix\/catnap\/ConsumerF.html#pullMany(minLength:Int,maxLength:Int):F[Either[E,Seq[A]]]", "kind" : "abstract def"}, {"label" : "pull", "tail" : "(): F[Either[E, A]]", "member" : "monix.catnap.ConsumerF.pull", "link" : "monix\/catnap\/ConsumerF.html#pull:F[Either[E,A]]", "kind" : "abstract def"}], "shortDescription" : "A simple interface that models the consumer side of a producer-consumercommunication channel."}, {"name" : "monix.catnap.FutureLift", "object" : "monix\/catnap\/FutureLift$.html", "members_object" : [{"label" : "Deprecated", "tail" : "", "member" : "monix.catnap.FutureLift.Deprecated", "link" : "monix\/catnap\/FutureLift$.html#Deprecated[F[_],Future[_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "Syntax", "tail" : "", "member" : "monix.catnap.FutureLift.Syntax", "link" : "monix\/catnap\/FutureLift$.html#Syntax[F[_],Future[_],A]extendsAny", "kind" : "trait"}, {"label" : "scalaFutureLiftForConcurrentOrAsync", "tail" : "(F: OrElse[Concurrent[F], Async[F]]): FutureLift[F, MF]", "member" : "monix.catnap.FutureLift.scalaFutureLiftForConcurrentOrAsync", "link" : "monix\/catnap\/FutureLift$.html#scalaFutureLiftForConcurrentOrAsync[F[_],MF[T]<:scala.concurrent.Future[T]](implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]]):monix.catnap.FutureLift[F,MF]", "kind" : "implicit def"}, {"label" : "scalaToConcurrentOrAsync", "tail" : "(fa: F[MF[A]])(F: OrElse[Concurrent[F], Async[F]]): F[A]", "member" : "monix.catnap.FutureLift.scalaToConcurrentOrAsync", "link" : "monix\/catnap\/FutureLift$.html#scalaToConcurrentOrAsync[F[_],MF[T]<:scala.concurrent.Future[T],A](fa:F[MF[A]])(implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]]):F[A]", "kind" : "def"}, {"label" : "scalaToConcurrent", "tail" : "(fa: F[MF[A]])(F: Concurrent[F]): F[A]", "member" : "monix.catnap.FutureLift.scalaToConcurrent", "link" : "monix\/catnap\/FutureLift$.html#scalaToConcurrent[F[_],MF[T]<:scala.concurrent.Future[T],A](fa:F[MF[A]])(implicitF:cats.effect.Concurrent[F]):F[A]", "kind" : "def"}, {"label" : "scalaToAsync", "tail" : "(fa: F[MF[A]])(F: Async[F]): F[A]", "member" : "monix.catnap.FutureLift.scalaToAsync", "link" : "monix\/catnap\/FutureLift$.html#scalaToAsync[F[_],MF[T]<:scala.concurrent.Future[T],A](fa:F[MF[A]])(implicitF:cats.effect.Async[F]):F[A]", "kind" : "def"}, {"label" : "from", "tail" : "(fa: F[Future[A]])(F: FutureLift[F, Future]): F[A]", "member" : "monix.catnap.FutureLift.from", "link" : "monix\/catnap\/FutureLift$.html#from[F[_],Future[_],A](fa:F[Future[A]])(implicitF:monix.catnap.FutureLift[F,Future]):F[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: FutureLift[F, Future]): FutureLift[F, Future]", "member" : "monix.catnap.FutureLift.apply", "link" : "monix\/catnap\/FutureLift$.html#apply[F[_],Future[_]](implicitF:monix.catnap.FutureLift[F,Future]):monix.catnap.FutureLift[F,Future]", "kind" : "def"}, {"label" : "Lambda", "tail" : "", "member" : "monix.catnap.FutureLift.Lambda", "link" : "monix\/catnap\/FutureLift$.html#Lambda[F[_],Future[_],A]=F[Future[A]]", "kind" : "type"}, {"label" : "javaCompletableLiftForConcurrentOrAsync", "tail" : "(F: OrElse[Concurrent[F], Async[F]]): FutureLift[F, CompletableFuture]", "member" : "monix.catnap.internal.FutureLiftForPlatform.javaCompletableLiftForConcurrentOrAsync", "link" : "monix\/catnap\/FutureLift$.html#javaCompletableLiftForConcurrentOrAsync[F[_]](implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]]):monix.catnap.FutureLift[F,java.util.concurrent.CompletableFuture]", "kind" : "implicit def"}, {"label" : "javaCompletableToConcurrentOrAsync", "tail" : "(fa: F[CompletableFuture[A]])(F: OrElse[Concurrent[F], Async[F]]): F[A]", "member" : "monix.catnap.internal.FutureLiftForPlatform.javaCompletableToConcurrentOrAsync", "link" : "monix\/catnap\/FutureLift$.html#javaCompletableToConcurrentOrAsync[F[_],A](fa:F[java.util.concurrent.CompletableFuture[A]])(implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]]):F[A]", "kind" : "def"}, {"label" : "javaCompletableToAsync", "tail" : "(fa: F[CompletableFuture[A]])(F: Async[F]): F[A]", "member" : "monix.catnap.internal.FutureLiftForPlatform.javaCompletableToAsync", "link" : "monix\/catnap\/FutureLift$.html#javaCompletableToAsync[F[_],A](fa:F[java.util.concurrent.CompletableFuture[A]])(implicitF:cats.effect.Async[F]):F[A]", "kind" : "def"}, {"label" : "javaCompletableToConcurrent", "tail" : "(fa: F[CompletableFuture[A]])(F: Concurrent[F]): F[A]", "member" : "monix.catnap.internal.FutureLiftForPlatform.javaCompletableToConcurrent", "link" : "monix\/catnap\/FutureLift$.html#javaCompletableToConcurrent[F[_],A](fa:F[java.util.concurrent.CompletableFuture[A]])(implicitF:cats.effect.Concurrent[F]):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/FutureLift$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/FutureLift$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/FutureLift$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/FutureLift$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/FutureLift$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/FutureLift$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/FutureLift$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/FutureLift$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/FutureLift$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/FutureLift$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/FutureLift$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/FutureLift$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/FutureLift$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/FutureLift$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/FutureLift$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/FutureLift$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/FutureLift$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/FutureLift$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/FutureLift$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/catnap\/FutureLift.html", "kind" : "trait", "members_trait" : [{"label" : "narrow", "tail" : "(): FunctionK[F0, F]", "member" : "cats.arrow.FunctionK.narrow", "link" : "monix\/catnap\/FutureLift.html#narrow[F0[x]<:F[x]]:cats.arrow.FunctionK[F0,G]", "kind" : "def"}, {"label" : "widen", "tail" : "(): FunctionK[[γ$0$]F[Future[γ$0$]], G0]", "member" : "cats.arrow.FunctionK.widen", "link" : "monix\/catnap\/FutureLift.html#widen[G0[x]>:G[x]]:cats.arrow.FunctionK[F,G0]", "kind" : "def"}, {"label" : "and", "tail" : "(h: FunctionK[[γ$0$]F[Future[γ$0$]], H]): FunctionK[[γ$0$]F[Future[γ$0$]], [γ$2$]Tuple2K[F, H, γ$2$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/catnap\/FutureLift.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$2$]cats.data.Tuple2K[G,H,γ$2$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, F]): FunctionK[[γ$0$]EitherK[[γ$0$]F[Future[γ$0$]], H, γ$0$], F]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/catnap\/FutureLift.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$0$]cats.data.EitherK[F,H,γ$0$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[F, H]): FunctionK[[γ$0$]F[Future[γ$0$]], H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/catnap\/FutureLift.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, [γ$0$]F[Future[γ$0$]]]): FunctionK[E, F]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/catnap\/FutureLift.html#compose[E[_]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/FutureLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/FutureLift.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/FutureLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/FutureLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/FutureLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/FutureLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/FutureLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/FutureLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/FutureLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/FutureLift.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/FutureLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/FutureLift.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/FutureLift.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/FutureLift.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/FutureLift.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/FutureLift.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/FutureLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/FutureLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/FutureLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[Future[A]]): F[A]", "member" : "monix.catnap.FutureLift.apply", "link" : "monix\/catnap\/FutureLift.html#apply[A](fa:F[Future[A]]):F[A]", "kind" : "abstract def"}], "shortDescription" : "A type class for conversions from scala.concurrent.Future orother Future-like data type (e.g."}, {"name" : "monix.catnap.MVar", "shortDescription" : "A mutable location, that is either empty or containsa value of type A.", "object" : "monix\/catnap\/MVar$.html", "members_class" : [{"label" : "modify_", "tail" : "(f: (A) => F[A]): F[Unit]", "member" : "monix.catnap.MVar.modify_", "link" : "monix\/catnap\/MVar.html#modify_(f:A=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "modify", "tail" : "(f: (A) => F[(A, B)]): F[B]", "member" : "monix.catnap.MVar.modify", "link" : "monix\/catnap\/MVar.html#modify[B](f:A=>F[(A,B)]):F[B]", "kind" : "def"}, {"label" : "use", "tail" : "(f: (A) => F[B]): F[B]", "member" : "monix.catnap.MVar.use", "link" : "monix\/catnap\/MVar.html#use[B](f:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "swap", "tail" : "(newValue: A): F[A]", "member" : "monix.catnap.MVar.swap", "link" : "monix\/catnap\/MVar.html#swap(newValue:A):F[A]", "kind" : "def"}, {"label" : "tryRead", "tail" : "(): F[Option[A]]", "member" : "monix.catnap.MVar.tryRead", "link" : "monix\/catnap\/MVar.html#tryRead:F[Option[A]]", "kind" : "def"}, {"label" : "read", "tail" : "(): F[A]", "member" : "monix.catnap.MVar.read", "link" : "monix\/catnap\/MVar.html#read:F[A]", "kind" : "def"}, {"label" : "tryTake", "tail" : "(): F[Option[A]]", "member" : "monix.catnap.MVar.tryTake", "link" : "monix\/catnap\/MVar.html#tryTake:F[Option[A]]", "kind" : "def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "monix.catnap.MVar.take", "link" : "monix\/catnap\/MVar.html#take:F[A]", "kind" : "def"}, {"label" : "tryPut", "tail" : "(a: A): F[Boolean]", "member" : "monix.catnap.MVar.tryPut", "link" : "monix\/catnap\/MVar.html#tryPut(a:A):F[Boolean]", "kind" : "def"}, {"label" : "put", "tail" : "(a: A): F[Unit]", "member" : "monix.catnap.MVar.put", "link" : "monix\/catnap\/MVar.html#put(a:A):F[Unit]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): F[Boolean]", "member" : "monix.catnap.MVar.isEmpty", "link" : "monix\/catnap\/MVar.html#isEmpty:F[Boolean]", "kind" : "def"}, {"label" : "imapK", "tail" : "(f: ~>[F, G], g: ~>[G, F]): MVar2[G, A]", "member" : "cats.effect.concurrent.MVar2.imapK", "link" : "monix\/catnap\/MVar.html#imapK[G[_<:<?>]](f:F~>G,g:G~>F):cats.effect.concurrent.MVar2[G,A]", "kind" : "def"}, {"label" : "mapK", "tail" : "(f: ~>[F, G]): cats.effect.concurrent.MVar[G, A]", "member" : "cats.effect.concurrent.MVar.mapK", "link" : "monix\/catnap\/MVar.html#mapK[G[_<:<?>]](f:F~>G):cats.effect.concurrent.MVar[G,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/MVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/MVar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/MVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/MVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/MVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/MVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/MVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/MVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/MVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/MVar.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/MVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/MVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/MVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/MVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/MVar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/MVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/MVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/MVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/MVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ApplyBuilders", "tail" : "", "member" : "monix.catnap.MVar.ApplyBuilders", "link" : "monix\/catnap\/MVar$.html#ApplyBuilders[F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "empty", "tail" : "(ps: PaddingStrategy)(F: OrElse[Concurrent[F], Async[F]], cs: ContextShift[F]): F[MVar[F, A]]", "member" : "monix.catnap.MVar.empty", "link" : "monix\/catnap\/MVar$.html#empty[F[_],A](ps:monix.execution.atomic.PaddingStrategy)(implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.MVar[F,A]]", "kind" : "def"}, {"label" : "of", "tail" : "(initial: A, ps: PaddingStrategy)(F: OrElse[Concurrent[F], Async[F]], cs: ContextShift[F]): F[MVar[F, A]]", "member" : "monix.catnap.MVar.of", "link" : "monix\/catnap\/MVar$.html#of[F[_],A](initial:A,ps:monix.execution.atomic.PaddingStrategy)(implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.MVar[F,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: OrElse[Concurrent[F], Async[F]]): ApplyBuilders[F]", "member" : "monix.catnap.MVar.apply", "link" : "monix\/catnap\/MVar$.html#apply[F[_]](implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]]):monix.catnap.MVar.ApplyBuilders[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/MVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/MVar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/MVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/MVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/MVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/MVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/MVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/MVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/MVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/MVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/MVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/MVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/MVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/MVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/MVar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/MVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/MVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/MVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/MVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/catnap\/MVar.html", "kind" : "class"}, {"name" : "monix.catnap.OrElse", "object" : "monix\/catnap\/OrElse$.html", "members_object" : [{"label" : "Secondary", "tail" : "", "member" : "monix.catnap.OrElse0.Secondary", "link" : "monix\/catnap\/OrElse$.html#Secondary[+B]extendsOrElse[Nothing,B]", "kind" : "final class"}, {"label" : "Primary", "tail" : "", "member" : "monix.catnap.OrElse0.Primary", "link" : "monix\/catnap\/OrElse$.html#Primary[+A]extendsOrElse[A,Nothing]", "kind" : "final class"}, {"label" : "primary", "tail" : "(a: A): OrElse[A, B]", "member" : "monix.catnap.OrElse.primary", "link" : "monix\/catnap\/OrElse$.html#primary[A,B](implicita:A):monix.catnap.OrElse[A,B]", "kind" : "implicit def"}, {"label" : "secondary", "tail" : "(b: B): OrElse[A, B]", "member" : "monix.catnap.OrElse0.secondary", "link" : "monix\/catnap\/OrElse$.html#secondary[A,B](implicitb:B):monix.catnap.OrElse[A,B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/OrElse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/OrElse$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/OrElse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/OrElse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/OrElse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/OrElse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/OrElse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/OrElse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/OrElse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/OrElse$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/OrElse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/OrElse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/OrElse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/OrElse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/OrElse$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/OrElse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/OrElse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/OrElse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/OrElse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/catnap\/OrElse.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/OrElse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/OrElse.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/OrElse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/OrElse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/OrElse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/OrElse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/OrElse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/OrElse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/OrElse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/OrElse.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/OrElse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/OrElse.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/OrElse.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/OrElse.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/OrElse.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/OrElse.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/OrElse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/OrElse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/OrElse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unify", "tail" : "(ev: <:<[A, C]): C", "member" : "monix.catnap.OrElse.unify", "link" : "monix\/catnap\/OrElse.html#unify[C>:B](implicitev:A<:<C):C", "kind" : "abstract def"}, {"label" : "fold", "tail" : "(prim: (A) => C, sec: (B) => C): C", "member" : "monix.catnap.OrElse.fold", "link" : "monix\/catnap\/OrElse.html#fold[C](prim:A=>C,sec:B=>C):C", "kind" : "abstract def"}], "shortDescription" : "A type class for prioritized implicit search."}, {"name" : "monix.catnap.ProducerF", "trait" : "monix\/catnap\/ProducerF.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/ProducerF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/ProducerF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/ProducerF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/ProducerF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/ProducerF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/ProducerF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/ProducerF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ProducerF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ProducerF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/ProducerF.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/ProducerF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/ProducerF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/ProducerF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/ProducerF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/ProducerF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/ProducerF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/ProducerF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/ProducerF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/ProducerF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "awaitConsumers", "tail" : "(n: Int): F[Boolean]", "member" : "monix.catnap.ProducerF.awaitConsumers", "link" : "monix\/catnap\/ProducerF.html#awaitConsumers(n:Int):F[Boolean]", "kind" : "abstract def"}, {"label" : "halt", "tail" : "(e: E): F[Unit]", "member" : "monix.catnap.ProducerF.halt", "link" : "monix\/catnap\/ProducerF.html#halt(e:E):F[Unit]", "kind" : "abstract def"}, {"label" : "pushMany", "tail" : "(seq: Iterable[A]): F[Boolean]", "member" : "monix.catnap.ProducerF.pushMany", "link" : "monix\/catnap\/ProducerF.html#pushMany(seq:Iterable[A]):F[Boolean]", "kind" : "abstract def"}, {"label" : "push", "tail" : "(a: A): F[Boolean]", "member" : "monix.catnap.ProducerF.push", "link" : "monix\/catnap\/ProducerF.html#push(a:A):F[Boolean]", "kind" : "abstract def"}], "shortDescription" : "A simple interface that models the producer side of a producer-consumercommunication channel."}, {"name" : "monix.catnap.SchedulerEffect", "shortDescription" : "", "object" : "monix\/catnap\/SchedulerEffect$.html", "members_object" : [{"label" : "contextShift", "tail" : "(source: Scheduler)(F: Async[F]): ContextShift[F]", "member" : "monix.catnap.SchedulerEffect.contextShift", "link" : "monix\/catnap\/SchedulerEffect$.html#contextShift[F[_]](source:monix.execution.Scheduler)(implicitF:cats.effect.Async[F]):cats.effect.ContextShift[F]", "kind" : "def"}, {"label" : "timerLiftIO", "tail" : "(source: Scheduler)(F: LiftIO[F]): Timer[F]", "member" : "monix.catnap.SchedulerEffect.timerLiftIO", "link" : "monix\/catnap\/SchedulerEffect$.html#timerLiftIO[F[_]](source:monix.execution.Scheduler)(implicitF:cats.effect.LiftIO[F]):cats.effect.Timer[F]", "kind" : "def"}, {"label" : "timer", "tail" : "(source: Scheduler)(F: Concurrent[F]): Timer[F]", "member" : "monix.catnap.SchedulerEffect.timer", "link" : "monix\/catnap\/SchedulerEffect$.html#timer[F[_]](source:monix.execution.Scheduler)(implicitF:cats.effect.Concurrent[F]):cats.effect.Timer[F]", "kind" : "def"}, {"label" : "clock", "tail" : "(source: Scheduler)(F: Sync[F]): Clock[F]", "member" : "monix.catnap.SchedulerEffect.clock", "link" : "monix\/catnap\/SchedulerEffect$.html#clock[F[_]](source:monix.execution.Scheduler)(implicitF:cats.effect.Sync[F]):cats.effect.Clock[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/SchedulerEffect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/SchedulerEffect$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/SchedulerEffect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/SchedulerEffect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/SchedulerEffect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/SchedulerEffect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/SchedulerEffect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/SchedulerEffect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/SchedulerEffect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/SchedulerEffect$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/SchedulerEffect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/SchedulerEffect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/SchedulerEffect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/SchedulerEffect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/SchedulerEffect$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/SchedulerEffect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/SchedulerEffect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/SchedulerEffect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/SchedulerEffect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.catnap.Semaphore", "shortDescription" : "The Semaphore is an asynchronous semaphore implementation thatlimits the parallelism on task execution.", "object" : "monix\/catnap\/Semaphore$.html", "members_class" : [{"label" : "awaitAvailable", "tail" : "(n: Long): F[Unit]", "member" : "monix.catnap.Semaphore.awaitAvailable", "link" : "monix\/catnap\/Semaphore.html#awaitAvailable(n:Long):F[Unit]", "kind" : "def"}, {"label" : "withPermitN", "tail" : "(n: Long)(fa: F[A]): F[A]", "member" : "monix.catnap.Semaphore.withPermitN", "link" : "monix\/catnap\/Semaphore.html#withPermitN[A](n:Long)(fa:F[A]):F[A]", "kind" : "def"}, {"label" : "withPermit", "tail" : "(fa: F[A]): F[A]", "member" : "monix.catnap.Semaphore.withPermit", "link" : "monix\/catnap\/Semaphore.html#withPermit[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "release", "tail" : "(): F[Unit]", "member" : "monix.catnap.Semaphore.release", "link" : "monix\/catnap\/Semaphore.html#release:F[Unit]", "kind" : "def"}, {"label" : "releaseN", "tail" : "(n: Long): F[Unit]", "member" : "monix.catnap.Semaphore.releaseN", "link" : "monix\/catnap\/Semaphore.html#releaseN(n:Long):F[Unit]", "kind" : "def"}, {"label" : "tryAcquire", "tail" : "(): F[Boolean]", "member" : "monix.catnap.Semaphore.tryAcquire", "link" : "monix\/catnap\/Semaphore.html#tryAcquire:F[Boolean]", "kind" : "def"}, {"label" : "tryAcquireN", "tail" : "(n: Long): F[Boolean]", "member" : "monix.catnap.Semaphore.tryAcquireN", "link" : "monix\/catnap\/Semaphore.html#tryAcquireN(n:Long):F[Boolean]", "kind" : "def"}, {"label" : "acquire", "tail" : "(): F[Unit]", "member" : "monix.catnap.Semaphore.acquire", "link" : "monix\/catnap\/Semaphore.html#acquire:F[Unit]", "kind" : "def"}, {"label" : "acquireN", "tail" : "(n: Long): F[Unit]", "member" : "monix.catnap.Semaphore.acquireN", "link" : "monix\/catnap\/Semaphore.html#acquireN(n:Long):F[Unit]", "kind" : "def"}, {"label" : "count", "tail" : "(): F[Long]", "member" : "monix.catnap.Semaphore.count", "link" : "monix\/catnap\/Semaphore.html#count:F[Long]", "kind" : "def"}, {"label" : "available", "tail" : "(): F[Long]", "member" : "monix.catnap.Semaphore.available", "link" : "monix\/catnap\/Semaphore.html#available:F[Long]", "kind" : "def"}, {"label" : "imapK", "tail" : "(f: ~>[F, G], g: ~>[G, F]): cats.effect.concurrent.Semaphore[G]", "member" : "cats.effect.concurrent.Semaphore.imapK", "link" : "monix\/catnap\/Semaphore.html#imapK[G[_<:<?>]](f:F~>G,g:G~>F):cats.effect.concurrent.Semaphore[G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/Semaphore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/Semaphore.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/Semaphore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/Semaphore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/Semaphore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/Semaphore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/Semaphore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/Semaphore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/Semaphore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/Semaphore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/Semaphore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/Semaphore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/Semaphore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/Semaphore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/Semaphore.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/Semaphore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/Semaphore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/Semaphore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/Semaphore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "DeprecatedExtensions", "tail" : "", "member" : "monix.catnap.Semaphore.DeprecatedExtensions", "link" : "monix\/catnap\/Semaphore$.html#DeprecatedExtensions[F[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "unsafe", "tail" : "(provisioned: Long, ps: PaddingStrategy)(F: OrElse[Concurrent[F], Async[F]], cs: ContextShift[F]): Semaphore[F]", "member" : "monix.catnap.Semaphore.unsafe", "link" : "monix\/catnap\/Semaphore$.html#unsafe[F[_]](provisioned:Long,ps:monix.execution.atomic.PaddingStrategy)(implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]],implicitcs:cats.effect.ContextShift[F]):monix.catnap.Semaphore[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(provisioned: Long, ps: PaddingStrategy)(F: OrElse[Concurrent[F], Async[F]], cs: ContextShift[F]): F[Semaphore[F]]", "member" : "monix.catnap.Semaphore.apply", "link" : "monix\/catnap\/Semaphore$.html#apply[F[_]](provisioned:Long,ps:monix.execution.atomic.PaddingStrategy)(implicitF:monix.catnap.OrElse[cats.effect.Concurrent[F],cats.effect.Async[F]],implicitcs:cats.effect.ContextShift[F]):F[monix.catnap.Semaphore[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/Semaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/Semaphore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/Semaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/Semaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/Semaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/Semaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/Semaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/Semaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/Semaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/Semaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/Semaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/Semaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/Semaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/Semaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/Semaphore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/Semaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/Semaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/Semaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/Semaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/catnap\/Semaphore.html", "kind" : "class"}, {"name" : "monix.catnap.syntax", "shortDescription" : "", "object" : "monix\/catnap\/syntax$.html", "members_object" : [{"label" : "SyntaxForLiftFuture", "tail" : "", "member" : "monix.catnap.syntax.SyntaxForLiftFuture", "link" : "monix\/catnap\/syntax$.html#SyntaxForLiftFuture[F[_],Future[T],A]extendsAnyValwithFutureLift.Syntax[F,Future,A]", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/catnap\/syntax$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/catnap\/syntax$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/catnap\/syntax$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/catnap\/syntax$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/catnap\/syntax$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/catnap\/syntax$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/catnap\/syntax$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/syntax$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/syntax$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/catnap\/syntax$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/catnap\/syntax$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/catnap\/syntax$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/catnap\/syntax$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/catnap\/syntax$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/catnap\/syntax$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/catnap\/syntax$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/catnap\/syntax$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/catnap\/syntax$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/catnap\/syntax$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.eval" : [{"name" : "monix.eval.Coeval", "shortDescription" : "Coeval represents lazy computations that can execute synchronously.", "object" : "monix\/eval\/Coeval$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "monix.eval.Coeval.toString", "link" : "monix\/eval\/Coeval.html#toString():String", "kind" : "def"}, {"label" : "zipMap", "tail" : "(that: Coeval[B])(f: (A, B) => C): Coeval[C]", "member" : "monix.eval.Coeval.zipMap", "link" : "monix\/eval\/Coeval.html#zipMap[B,C](that:monix.eval.Coeval[B])(f:(A,B)=>C):monix.eval.Coeval[C]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: Coeval[B]): Coeval[(A, B)]", "member" : "monix.eval.Coeval.zip", "link" : "monix\/eval\/Coeval.html#zip[B](that:monix.eval.Coeval[B]):monix.eval.Coeval[(A,B)]", "kind" : "final def"}, {"label" : "void", "tail" : "(): Coeval[Unit]", "member" : "monix.eval.Coeval.void", "link" : "monix\/eval\/Coeval.html#void:monix.eval.Coeval[Unit]", "kind" : "final def"}, {"label" : "as", "tail" : "(b: B): Coeval[B]", "member" : "monix.eval.Coeval.as", "link" : "monix\/eval\/Coeval.html#as[B](b:B):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) => Coeval[Unit]): Coeval[A]", "member" : "monix.eval.Coeval.doOnFinish", "link" : "monix\/eval\/Coeval.html#doOnFinish(f:Option[Throwable]=>monix.eval.Coeval[Unit]):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (Throwable) => Coeval[B]): Coeval[A]", "member" : "monix.eval.Coeval.tapError", "link" : "monix\/eval\/Coeval.html#tapError[B](f:Throwable=>monix.eval.Coeval[B]):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (Throwable, S, (S) => Coeval[B]) => Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorRestartLoop", "link" : "monix\/eval\/Coeval.html#onErrorRestartLoop[S,B>:A](initial:S)(f:(Throwable,S,S=>monix.eval.Coeval[B])=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, U]): Coeval[U]", "member" : "monix.eval.Coeval.onErrorRecover", "link" : "monix\/eval\/Coeval.html#onErrorRecover[U>:A](pf:PartialFunction[Throwable,U]):monix.eval.Coeval[U]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => U): Coeval[U]", "member" : "monix.eval.Coeval.onErrorHandle", "link" : "monix\/eval\/Coeval.html#onErrorHandle[U>:A](f:Throwable=>U):monix.eval.Coeval[U]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Coeval[A]", "member" : "monix.eval.Coeval.onErrorRestartIf", "link" : "monix\/eval\/Coeval.html#onErrorRestartIf(p:Throwable=>Boolean):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Coeval[A]", "member" : "monix.eval.Coeval.onErrorRestart", "link" : "monix\/eval\/Coeval.html#onErrorRestart(maxRetries:Long):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorFallbackTo", "link" : "monix\/eval\/Coeval.html#onErrorFallbackTo[B>:A](that:monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorHandleWith", "link" : "monix\/eval\/Coeval.html#onErrorHandleWith[B>:A](f:Throwable=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Coeval[B]]): Coeval[B]", "member" : "monix.eval.Coeval.onErrorRecoverWith", "link" : "monix\/eval\/Coeval.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.eval.Coeval[B]]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Coeval[A]", "member" : "monix.eval.Coeval.restartUntil", "link" : "monix\/eval\/Coeval.html#restartUntil(p:A=>Boolean):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "transformWith", "tail" : "(fa: (A) => Coeval[R], fe: (Throwable) => Coeval[R]): Coeval[R]", "member" : "monix.eval.Coeval.transformWith", "link" : "monix\/eval\/Coeval.html#transformWith[R](fa:A=>monix.eval.Coeval[R],fe:Throwable=>monix.eval.Coeval[R]):monix.eval.Coeval[R]", "kind" : "final def"}, {"label" : "transform", "tail" : "(fa: (A) => R, fe: (Throwable) => R): Coeval[R]", "member" : "monix.eval.Coeval.transform", "link" : "monix\/eval\/Coeval.html#transform[R](fa:A=>R,fe:Throwable=>R):monix.eval.Coeval[R]", "kind" : "final def"}, {"label" : "redeemWith", "tail" : "(recover: (Throwable) => Coeval[B], bind: (A) => Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.redeemWith", "link" : "monix\/eval\/Coeval.html#redeemWith[B](recover:Throwable=>monix.eval.Coeval[B],bind:A=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "redeem", "tail" : "(recover: (Throwable) => B, map: (A) => B): Coeval[B]", "member" : "monix.eval.Coeval.redeem", "link" : "monix\/eval\/Coeval.html#redeem[B](recover:Throwable=>B,map:A=>B):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "toSync", "tail" : "(F: Sync[F]): F[A]", "member" : "monix.eval.Coeval.toSync", "link" : "monix\/eval\/Coeval.html#toSync[F[_]](implicitF:cats.effect.Sync[F]):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "to", "tail" : "(F: CoevalLift[F]): F[A]", "member" : "monix.eval.Coeval.to", "link" : "monix\/eval\/Coeval.html#to[F[_]](implicitF:monix.eval.CoevalLift[F]):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Try[B]]): Coeval[B]", "member" : "monix.eval.Coeval.dematerialize", "link" : "monix\/eval\/Coeval.html#dematerialize[B](implicitev:A<:<scala.util.Try[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Coeval[Try[A]]", "member" : "monix.eval.Coeval.materialize", "link" : "monix\/eval\/Coeval.html#materialize:monix.eval.Coeval[scala.util.Try[A]]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Coeval[B]", "member" : "monix.eval.Coeval.map", "link" : "monix\/eval\/Coeval.html#map[B](f:A=>B):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (A) => Unit): Unit", "member" : "monix.eval.Coeval.foreach", "link" : "monix\/eval\/Coeval.html#foreach(f:A=>Unit):Unit", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(f: (A) => Unit): Coeval[Unit]", "member" : "monix.eval.Coeval.foreachL", "link" : "monix\/eval\/Coeval.html#foreachL(f:A=>Unit):monix.eval.Coeval[Unit]", "kind" : "final def"}, {"label" : "tapEval", "tail" : "(f: (A) => Coeval[B]): Coeval[A]", "member" : "monix.eval.Coeval.tapEval", "link" : "monix\/eval\/Coeval.html#tapEval[B](f:A=>monix.eval.Coeval[B]):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Coeval[B]]): Coeval[B]", "member" : "monix.eval.Coeval.flatten", "link" : "monix\/eval\/Coeval.html#flatten[B](implicitev:A<:<monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "flatMapLoop", "tail" : "(seed: S)(f: (A, S, (S) => Coeval[S]) => Coeval[S]): Coeval[S]", "member" : "monix.eval.Coeval.flatMapLoop", "link" : "monix\/eval\/Coeval.html#flatMapLoop[S](seed:S)(f:(A,S,S=>monix.eval.Coeval[S])=>monix.eval.Coeval[S]):monix.eval.Coeval[S]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.flatMap", "link" : "monix\/eval\/Coeval.html#flatMap[B](f:A=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Coeval[Throwable]", "member" : "monix.eval.Coeval.failed", "link" : "monix\/eval\/Coeval.html#failed:monix.eval.Coeval[Throwable]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(finalizer: (ExitCase[Throwable]) => Coeval[Unit]): Coeval[A]", "member" : "monix.eval.Coeval.guaranteeCase", "link" : "monix\/eval\/Coeval.html#guaranteeCase(finalizer:cats.effect.ExitCase[Throwable]=>monix.eval.Coeval[Unit]):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(finalizer: Coeval[Unit]): Coeval[A]", "member" : "monix.eval.Coeval.guarantee", "link" : "monix\/eval\/Coeval.html#guarantee(finalizer:monix.eval.Coeval[Unit]):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "bracketE", "tail" : "(use: (A) => Coeval[B])(release: (A, Either[Throwable, B]) => Coeval[Unit]): Coeval[B]", "member" : "monix.eval.Coeval.bracketE", "link" : "monix\/eval\/Coeval.html#bracketE[B](use:A=>monix.eval.Coeval[B])(release:(A,Either[Throwable,B])=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Coeval[B])(release: (A, ExitCase[Throwable]) => Coeval[Unit]): Coeval[B]", "member" : "monix.eval.Coeval.bracketCase", "link" : "monix\/eval\/Coeval.html#bracketCase[B](use:A=>monix.eval.Coeval[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Coeval[B])(release: (A) => Coeval[Unit]): Coeval[B]", "member" : "monix.eval.Coeval.bracket", "link" : "monix\/eval\/Coeval.html#bracket[B](use:A=>monix.eval.Coeval[B])(release:A=>monix.eval.Coeval[Unit]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "attempt", "tail" : "(): Coeval[Either[Throwable, A]]", "member" : "monix.eval.Coeval.attempt", "link" : "monix\/eval\/Coeval.html#attempt:monix.eval.Coeval[Either[Throwable,A]]", "kind" : "final def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Coeval[A]", "member" : "monix.eval.Coeval.memoizeOnSuccess", "link" : "monix\/eval\/Coeval.html#memoizeOnSuccess:monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "memoize", "tail" : "(): Coeval[A]", "member" : "monix.eval.Coeval.memoize", "link" : "monix\/eval\/Coeval.html#memoize:monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "runTry", "tail" : "(): Try[A]", "member" : "monix.eval.Coeval.runTry", "link" : "monix\/eval\/Coeval.html#runTry():scala.util.Try[A]", "kind" : "def"}, {"label" : "runAttempt", "tail" : "(): Either[Throwable, A]", "member" : "monix.eval.Coeval.runAttempt", "link" : "monix\/eval\/Coeval.html#runAttempt():Either[Throwable,A]", "kind" : "def"}, {"label" : "run", "tail" : "(): Eager[A]", "member" : "monix.eval.Coeval.run", "link" : "monix\/eval\/Coeval.html#run():monix.eval.Coeval.Eager[A]", "kind" : "def"}, {"label" : "value", "tail" : "(): A", "member" : "monix.eval.Coeval.value", "link" : "monix\/eval\/Coeval.html#value():A", "kind" : "def"}, {"label" : "apply", "tail" : "(): A", "member" : "monix.eval.Coeval.apply", "link" : "monix\/eval\/Coeval.html#apply():A", "kind" : "def"}, {"label" : "<*", "tail" : "(that: Coeval[B]): Coeval[A]", "member" : "monix.eval.Coeval.<*", "link" : "monix\/eval\/Coeval.html#<*[B](that:monix.eval.Coeval[B]):monix.eval.Coeval[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.*>", "link" : "monix\/eval\/Coeval.html#*>[B](that:monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : ">>", "tail" : "(that: => Coeval[B]): Coeval[B]", "member" : "monix.eval.Coeval.>>", "link" : "monix\/eval\/Coeval.html#>>[B](that:=>monix.eval.Coeval[B]):monix.eval.Coeval[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Coeval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Coeval.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Coeval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Coeval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Coeval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Coeval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Coeval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Coeval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Coeval.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Coeval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Coeval.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Coeval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Coeval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Coeval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Coeval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "catsMonoid", "tail" : "(A: Monoid[A]): Monoid[Coeval[A]]", "member" : "monix.eval.Coeval.catsMonoid", "link" : "monix\/eval\/Coeval$.html#catsMonoid[A](implicitA:cats.Monoid[A]):cats.Monoid[monix.eval.Coeval[A]]", "kind" : "implicit def"}, {"label" : "catsSync", "tail" : "(): CatsSyncForCoeval", "member" : "monix.eval.Coeval.catsSync", "link" : "monix\/eval\/Coeval$.html#catsSync:monix.eval.instances.CatsSyncForCoeval", "kind" : "implicit def"}, {"label" : "Always", "tail" : "", "member" : "monix.eval.Coeval.Always", "link" : "monix\/eval\/Coeval$.html#Always[+A]extendsCoeval[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Error", "tail" : "", "member" : "monix.eval.Coeval.Error", "link" : "monix\/eval\/Coeval$.html#ErrorextendsCoeval.Eager[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Now", "tail" : "", "member" : "monix.eval.Coeval.Now", "link" : "monix\/eval\/Coeval$.html#Now[+A]extendsCoeval.Eager[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Eager", "tail" : "", "member" : "monix.eval.Coeval.Eager", "link" : "monix\/eval\/Coeval$.html#Eager", "kind" : "object"}, {"label" : "Eager", "tail" : "", "member" : "monix.eval.Coeval.Eager", "link" : "monix\/eval\/Coeval$.html#Eager[+A]extendsCoeval[A]withProduct", "kind" : "sealed abstract class"}, {"label" : "DeprecatedExtensions", "tail" : "", "member" : "monix.eval.Coeval.DeprecatedExtensions", "link" : "monix\/eval\/Coeval$.html#DeprecatedExtensions[+A]extendsAnyValwithCoevalDeprecatedExtensions[A]", "kind" : "implicit final class"}, {"label" : "liftFrom", "tail" : "(F: CoevalLike[F]): ~>[F, Coeval]", "member" : "monix.eval.Coeval.liftFrom", "link" : "monix\/eval\/Coeval$.html#liftFrom[F[_]](implicitF:monix.eval.CoevalLike[F]):F~>monix.eval.Coeval", "kind" : "def"}, {"label" : "liftToSync", "tail" : "(F: Sync[F]): ~>[Coeval, F]", "member" : "monix.eval.Coeval.liftToSync", "link" : "monix\/eval\/Coeval$.html#liftToSync[F[_]](implicitF:cats.effect.Sync[F]):monix.eval.Coeval~>F", "kind" : "def"}, {"label" : "liftTo", "tail" : "(F: CoevalLift[F]): ~>[Coeval, F]", "member" : "monix.eval.Coeval.liftTo", "link" : "monix\/eval\/Coeval$.html#liftTo[F[_]](implicitF:monix.eval.CoevalLift[F]):monix.eval.Coeval~>F", "kind" : "def"}, {"label" : "zip6", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5], fa6: Coeval[A6]): Coeval[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.eval.Coeval.zip6", "link" : "monix\/eval\/Coeval$.html#zip6[A1,A2,A3,A4,A5,A6](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5],fa6:monix.eval.Coeval[A6]):monix.eval.Coeval[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "zip5", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5]): Coeval[(A1, A2, A3, A4, A5)]", "member" : "monix.eval.Coeval.zip5", "link" : "monix\/eval\/Coeval$.html#zip5[A1,A2,A3,A4,A5](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5]):monix.eval.Coeval[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "zip4", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4]): Coeval[(A1, A2, A3, A4)]", "member" : "monix.eval.Coeval.zip4", "link" : "monix\/eval\/Coeval$.html#zip4[A1,A2,A3,A4](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4]):monix.eval.Coeval[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "zip3", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3]): Coeval[(A1, A2, A3)]", "member" : "monix.eval.Coeval.zip3", "link" : "monix\/eval\/Coeval$.html#zip3[A1,A2,A3](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3]):monix.eval.Coeval[(A1,A2,A3)]", "kind" : "def"}, {"label" : "zip2", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2]): Coeval[(A1, A2)]", "member" : "monix.eval.Coeval.zip2", "link" : "monix\/eval\/Coeval$.html#zip2[A1,A2,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2]):monix.eval.Coeval[(A1,A2)]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5], fa6: Coeval[A6])(f: (A1, A2, A3, A4, A5, A6) => R): Coeval[R]", "member" : "monix.eval.Coeval.map6", "link" : "monix\/eval\/Coeval$.html#map6[A1,A2,A3,A4,A5,A6,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5],fa6:monix.eval.Coeval[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4], fa5: Coeval[A5])(f: (A1, A2, A3, A4, A5) => R): Coeval[R]", "member" : "monix.eval.Coeval.map5", "link" : "monix\/eval\/Coeval$.html#map5[A1,A2,A3,A4,A5,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4],fa5:monix.eval.Coeval[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3], fa4: Coeval[A4])(f: (A1, A2, A3, A4) => R): Coeval[R]", "member" : "monix.eval.Coeval.map4", "link" : "monix\/eval\/Coeval$.html#map4[A1,A2,A3,A4,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3],fa4:monix.eval.Coeval[A4])(f:(A1,A2,A3,A4)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2], fa3: Coeval[A3])(f: (A1, A2, A3) => R): Coeval[R]", "member" : "monix.eval.Coeval.map3", "link" : "monix\/eval\/Coeval$.html#map3[A1,A2,A3,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2],fa3:monix.eval.Coeval[A3])(f:(A1,A2,A3)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: Coeval[A1], fa2: Coeval[A2])(f: (A1, A2) => R): Coeval[R]", "member" : "monix.eval.Coeval.map2", "link" : "monix\/eval\/Coeval$.html#map2[A1,A2,R](fa1:monix.eval.Coeval[A1],fa2:monix.eval.Coeval[A2])(f:(A1,A2)=>R):monix.eval.Coeval[R]", "kind" : "def"}, {"label" : "zipList", "tail" : "(sources: Coeval[A]*): Coeval[List[A]]", "member" : "monix.eval.Coeval.zipList", "link" : "monix\/eval\/Coeval$.html#zipList[A](sources:monix.eval.Coeval[A]*):monix.eval.Coeval[List[A]]", "kind" : "def"}, {"label" : "raiseUnless", "tail" : "(cond: Boolean)(e: => Throwable): Coeval[Unit]", "member" : "monix.eval.Coeval.raiseUnless", "link" : "monix\/eval\/Coeval$.html#raiseUnless(cond:Boolean)(e:=>Throwable):monix.eval.Coeval[Unit]", "kind" : "def"}, {"label" : "raiseWhen", "tail" : "(cond: Boolean)(e: => Throwable): Coeval[Unit]", "member" : "monix.eval.Coeval.raiseWhen", "link" : "monix\/eval\/Coeval$.html#raiseWhen(cond:Boolean)(e:=>Throwable):monix.eval.Coeval[Unit]", "kind" : "def"}, {"label" : "unless", "tail" : "(cond: Boolean)(action: => Coeval[Unit]): Coeval[Unit]", "member" : "monix.eval.Coeval.unless", "link" : "monix\/eval\/Coeval$.html#unless(cond:Boolean)(action:=>monix.eval.Coeval[Unit]):monix.eval.Coeval[Unit]", "kind" : "def"}, {"label" : "when", "tail" : "(cond: Boolean)(action: => Coeval[Unit]): Coeval[Unit]", "member" : "monix.eval.Coeval.when", "link" : "monix\/eval\/Coeval$.html#when(cond:Boolean)(action:=>monix.eval.Coeval[Unit]):monix.eval.Coeval[Unit]", "kind" : "def"}, {"label" : "traverse", "tail" : "(sources: M[A])(f: (A) => Coeval[B])(bf: BuildFrom[M[A], B, M[B]]): Coeval[M[B]]", "member" : "monix.eval.Coeval.traverse", "link" : "monix\/eval\/Coeval$.html#traverse[A,B,M[X]<:Iterable[X]](sources:M[A])(f:A=>monix.eval.Coeval[B])(implicitbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):monix.eval.Coeval[M[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(sources: M[Coeval[A]])(bf: BuildFrom[M[Coeval[A]], A, M[A]]): Coeval[M[A]]", "member" : "monix.eval.Coeval.sequence", "link" : "monix\/eval\/Coeval$.html#sequence[A,M[X]<:Iterable[X]](sources:M[monix.eval.Coeval[A]])(implicitbf:monix.execution.compat.BuildFrom[M[monix.eval.Coeval[A]],A,M[A]]):monix.eval.Coeval[M[A]]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Coeval[Either[A, B]]): Coeval[B]", "member" : "monix.eval.Coeval.tailRecM", "link" : "monix\/eval\/Coeval$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Coeval[Either[A,B]]):monix.eval.Coeval[B]", "kind" : "def"}, {"label" : "some", "tail" : "(a: A): Coeval[Option[A]]", "member" : "monix.eval.Coeval.some", "link" : "monix\/eval\/Coeval$.html#some[A](a:A):monix.eval.Coeval[Option[A]]", "kind" : "def"}, {"label" : "none", "tail" : "(): Coeval[Option[A]]", "member" : "monix.eval.Coeval.none", "link" : "monix\/eval\/Coeval$.html#none[A]:monix.eval.Coeval[Option[A]]", "kind" : "def"}, {"label" : "right", "tail" : "(a: B): Coeval[Either[A, B]]", "member" : "monix.eval.Coeval.right", "link" : "monix\/eval\/Coeval$.html#right[A,B](a:B):monix.eval.Coeval[Either[A,B]]", "kind" : "def"}, {"label" : "left", "tail" : "(a: A): Coeval[Either[A, B]]", "member" : "monix.eval.Coeval.left", "link" : "monix\/eval\/Coeval$.html#left[A,B](a:A):monix.eval.Coeval[Either[A,B]]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(f: (E) => Throwable)(a: Either[E, A]): Coeval[A]", "member" : "monix.eval.Coeval.fromEither", "link" : "monix\/eval\/Coeval$.html#fromEither[E,A](f:E=>Throwable)(a:Either[E,A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(a: Either[E, A]): Coeval[A]", "member" : "monix.eval.Coeval.fromEither", "link" : "monix\/eval\/Coeval$.html#fromEither[E<:Throwable,A](a:Either[E,A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: Try[A]): Coeval[A]", "member" : "monix.eval.Coeval.fromTry", "link" : "monix\/eval\/Coeval$.html#fromTry[A](a:scala.util.Try[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "from", "tail" : "(fa: F[A])(F: CoevalLike[F]): Coeval[A]", "member" : "monix.eval.Coeval.from", "link" : "monix\/eval\/Coeval$.html#from[F[_],A](fa:F[A])(implicitF:monix.eval.CoevalLike[F]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "unit", "tail" : ": Coeval[Unit]", "member" : "monix.eval.Coeval.unit", "link" : "monix\/eval\/Coeval$.html#unit:monix.eval.Coeval[Unit]", "kind" : "val"}, {"label" : "delay", "tail" : "(a: => A): Coeval[A]", "member" : "monix.eval.Coeval.delay", "link" : "monix\/eval\/Coeval$.html#delay[A](a:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: => A): Coeval[A]", "member" : "monix.eval.Coeval.eval", "link" : "monix\/eval\/Coeval$.html#eval[A](a:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "evalOnce", "tail" : "(a: => A): Coeval[A]", "member" : "monix.eval.Coeval.evalOnce", "link" : "monix\/eval\/Coeval$.html#evalOnce[A](a:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Coeval[A]): Coeval[A]", "member" : "monix.eval.Coeval.suspend", "link" : "monix\/eval\/Coeval$.html#suspend[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Coeval[A]): Coeval[A]", "member" : "monix.eval.Coeval.defer", "link" : "monix\/eval\/Coeval$.html#defer[A](fa:=>monix.eval.Coeval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Coeval[A]", "member" : "monix.eval.Coeval.raiseError", "link" : "monix\/eval\/Coeval$.html#raiseError[A](ex:Throwable):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.Coeval.pure", "link" : "monix\/eval\/Coeval$.html#pure[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Coeval[A]", "member" : "monix.eval.Coeval.now", "link" : "monix\/eval\/Coeval$.html#now[A](a:A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: => A): Coeval[A]", "member" : "monix.eval.Coeval.apply", "link" : "monix\/eval\/Coeval$.html#apply[A](f:=>A):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "catsSemigroup", "tail" : "(A: Semigroup[A]): Semigroup[Coeval[A]]", "member" : "monix.eval.CoevalInstancesLevel0.catsSemigroup", "link" : "monix\/eval\/Coeval$.html#catsSemigroup[A](implicitA:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[monix.eval.Coeval[A]]", "kind" : "implicit def"}, {"label" : "fromSyncIO", "tail" : "(a: SyncIO[A]): Coeval[A]", "member" : "monix.eval.internal.CoevalDeprecatedCompanion.fromSyncIO", "link" : "monix\/eval\/Coeval$.html#fromSyncIO[A](a:cats.effect.SyncIO[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(a: Eval[A]): Coeval[A]", "member" : "monix.eval.internal.CoevalDeprecatedCompanion.fromEval", "link" : "monix\/eval\/Coeval$.html#fromEval[A](a:cats.Eval[A]):monix.eval.Coeval[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Coeval$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Coeval$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Coeval$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Coeval$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Coeval$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Coeval$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Coeval$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Coeval$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Coeval$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Coeval$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Coeval$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Coeval$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Coeval$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Coeval$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Coeval$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Coeval$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Coeval$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/Coeval.html", "kind" : "class"}, {"name" : "monix.eval.CoevalLift", "object" : "monix\/eval\/CoevalLift$.html", "members_object" : [{"label" : "Deprecated", "tail" : "", "member" : "monix.eval.CoevalLift.Deprecated", "link" : "monix\/eval\/CoevalLift$.html#Deprecated[F[_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "toEval", "tail" : ": CoevalLift[Eval]", "member" : "monix.eval.CoevalLift.toEval", "link" : "monix\/eval\/CoevalLift$.html#toEval:monix.eval.CoevalLift[cats.Eval]", "kind" : "implicit val"}, {"label" : "toTask", "tail" : ": CoevalLift[Task]", "member" : "monix.eval.CoevalLift.toTask", "link" : "monix\/eval\/CoevalLift$.html#toTask:monix.eval.CoevalLift[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "toCoeval", "tail" : ": CoevalLift[Coeval]", "member" : "monix.eval.CoevalLift.toCoeval", "link" : "monix\/eval\/CoevalLift$.html#toCoeval:monix.eval.CoevalLift[monix.eval.Coeval]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(F: CoevalLift[F]): CoevalLift[F]", "member" : "monix.eval.CoevalLift.apply", "link" : "monix\/eval\/CoevalLift$.html#apply[F[_]](implicitF:monix.eval.CoevalLift[F]):monix.eval.CoevalLift[F]", "kind" : "def"}, {"label" : "toSync", "tail" : "(F: Sync[F]): CoevalLift[F]", "member" : "monix.eval.CoevalLiftImplicits0.toSync", "link" : "monix\/eval\/CoevalLift$.html#toSync[F[_]](implicitF:cats.effect.Sync[F]):monix.eval.CoevalLift[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/CoevalLift$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/CoevalLift$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/CoevalLift$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/CoevalLift$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/CoevalLift$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/CoevalLift$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/CoevalLift$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLift$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLift$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLift$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/CoevalLift$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/CoevalLift$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/CoevalLift$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/CoevalLift$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/CoevalLift$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/CoevalLift$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/CoevalLift$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/CoevalLift$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/CoevalLift$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/eval\/CoevalLift.html", "kind" : "trait", "members_trait" : [{"label" : "narrow", "tail" : "(): FunctionK[F0, F]", "member" : "cats.arrow.FunctionK.narrow", "link" : "monix\/eval\/CoevalLift.html#narrow[F0[x<:<?>]<:F[x]]:cats.arrow.FunctionK[F0,G]", "kind" : "def"}, {"label" : "widen", "tail" : "(): FunctionK[Coeval, G0]", "member" : "cats.arrow.FunctionK.widen", "link" : "monix\/eval\/CoevalLift.html#widen[G0[x]>:G[x]]:cats.arrow.FunctionK[F,G0]", "kind" : "def"}, {"label" : "and", "tail" : "(h: FunctionK[Coeval, H]): FunctionK[Coeval, [γ$2$]Tuple2K[F, H, γ$2$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/eval\/CoevalLift.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$2$]cats.data.Tuple2K[G,H,γ$2$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, F]): FunctionK[[γ$0$]EitherK[Coeval, H, γ$0$], F]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/eval\/CoevalLift.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$0$]cats.data.EitherK[F,H,γ$0$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[F, H]): FunctionK[Coeval, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/eval\/CoevalLift.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, Coeval]): FunctionK[E, F]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/eval\/CoevalLift.html#compose[E[_]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/CoevalLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/CoevalLift.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/CoevalLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/CoevalLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/CoevalLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/CoevalLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/CoevalLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLift.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/CoevalLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/CoevalLift.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/CoevalLift.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/CoevalLift.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/CoevalLift.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/CoevalLift.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/CoevalLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/CoevalLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/CoevalLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(coeval: Coeval[A]): F[A]", "member" : "monix.eval.CoevalLift.apply", "link" : "monix\/eval\/CoevalLift.html#apply[A](coeval:monix.eval.Coeval[A]):F[A]", "kind" : "abstract def"}], "shortDescription" : "A lawless type class that specifies conversions from Coevalto similar data types (i.e."}, {"name" : "monix.eval.CoevalLike", "object" : "monix\/eval\/CoevalLike$.html", "members_object" : [{"label" : "Deprecated", "tail" : "", "member" : "monix.eval.CoevalLike.Deprecated", "link" : "monix\/eval\/CoevalLike$.html#Deprecated[F[_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "fromEither", "tail" : "(): CoevalLike[[β$0$]Either[E, β$0$]]", "member" : "monix.eval.CoevalLike.fromEither", "link" : "monix\/eval\/CoevalLike$.html#fromEither[E<:Throwable]:monix.eval.CoevalLike[[β$0$]scala.util.Either[E,β$0$]]", "kind" : "implicit def"}, {"label" : "fromFunction0", "tail" : ": CoevalLike[Function0]", "member" : "monix.eval.CoevalLike.fromFunction0", "link" : "monix\/eval\/CoevalLike$.html#fromFunction0:monix.eval.CoevalLike[Function0]", "kind" : "implicit val"}, {"label" : "fromTry", "tail" : ": CoevalLike[Try]", "member" : "monix.eval.CoevalLike.fromTry", "link" : "monix\/eval\/CoevalLike$.html#fromTry:monix.eval.CoevalLike[scala.util.Try]", "kind" : "implicit val"}, {"label" : "fromSyncIO", "tail" : ": CoevalLike[SyncIO]", "member" : "monix.eval.CoevalLike.fromSyncIO", "link" : "monix\/eval\/CoevalLike$.html#fromSyncIO:monix.eval.CoevalLike[cats.effect.SyncIO]", "kind" : "implicit val"}, {"label" : "fromEval", "tail" : ": CoevalLike[Eval]", "member" : "monix.eval.CoevalLike.fromEval", "link" : "monix\/eval\/CoevalLike$.html#fromEval:monix.eval.CoevalLike[cats.Eval]", "kind" : "implicit val"}, {"label" : "fromCoeval", "tail" : ": CoevalLike[Coeval]", "member" : "monix.eval.CoevalLike.fromCoeval", "link" : "monix\/eval\/CoevalLike$.html#fromCoeval:monix.eval.CoevalLike[monix.eval.Coeval]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(F: CoevalLike[F]): CoevalLike[F]", "member" : "monix.eval.CoevalLike.apply", "link" : "monix\/eval\/CoevalLike$.html#apply[F[_]](implicitF:monix.eval.CoevalLike[F]):monix.eval.CoevalLike[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/CoevalLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/CoevalLike$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/CoevalLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/CoevalLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/CoevalLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/CoevalLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/CoevalLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/CoevalLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/CoevalLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/CoevalLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/CoevalLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/CoevalLike$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/CoevalLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/CoevalLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/CoevalLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/CoevalLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/eval\/CoevalLike.html", "kind" : "trait", "members_trait" : [{"label" : "narrow", "tail" : "(): FunctionK[F0, Coeval]", "member" : "cats.arrow.FunctionK.narrow", "link" : "monix\/eval\/CoevalLike.html#narrow[F0[x]<:F[x]]:cats.arrow.FunctionK[F0,G]", "kind" : "def"}, {"label" : "widen", "tail" : "(): FunctionK[F, G0]", "member" : "cats.arrow.FunctionK.widen", "link" : "monix\/eval\/CoevalLike.html#widen[G0[x]>:G[x]]:cats.arrow.FunctionK[F,G0]", "kind" : "def"}, {"label" : "and", "tail" : "(h: FunctionK[F, H]): FunctionK[F, [γ$2$]Tuple2K[Coeval, H, γ$2$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/eval\/CoevalLike.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$2$]cats.data.Tuple2K[G,H,γ$2$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, Coeval]): FunctionK[[γ$0$]EitherK[F, H, γ$0$], Coeval]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/eval\/CoevalLike.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$0$]cats.data.EitherK[F,H,γ$0$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[Coeval, H]): FunctionK[F, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/eval\/CoevalLike.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, F]): FunctionK[E, Coeval]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/eval\/CoevalLike.html#compose[E[_]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/CoevalLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/CoevalLike.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/CoevalLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/CoevalLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/CoevalLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/CoevalLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/CoevalLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/CoevalLike.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/CoevalLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/CoevalLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/CoevalLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/CoevalLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/CoevalLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/CoevalLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/CoevalLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/CoevalLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/CoevalLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[A]): Coeval[A]", "member" : "monix.eval.CoevalLike.apply", "link" : "monix\/eval\/CoevalLike.html#apply[A](fa:F[A]):monix.eval.Coeval[A]", "kind" : "abstract def"}], "shortDescription" : "A lawless type class that provides conversions to Coeval."}, {"name" : "monix.eval.Fiber", "object" : "monix\/eval\/Fiber$.html", "members_object" : [{"label" : "apply", "tail" : "(task: Task[A], cancel: CancelToken[Task]): Fiber[A]", "member" : "monix.eval.Fiber.apply", "link" : "monix\/eval\/Fiber$.html#apply[A](task:monix.eval.Task[A],cancel:cats.effect.CancelToken[monix.eval.Task]):monix.eval.Fiber[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Fiber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Fiber$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Fiber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Fiber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Fiber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Fiber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Fiber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Fiber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Fiber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Fiber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Fiber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Fiber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Fiber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Fiber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Fiber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Fiber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/eval\/Fiber.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Fiber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Fiber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Fiber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Fiber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Fiber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Fiber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Fiber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Fiber.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Fiber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Fiber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Fiber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Fiber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Fiber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Fiber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Fiber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Fiber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Fiber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "join", "tail" : "(): Task[A]", "member" : "monix.eval.Fiber.join", "link" : "monix\/eval\/Fiber.html#join:monix.eval.Task[A]", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): CancelToken[Task]", "member" : "monix.eval.Fiber.cancel", "link" : "monix\/eval\/Fiber.html#cancel:cats.effect.CancelToken[monix.eval.Task]", "kind" : "abstract def"}], "shortDescription" : "Fiber represents the (pure) result of a Task being started concurrentlyand that can be either joined or cancelled."}, {"name" : "monix.eval.MVar", "shortDescription" : "DEPRECATED — moved and made generic in monix.catnap.CircuitBreaker.", "object" : "monix\/eval\/package$$MVar$.html", "members_object" : [{"label" : "withPadding", "tail" : "(ps: PaddingStrategy): Task[catnap.MVar[Task, A]]", "member" : "monix.eval.MVar.withPadding", "link" : "monix\/eval\/package$$MVar$.html#withPadding[A](ps:monix.execution.atomic.PaddingStrategy):monix.eval.Task[monix.catnap.MVar[monix.eval.Task,A]]", "kind" : "def"}, {"label" : "withPadding", "tail" : "(initial: A, ps: PaddingStrategy): Task[catnap.MVar[Task, A]]", "member" : "monix.eval.MVar.withPadding", "link" : "monix\/eval\/package$$MVar$.html#withPadding[A](initial:A,ps:monix.execution.atomic.PaddingStrategy):monix.eval.Task[monix.catnap.MVar[monix.eval.Task,A]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Task[catnap.MVar[Task, A]]", "member" : "monix.eval.MVar.empty", "link" : "monix\/eval\/package$$MVar$.html#empty[A]:monix.eval.Task[monix.catnap.MVar[monix.eval.Task,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: A): Task[catnap.MVar[Task, A]]", "member" : "monix.eval.MVar.apply", "link" : "monix\/eval\/package$$MVar$.html#apply[A](initial:A):monix.eval.Task[monix.catnap.MVar[monix.eval.Task,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/package$$MVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/package$$MVar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/package$$MVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/package$$MVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/package$$MVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/package$$MVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/package$$MVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$MVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$MVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$MVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/package$$MVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/package$$MVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/package$$MVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/package$$MVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/package$$MVar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/package$$MVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/package$$MVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/package$$MVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/package$$MVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.eval.Task", "shortDescription" : "Task represents a specification for a possibly lazy orasynchronous computation, which when executed will produce an Aas a result, along with possible side-effects.", "object" : "monix\/eval\/Task$.html", "members_class" : [{"label" : "void", "tail" : "(): Task[Unit]", "member" : "monix.eval.Task.void", "link" : "monix\/eval\/Task.html#void:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "as", "tail" : "(b: B): Task[B]", "member" : "monix.eval.Task.as", "link" : "monix\/eval\/Task.html#as[B](b:B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "timed", "tail" : "(): Task[(FiniteDuration, A)]", "member" : "monix.eval.Task.timed", "link" : "monix\/eval\/Task.html#timed:monix.eval.Task[(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Task[A]", "member" : "monix.eval.Task.uncancelable", "link" : "monix\/eval\/Task.html#uncancelable:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "redeemWith", "tail" : "(recover: (Throwable) => Task[B], bind: (A) => Task[B]): Task[B]", "member" : "monix.eval.Task.redeemWith", "link" : "monix\/eval\/Task.html#redeemWith[B](recover:Throwable=>monix.eval.Task[B],bind:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "redeem", "tail" : "(recover: (Throwable) => B, map: (A) => B): Task[B]", "member" : "monix.eval.Task.redeem", "link" : "monix\/eval\/Task.html#redeem[B](recover:Throwable=>B,map:A=>B):monix.eval.Task[B]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "monix.eval.Task.toString", "link" : "monix\/eval\/Task.html#toString():String", "kind" : "def"}, {"label" : "timeoutToL", "tail" : "(after: Task[FiniteDuration], backup: Task[B]): Task[B]", "member" : "monix.eval.Task.timeoutToL", "link" : "monix\/eval\/Task.html#timeoutToL[B>:A](after:monix.eval.Task[scala.concurrent.duration.FiniteDuration],backup:monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "timeoutL", "tail" : "(after: Task[FiniteDuration]): Task[A]", "member" : "monix.eval.Task.timeoutL", "link" : "monix\/eval\/Task.html#timeoutL(after:monix.eval.Task[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "timeoutTo", "tail" : "(after: FiniteDuration, backup: Task[B]): Task[B]", "member" : "monix.eval.Task.timeoutTo", "link" : "monix\/eval\/Task.html#timeoutTo[B>:A](after:scala.concurrent.duration.FiniteDuration,backup:monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "timeoutWith", "tail" : "(after: FiniteDuration, exception: Exception): Task[A]", "member" : "monix.eval.Task.timeoutWith", "link" : "monix\/eval\/Task.html#timeoutWith(after:scala.concurrent.duration.FiniteDuration,exception:Exception):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "timeout", "tail" : "(after: FiniteDuration): Task[A]", "member" : "monix.eval.Task.timeout", "link" : "monix\/eval\/Task.html#timeout(after:scala.concurrent.duration.FiniteDuration):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler): Publisher[A]", "member" : "monix.eval.Task.toReactivePublisher", "link" : "monix\/eval\/Task.html#toReactivePublisher(implicits:monix.execution.Scheduler):org.reactivestreams.Publisher[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "toAsync", "tail" : "(F: Async[F], eff: Effect[Task]): F[A]", "member" : "monix.eval.Task.toAsync", "link" : "monix\/eval\/Task.html#toAsync[F[_]](implicitF:cats.effect.Async[F],impliciteff:cats.effect.Effect[monix.eval.Task]):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "toConcurrent", "tail" : "(F: Concurrent[F], eff: ConcurrentEffect[Task]): F[A]", "member" : "monix.eval.Task.toConcurrent", "link" : "monix\/eval\/Task.html#toConcurrent[F[_]](implicitF:cats.effect.Concurrent[F],impliciteff:cats.effect.ConcurrentEffect[monix.eval.Task]):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "to", "tail" : "(F: TaskLift[F]): F[A]", "member" : "monix.eval.Task.to", "link" : "monix\/eval\/Task.html#to[F[_]](implicitF:monix.eval.TaskLift[F]):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "start", "tail" : "(): Task[Fiber[A]]", "member" : "monix.eval.Task.start", "link" : "monix\/eval\/Task.html#start:monix.eval.Task[monix.eval.Fiber[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (Throwable) => Task[B]): Task[A]", "member" : "monix.eval.Task.tapError", "link" : "monix\/eval\/Task.html#tapError[B](f:Throwable=>monix.eval.Task[B]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[Throwable, U]): Task[U]", "member" : "monix.eval.Task.onErrorRecover", "link" : "monix\/eval\/Task.html#onErrorRecover[U>:A](pf:PartialFunction[Throwable,U]):monix.eval.Task[U]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (Throwable) => U): Task[U]", "member" : "monix.eval.Task.onErrorHandle", "link" : "monix\/eval\/Task.html#onErrorHandle[U>:A](f:Throwable=>U):monix.eval.Task[U]", "kind" : "final def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (Throwable, S, (S) => Task[B]) => Task[B]): Task[B]", "member" : "monix.eval.Task.onErrorRestartLoop", "link" : "monix\/eval\/Task.html#onErrorRestartLoop[S,B>:A](initial:S)(f:(Throwable,S,S=>monix.eval.Task[B])=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (Throwable) => Boolean): Task[A]", "member" : "monix.eval.Task.onErrorRestartIf", "link" : "monix\/eval\/Task.html#onErrorRestartIf(p:Throwable=>Boolean):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Task[A]", "member" : "monix.eval.Task.onErrorRestart", "link" : "monix\/eval\/Task.html#onErrorRestart(maxRetries:Long):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Task[B]", "member" : "monix.eval.Task.map", "link" : "monix\/eval\/Task.html#map[B](f:A=>B):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Task[A]", "member" : "monix.eval.Task.restartUntil", "link" : "monix\/eval\/Task.html#restartUntil(p:A=>Boolean):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Task[B]): Task[B]", "member" : "monix.eval.Task.onErrorFallbackTo", "link" : "monix\/eval\/Task.html#onErrorFallbackTo[B>:A](that:monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (Throwable) => Task[B]): Task[B]", "member" : "monix.eval.Task.onErrorHandleWith", "link" : "monix\/eval\/Task.html#onErrorHandleWith[B>:A](f:Throwable=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[Throwable, Task[B]]): Task[B]", "member" : "monix.eval.Task.onErrorRecoverWith", "link" : "monix\/eval\/Task.html#onErrorRecoverWith[B>:A](pf:PartialFunction[Throwable,monix.eval.Task[B]]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "onCancelRaiseError", "tail" : "(e: Throwable): Task[A]", "member" : "monix.eval.Task.onCancelRaiseError", "link" : "monix\/eval\/Task.html#onCancelRaiseError(e:Throwable):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(ev: <:<[A, Try[B]]): Task[B]", "member" : "monix.eval.Task.dematerialize", "link" : "monix\/eval\/Task.html#dematerialize[B](implicitev:A<:<scala.util.Try[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(): Task[Try[A]]", "member" : "monix.eval.Task.materialize", "link" : "monix\/eval\/Task.html#materialize:monix.eval.Task[scala.util.Try[A]]", "kind" : "final def"}, {"label" : "doOnCancel", "tail" : "(callback: Task[Unit]): Task[A]", "member" : "monix.eval.Task.doOnCancel", "link" : "monix\/eval\/Task.html#doOnCancel(callback:monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Throwable]) => Task[Unit]): Task[A]", "member" : "monix.eval.Task.doOnFinish", "link" : "monix\/eval\/Task.html#doOnFinish(f:Option[Throwable]=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "startAndForget", "tail" : "(): Task[Unit]", "member" : "monix.eval.Task.startAndForget", "link" : "monix\/eval\/Task.html#startAndForget:monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "loopForever", "tail" : "(): Task[Nothing]", "member" : "monix.eval.Task.loopForever", "link" : "monix\/eval\/Task.html#loopForever:monix.eval.Task[Nothing]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (A) => Unit)(s: Scheduler): Unit", "member" : "monix.eval.Task.foreach", "link" : "monix\/eval\/Task.html#foreach(f:A=>Unit)(implicits:monix.execution.Scheduler):Unit", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(f: (A) => Unit): Task[Unit]", "member" : "monix.eval.Task.foreachL", "link" : "monix\/eval\/Task.html#foreachL(f:A=>Unit):monix.eval.Task[Unit]", "kind" : "final def"}, {"label" : "tapEval", "tail" : "(f: (A) => Task[B]): Task[A]", "member" : "monix.eval.Task.tapEval", "link" : "monix\/eval\/Task.html#tapEval[B](f:A=>monix.eval.Task[B]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Task[B]]): Task[B]", "member" : "monix.eval.Task.flatten", "link" : "monix\/eval\/Task.html#flatten[B](implicitev:A<:<monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "flatMapLoop", "tail" : "(seed: S)(f: (A, S, (S) => Task[S]) => Task[S]): Task[S]", "member" : "monix.eval.Task.flatMapLoop", "link" : "monix\/eval\/Task.html#flatMapLoop[S](seed:S)(f:(A,S,S=>monix.eval.Task[S])=>monix.eval.Task[S]):monix.eval.Task[S]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Task[B]): Task[B]", "member" : "monix.eval.Task.flatMap", "link" : "monix\/eval\/Task.html#flatMap[B](f:A=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Task[Throwable]", "member" : "monix.eval.Task.failed", "link" : "monix\/eval\/Task.html#failed:monix.eval.Task[Throwable]", "kind" : "final def"}, {"label" : "executeWithOptions", "tail" : "(f: (Options) => Options): Task[A]", "member" : "monix.eval.Task.executeWithOptions", "link" : "monix\/eval\/Task.html#executeWithOptions(f:monix.eval.Task.Options=>monix.eval.Task.Options):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Task[A]", "member" : "monix.eval.Task.executeWithModel", "link" : "monix\/eval\/Task.html#executeWithModel(em:monix.execution.ExecutionModel):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Task[A]", "member" : "monix.eval.Task.executeAsync", "link" : "monix\/eval\/Task.html#executeAsync:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Task[A]", "member" : "monix.eval.Task.executeOn", "link" : "monix\/eval\/Task.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "delayResult", "tail" : "(timespan: FiniteDuration): Task[A]", "member" : "monix.eval.Task.delayResult", "link" : "monix\/eval\/Task.html#delayResult(timespan:scala.concurrent.duration.FiniteDuration):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Task[A]", "member" : "monix.eval.Task.delayExecution", "link" : "monix\/eval\/Task.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(finalizer: (ExitCase[Throwable]) => Task[Unit]): Task[A]", "member" : "monix.eval.Task.guaranteeCase", "link" : "monix\/eval\/Task.html#guaranteeCase(finalizer:cats.effect.ExitCase[Throwable]=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(finalizer: Task[Unit]): Task[A]", "member" : "monix.eval.Task.guarantee", "link" : "monix\/eval\/Task.html#guarantee(finalizer:monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "bracketE", "tail" : "(use: (A) => Task[B])(release: (A, Either[Option[Throwable], B]) => Task[Unit]): Task[B]", "member" : "monix.eval.Task.bracketE", "link" : "monix\/eval\/Task.html#bracketE[B](use:A=>monix.eval.Task[B])(release:(A,Either[Option[Throwable],B])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Task[B])(release: (A, ExitCase[Throwable]) => Task[Unit]): Task[B]", "member" : "monix.eval.Task.bracketCase", "link" : "monix\/eval\/Task.html#bracketCase[B](use:A=>monix.eval.Task[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Task[B])(release: (A) => Task[Unit]): Task[B]", "member" : "monix.eval.Task.bracket", "link" : "monix\/eval\/Task.html#bracket[B](use:A=>monix.eval.Task[B])(release:A=>monix.eval.Task[Unit]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(s: Scheduler): Task[A]", "member" : "monix.eval.Task.asyncBoundary", "link" : "monix\/eval\/Task.html#asyncBoundary(s:monix.execution.Scheduler):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(): Task[A]", "member" : "monix.eval.Task.asyncBoundary", "link" : "monix\/eval\/Task.html#asyncBoundary:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "<*", "tail" : "(tb: Task[B]): Task[A]", "member" : "monix.eval.Task.<*", "link" : "monix\/eval\/Task.html#<*[B](tb:monix.eval.Task[B]):monix.eval.Task[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(tb: Task[B]): Task[B]", "member" : "monix.eval.Task.*>", "link" : "monix\/eval\/Task.html#*>[B](tb:monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : ">>", "tail" : "(tb: => Task[B]): Task[B]", "member" : "monix.eval.Task.>>", "link" : "monix\/eval\/Task.html#>>[B](tb:=>monix.eval.Task[B]):monix.eval.Task[B]", "kind" : "final def"}, {"label" : "attempt", "tail" : "(): Task[Either[Throwable, A]]", "member" : "monix.eval.Task.attempt", "link" : "monix\/eval\/Task.html#attempt:monix.eval.Task[Either[Throwable,A]]", "kind" : "final def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Task[A]", "member" : "monix.eval.Task.memoizeOnSuccess", "link" : "monix\/eval\/Task.html#memoizeOnSuccess:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "memoize", "tail" : "(): Task[A]", "member" : "monix.eval.Task.memoize", "link" : "monix\/eval\/Task.html#memoize:monix.eval.Task[A]", "kind" : "final def"}, {"label" : "runSyncUnsafeOpt", "tail" : "(timeout: Duration)(s: Scheduler, opts: Options, permit: CanBlock): A", "member" : "monix.eval.Task.runSyncUnsafeOpt", "link" : "monix\/eval\/Task.html#runSyncUnsafeOpt(timeout:scala.concurrent.duration.Duration)(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options,implicitpermit:monix.execution.schedulers.CanBlock):A", "kind" : "final def"}, {"label" : "runSyncUnsafe", "tail" : "(timeout: Duration)(s: Scheduler, permit: CanBlock): A", "member" : "monix.eval.Task.runSyncUnsafe", "link" : "monix\/eval\/Task.html#runSyncUnsafe(timeout:scala.concurrent.duration.Duration)(implicits:monix.execution.Scheduler,implicitpermit:monix.execution.schedulers.CanBlock):A", "kind" : "final def"}, {"label" : "runSyncStepOpt", "tail" : "(s: Scheduler, opts: Options): Either[Task[A], A]", "member" : "monix.eval.Task.runSyncStepOpt", "link" : "monix\/eval\/Task.html#runSyncStepOpt(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):Either[monix.eval.Task[A],A]", "kind" : "final def"}, {"label" : "runSyncStep", "tail" : "(s: Scheduler): Either[Task[A], A]", "member" : "monix.eval.Task.runSyncStep", "link" : "monix\/eval\/Task.html#runSyncStep(implicits:monix.execution.Scheduler):Either[monix.eval.Task[A],A]", "kind" : "final def"}, {"label" : "runAsyncUncancelableOpt", "tail" : "(cb: (Either[Throwable, A]) => Unit)(s: Scheduler, opts: Options): Unit", "member" : "monix.eval.Task.runAsyncUncancelableOpt", "link" : "monix\/eval\/Task.html#runAsyncUncancelableOpt(cb:Either[Throwable,A]=>Unit)(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):Unit", "kind" : "def"}, {"label" : "runAsyncUncancelable", "tail" : "(cb: (Either[Throwable, A]) => Unit)(s: Scheduler): Unit", "member" : "monix.eval.Task.runAsyncUncancelable", "link" : "monix\/eval\/Task.html#runAsyncUncancelable(cb:Either[Throwable,A]=>Unit)(implicits:monix.execution.Scheduler):Unit", "kind" : "final def"}, {"label" : "runAsyncAndForgetOpt", "tail" : "(s: Scheduler, opts: Options): Unit", "member" : "monix.eval.Task.runAsyncAndForgetOpt", "link" : "monix\/eval\/Task.html#runAsyncAndForgetOpt(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):Unit", "kind" : "def"}, {"label" : "runAsyncAndForget", "tail" : "(s: Scheduler): Unit", "member" : "monix.eval.Task.runAsyncAndForget", "link" : "monix\/eval\/Task.html#runAsyncAndForget(implicits:monix.execution.Scheduler):Unit", "kind" : "final def"}, {"label" : "runAsyncOptF", "tail" : "(cb: (Either[Throwable, A]) => Unit)(s: Scheduler, opts: Options): CancelToken[Task]", "member" : "monix.eval.Task.runAsyncOptF", "link" : "monix\/eval\/Task.html#runAsyncOptF(cb:Either[Throwable,A]=>Unit)(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):cats.effect.CancelToken[monix.eval.Task]", "kind" : "def"}, {"label" : "runAsyncF", "tail" : "(cb: (Either[Throwable, A]) => Unit)(s: Scheduler): CancelToken[Task]", "member" : "monix.eval.Task.runAsyncF", "link" : "monix\/eval\/Task.html#runAsyncF(cb:Either[Throwable,A]=>Unit)(implicits:monix.execution.Scheduler):cats.effect.CancelToken[monix.eval.Task]", "kind" : "final def"}, {"label" : "runAsyncOpt", "tail" : "(cb: (Either[Throwable, A]) => Unit)(s: Scheduler, opts: Options): Cancelable", "member" : "monix.eval.Task.runAsyncOpt", "link" : "monix\/eval\/Task.html#runAsyncOpt(cb:Either[Throwable,A]=>Unit)(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.Cancelable", "kind" : "def"}, {"label" : "runAsync", "tail" : "(cb: (Either[Throwable, A]) => Unit)(s: Scheduler): Cancelable", "member" : "monix.eval.Task.runAsync", "link" : "monix\/eval\/Task.html#runAsync(cb:Either[Throwable,A]=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "runToFutureOpt", "tail" : "(s: Scheduler, opts: Options): CancelableFuture[A]", "member" : "monix.eval.Task.runToFutureOpt", "link" : "monix\/eval\/Task.html#runToFutureOpt(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "runToFuture", "tail" : "(s: Scheduler): CancelableFuture[A]", "member" : "monix.eval.Task.runToFuture", "link" : "monix\/eval\/Task.html#runToFuture(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "forkAndForget", "tail" : "(): Task[Unit]", "member" : "monix.eval.internal.TaskDeprecated.BinCompat.forkAndForget", "link" : "monix\/eval\/Task.html#forkAndForget:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Task.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Task.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Task.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Task.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Task.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Task.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Task.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Task.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Task.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Task.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Task.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Task.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Task.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Task.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Task.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Par", "tail" : "", "member" : "monix.eval.TaskParallelNewtype.Par", "link" : "monix\/eval\/Task$.html#Par", "kind" : "object"}, {"label" : "AsyncBuilder", "tail" : "", "member" : "monix.eval.Task.AsyncBuilder", "link" : "monix\/eval\/Task$.html#AsyncBuilder", "kind" : "object"}, {"label" : "AsyncBuilder", "tail" : "", "member" : "monix.eval.Task.AsyncBuilder", "link" : "monix\/eval\/Task$.html#AsyncBuilder[CancelationToken]extendsAnyRef", "kind" : "abstract class"}, {"label" : "defaultOptions", "tail" : ": Options", "member" : "monix.eval.Task.defaultOptions", "link" : "monix\/eval\/Task$.html#defaultOptions:monix.eval.Task.Options", "kind" : "val"}, {"label" : "Options", "tail" : "", "member" : "monix.eval.Task.Options", "link" : "monix\/eval\/Task$.html#OptionsextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "DeprecatedExtensions", "tail" : "", "member" : "monix.eval.Task.DeprecatedExtensions", "link" : "monix\/eval\/Task$.html#DeprecatedExtensions[+A]extendsAnyValwithTaskDeprecated.Extensions[A]", "kind" : "implicit final class"}, {"label" : "trace", "tail" : ": Task[TaskTrace]", "member" : "monix.eval.Task.trace", "link" : "monix\/eval\/Task$.html#trace:monix.eval.Task[monix.eval.tracing.TaskTrace]", "kind" : "val"}, {"label" : "readOptions", "tail" : ": Task[Options]", "member" : "monix.eval.Task.readOptions", "link" : "monix\/eval\/Task$.html#readOptions:monix.eval.Task[monix.eval.Task.Options]", "kind" : "val"}, {"label" : "liftFromEffect", "tail" : "(F: Effect[F]): ~>[F, Task]", "member" : "monix.eval.Task.liftFromEffect", "link" : "monix\/eval\/Task$.html#liftFromEffect[F[_]](implicitF:cats.effect.Effect[F]):F~>monix.eval.Task", "kind" : "def"}, {"label" : "liftFromConcurrentEffect", "tail" : "(F: ConcurrentEffect[F]): ~>[F, Task]", "member" : "monix.eval.Task.liftFromConcurrentEffect", "link" : "monix\/eval\/Task$.html#liftFromConcurrentEffect[F[_]](implicitF:cats.effect.ConcurrentEffect[F]):F~>monix.eval.Task", "kind" : "def"}, {"label" : "liftFrom", "tail" : "(F: TaskLike[F]): ~>[F, Task]", "member" : "monix.eval.Task.liftFrom", "link" : "monix\/eval\/Task$.html#liftFrom[F[_]](implicitF:monix.eval.TaskLike[F]):F~>monix.eval.Task", "kind" : "def"}, {"label" : "liftToConcurrent", "tail" : "(F: Concurrent[F], eff: ConcurrentEffect[Task]): ~>[Task, F]", "member" : "monix.eval.Task.liftToConcurrent", "link" : "monix\/eval\/Task$.html#liftToConcurrent[F[_]](implicitF:cats.effect.Concurrent[F],impliciteff:cats.effect.ConcurrentEffect[monix.eval.Task]):monix.eval.Task~>F", "kind" : "def"}, {"label" : "liftToAsync", "tail" : "(F: cats.effect.Async[F], eff: Effect[Task]): ~>[Task, F]", "member" : "monix.eval.Task.liftToAsync", "link" : "monix\/eval\/Task$.html#liftToAsync[F[_]](implicitF:cats.effect.Async[F],impliciteff:cats.effect.Effect[monix.eval.Task]):monix.eval.Task~>F", "kind" : "def"}, {"label" : "liftTo", "tail" : "(F: TaskLift[F]): ~>[Task, F]", "member" : "monix.eval.Task.liftTo", "link" : "monix\/eval\/Task$.html#liftTo[F[_]](implicitF:monix.eval.TaskLift[F]):monix.eval.Task~>F", "kind" : "def"}, {"label" : "parZip6", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5], fa6: Task[A6]): Task[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.eval.Task.parZip6", "link" : "monix\/eval\/Task$.html#parZip6[A1,A2,A3,A4,A5,A6](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5],fa6:monix.eval.Task[A6]):monix.eval.Task[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "parZip5", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5]): Task[(A1, A2, A3, A4, A5)]", "member" : "monix.eval.Task.parZip5", "link" : "monix\/eval\/Task$.html#parZip5[A1,A2,A3,A4,A5](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5]):monix.eval.Task[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "parZip4", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4]): Task[(A1, A2, A3, A4)]", "member" : "monix.eval.Task.parZip4", "link" : "monix\/eval\/Task$.html#parZip4[A1,A2,A3,A4](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4]):monix.eval.Task[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "parZip3", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3]): Task[(A1, A2, A3)]", "member" : "monix.eval.Task.parZip3", "link" : "monix\/eval\/Task$.html#parZip3[A1,A2,A3](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3]):monix.eval.Task[(A1,A2,A3)]", "kind" : "def"}, {"label" : "parZip2", "tail" : "(fa1: Task[A1], fa2: Task[A2]): Task[(A1, A2)]", "member" : "monix.eval.Task.parZip2", "link" : "monix\/eval\/Task$.html#parZip2[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2]):monix.eval.Task[(A1,A2)]", "kind" : "def"}, {"label" : "parMap6", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5], fa6: Task[A6])(f: (A1, A2, A3, A4, A5, A6) => R): Task[R]", "member" : "monix.eval.Task.parMap6", "link" : "monix\/eval\/Task$.html#parMap6[A1,A2,A3,A4,A5,A6,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5],fa6:monix.eval.Task[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap5", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5])(f: (A1, A2, A3, A4, A5) => R): Task[R]", "member" : "monix.eval.Task.parMap5", "link" : "monix\/eval\/Task$.html#parMap5[A1,A2,A3,A4,A5,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap4", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4])(f: (A1, A2, A3, A4) => R): Task[R]", "member" : "monix.eval.Task.parMap4", "link" : "monix\/eval\/Task$.html#parMap4[A1,A2,A3,A4,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4])(f:(A1,A2,A3,A4)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3])(f: (A1, A2, A3) => R): Task[R]", "member" : "monix.eval.Task.parMap3", "link" : "monix\/eval\/Task$.html#parMap3[A1,A2,A3,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3])(f:(A1,A2,A3)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(fa1: Task[A1], fa2: Task[A2])(f: (A1, A2) => R): Task[R]", "member" : "monix.eval.Task.parMap2", "link" : "monix\/eval\/Task$.html#parMap2[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2])(f:(A1,A2)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5], fa6: Task[A6])(f: (A1, A2, A3, A4, A5, A6) => R): Task[R]", "member" : "monix.eval.Task.map6", "link" : "monix\/eval\/Task$.html#map6[A1,A2,A3,A4,A5,A6,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5],fa6:monix.eval.Task[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5])(f: (A1, A2, A3, A4, A5) => R): Task[R]", "member" : "monix.eval.Task.map5", "link" : "monix\/eval\/Task$.html#map5[A1,A2,A3,A4,A5,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4])(f: (A1, A2, A3, A4) => R): Task[R]", "member" : "monix.eval.Task.map4", "link" : "monix\/eval\/Task$.html#map4[A1,A2,A3,A4,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4])(f:(A1,A2,A3,A4)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3])(f: (A1, A2, A3) => R): Task[R]", "member" : "monix.eval.Task.map3", "link" : "monix\/eval\/Task$.html#map3[A1,A2,A3,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3])(f:(A1,A2,A3)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: Task[A1], fa2: Task[A2])(f: (A1, A2) => R): Task[R]", "member" : "monix.eval.Task.map2", "link" : "monix\/eval\/Task$.html#map2[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2])(f:(A1,A2)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "mapBoth", "tail" : "(fa1: Task[A1], fa2: Task[A2])(f: (A1, A2) => R): Task[R]", "member" : "monix.eval.Task.mapBoth", "link" : "monix\/eval\/Task$.html#mapBoth[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2])(f:(A1,A2)=>R):monix.eval.Task[R]", "kind" : "def"}, {"label" : "parTraverseUnordered", "tail" : "(in: M[A])(f: (A) => Task[B]): Task[List[B]]", "member" : "monix.eval.Task.parTraverseUnordered", "link" : "monix\/eval\/Task$.html#parTraverseUnordered[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[List[B]]", "kind" : "def"}, {"label" : "parSequenceUnordered", "tail" : "(in: Iterable[Task[A]]): Task[List[A]]", "member" : "monix.eval.Task.parSequenceUnordered", "link" : "monix\/eval\/Task$.html#parSequenceUnordered[A](in:Iterable[monix.eval.Task[A]]):monix.eval.Task[List[A]]", "kind" : "def"}, {"label" : "parTraverseN", "tail" : "(parallelism: Int)(in: Iterable[A])(f: (A) => Task[B]): Task[List[B]]", "member" : "monix.eval.Task.parTraverseN", "link" : "monix\/eval\/Task$.html#parTraverseN[A,B](parallelism:Int)(in:Iterable[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[List[B]]", "kind" : "def"}, {"label" : "parTraverse", "tail" : "(in: M[A])(f: (A) => Task[B])(bf: BuildFrom[M[A], B, M[B]]): Task[M[B]]", "member" : "monix.eval.Task.parTraverse", "link" : "monix\/eval\/Task$.html#parTraverse[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>monix.eval.Task[B])(implicitbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):monix.eval.Task[M[B]]", "kind" : "def"}, {"label" : "parSequenceN", "tail" : "(parallelism: Int)(in: Iterable[Task[A]]): Task[List[A]]", "member" : "monix.eval.Task.parSequenceN", "link" : "monix\/eval\/Task$.html#parSequenceN[A](parallelism:Int)(in:Iterable[monix.eval.Task[A]]):monix.eval.Task[List[A]]", "kind" : "def"}, {"label" : "parSequence", "tail" : "(in: M[Task[A]])(bf: BuildFrom[M[Task[A]], A, M[A]]): Task[M[A]]", "member" : "monix.eval.Task.parSequence", "link" : "monix\/eval\/Task$.html#parSequence[A,M[X]<:Iterable[X]](in:M[monix.eval.Task[A]])(implicitbf:monix.execution.compat.BuildFrom[M[monix.eval.Task[A]],A,M[A]]):monix.eval.Task[M[A]]", "kind" : "def"}, {"label" : "raiseUnless", "tail" : "(cond: Boolean)(e: => Throwable): Task[Unit]", "member" : "monix.eval.Task.raiseUnless", "link" : "monix\/eval\/Task$.html#raiseUnless(cond:Boolean)(e:=>Throwable):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "raiseWhen", "tail" : "(cond: Boolean)(e: => Throwable): Task[Unit]", "member" : "monix.eval.Task.raiseWhen", "link" : "monix\/eval\/Task$.html#raiseWhen(cond:Boolean)(e:=>Throwable):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "unless", "tail" : "(cond: Boolean)(action: => Task[Unit]): Task[Unit]", "member" : "monix.eval.Task.unless", "link" : "monix\/eval\/Task$.html#unless(cond:Boolean)(action:=>monix.eval.Task[Unit]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "when", "tail" : "(cond: Boolean)(action: => Task[Unit]): Task[Unit]", "member" : "monix.eval.Task.when", "link" : "monix\/eval\/Task$.html#when(cond:Boolean)(action:=>monix.eval.Task[Unit]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "traverse", "tail" : "(in: M[A])(f: (A) => Task[B])(bf: BuildFrom[M[A], B, M[B]]): Task[M[B]]", "member" : "monix.eval.Task.traverse", "link" : "monix\/eval\/Task$.html#traverse[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>monix.eval.Task[B])(implicitbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):monix.eval.Task[M[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(in: M[Task[A]])(bf: BuildFrom[M[Task[A]], A, M[A]]): Task[M[A]]", "member" : "monix.eval.Task.sequence", "link" : "monix\/eval\/Task$.html#sequence[A,M[X]<:Iterable[X]](in:M[monix.eval.Task[A]])(implicitbf:monix.execution.compat.BuildFrom[M[monix.eval.Task[A]],A,M[A]]):monix.eval.Task[M[A]]", "kind" : "def"}, {"label" : "sleep", "tail" : "(timespan: FiniteDuration): Task[Unit]", "member" : "monix.eval.Task.sleep", "link" : "monix\/eval\/Task$.html#sleep(timespan:scala.concurrent.duration.FiniteDuration):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(ec: ExecutionContext): Task[Unit]", "member" : "monix.eval.Task.shift", "link" : "monix\/eval\/Task$.html#shift(ec:scala.concurrent.ExecutionContext):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : ": Task[Unit]", "member" : "monix.eval.Task.shift", "link" : "monix\/eval\/Task$.html#shift:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "racePair", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[(A, Fiber[B]), (Fiber[A], B)]]", "member" : "monix.eval.Task.racePair", "link" : "monix\/eval\/Task$.html#racePair[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[(A,monix.eval.Fiber[B]),(monix.eval.Fiber[A],B)]]", "kind" : "def"}, {"label" : "raceMany", "tail" : "(tasks: Iterable[Task[A]]): Task[A]", "member" : "monix.eval.Task.raceMany", "link" : "monix\/eval\/Task$.html#raceMany[A](tasks:Iterable[monix.eval.Task[A]]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: Task[A], fb: Task[B]): Task[Either[A, B]]", "member" : "monix.eval.Task.race", "link" : "monix\/eval\/Task$.html#race[A,B](fa:monix.eval.Task[A],fb:monix.eval.Task[B]):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "fromFutureLike", "tail" : "(tfa: Task[F[A]])(F: FutureLift[Task, F]): Task[A]", "member" : "monix.eval.Task.fromFutureLike", "link" : "monix\/eval\/Task$.html#fromFutureLike[F[_],A](tfa:monix.eval.Task[F[A]])(implicitF:monix.catnap.FutureLift[monix.eval.Task,F]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromCancelablePromise", "tail" : "(p: CancelablePromise[A]): Task[A]", "member" : "monix.eval.Task.fromCancelablePromise", "link" : "monix\/eval\/Task$.html#fromCancelablePromise[A](p:monix.execution.CancelablePromise[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(f: Future[A]): Task[A]", "member" : "monix.eval.Task.fromFuture", "link" : "monix\/eval\/Task$.html#fromFuture[A](f:scala.concurrent.Future[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "create", "tail" : "(): CreatePartiallyApplied[A]", "member" : "monix.eval.Task.create", "link" : "monix\/eval\/Task$.html#create[A]:monix.eval.Task.AsyncBuilder.CreatePartiallyApplied[A]", "kind" : "def"}, {"label" : "cancelBoundary", "tail" : ": Task[Unit]", "member" : "monix.eval.Task.cancelBoundary", "link" : "monix\/eval\/Task$.html#cancelBoundary:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "cancelable0", "tail" : "(register: (Scheduler, Callback[Throwable, A]) => CancelToken[Task]): Task[A]", "member" : "monix.eval.Task.cancelable0", "link" : "monix\/eval\/Task$.html#cancelable0[A](register:(monix.execution.Scheduler,monix.execution.Callback[Throwable,A])=>cats.effect.CancelToken[monix.eval.Task]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(register: (Callback[Throwable, A]) => CancelToken[Task]): Task[A]", "member" : "monix.eval.Task.cancelable", "link" : "monix\/eval\/Task$.html#cancelable[A](register:monix.execution.Callback[Throwable,A]=>cats.effect.CancelToken[monix.eval.Task]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(register: (Callback[Throwable, A]) => Task[Unit]): Task[A]", "member" : "monix.eval.Task.asyncF", "link" : "monix\/eval\/Task$.html#asyncF[A](register:monix.execution.Callback[Throwable,A]=>monix.eval.Task[Unit]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "async0", "tail" : "(register: (Scheduler, Callback[Throwable, A]) => Unit): Task[A]", "member" : "monix.eval.Task.async0", "link" : "monix\/eval\/Task$.html#async0[A](register:(monix.execution.Scheduler,monix.execution.Callback[Throwable,A])=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: (Callback[Throwable, A]) => Unit): Task[A]", "member" : "monix.eval.Task.async", "link" : "monix\/eval\/Task$.html#async[A](register:monix.execution.Callback[Throwable,A]=>Unit):monix.eval.Task[A]", "kind" : "def"}, {"label" : "coeval", "tail" : "(value: Coeval[A]): Task[A]", "member" : "monix.eval.Task.coeval", "link" : "monix\/eval\/Task$.html#coeval[A](value:monix.eval.Coeval[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "unit", "tail" : ": Task[Unit]", "member" : "monix.eval.Task.unit", "link" : "monix\/eval\/Task$.html#unit:monix.eval.Task[Unit]", "kind" : "val"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Either[A, B]]): Task[B]", "member" : "monix.eval.Task.tailRecM", "link" : "monix\/eval\/Task$.html#tailRecM[A,B](a:A)(f:A=>monix.eval.Task[Either[A,B]]):monix.eval.Task[B]", "kind" : "def"}, {"label" : "some", "tail" : "(a: A): Task[Option[A]]", "member" : "monix.eval.Task.some", "link" : "monix\/eval\/Task$.html#some[A](a:A):monix.eval.Task[Option[A]]", "kind" : "def"}, {"label" : "none", "tail" : "(): Task[Option[A]]", "member" : "monix.eval.Task.none", "link" : "monix\/eval\/Task$.html#none[A]:monix.eval.Task[Option[A]]", "kind" : "def"}, {"label" : "right", "tail" : "(a: B): Task[Either[A, B]]", "member" : "monix.eval.Task.right", "link" : "monix\/eval\/Task$.html#right[A,B](a:B):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "left", "tail" : "(a: A): Task[Either[A, B]]", "member" : "monix.eval.Task.left", "link" : "monix\/eval\/Task$.html#left[A,B](a:A):monix.eval.Task[Either[A,B]]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(f: (E) => Throwable)(a: Either[E, A]): Task[A]", "member" : "monix.eval.Task.fromEither", "link" : "monix\/eval\/Task$.html#fromEither[E,A](f:E=>Throwable)(a:Either[E,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(a: Either[E, A]): Task[A]", "member" : "monix.eval.Task.fromEither", "link" : "monix\/eval\/Task$.html#fromEither[E<:Throwable,A](a:Either[E,A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: Try[A]): Task[A]", "member" : "monix.eval.Task.fromTry", "link" : "monix\/eval\/Task$.html#fromTry[A](a:scala.util.Try[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: F[A])(F: Effect[F]): Task[A]", "member" : "monix.eval.Task.fromEffect", "link" : "monix\/eval\/Task$.html#fromEffect[F[_],A](fa:F[A])(implicitF:cats.effect.Effect[F]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromConcurrentEffect", "tail" : "(fa: F[A])(F: ConcurrentEffect[F]): Task[A]", "member" : "monix.eval.Task.fromConcurrentEffect", "link" : "monix\/eval\/Task$.html#fromConcurrentEffect[F[_],A](fa:F[A])(implicitF:cats.effect.ConcurrentEffect[F]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromReactivePublisher", "tail" : "(source: Publisher[A]): Task[Option[A]]", "member" : "monix.eval.Task.fromReactivePublisher", "link" : "monix\/eval\/Task$.html#fromReactivePublisher[A](source:org.reactivestreams.Publisher[A]):monix.eval.Task[Option[A]]", "kind" : "def"}, {"label" : "from", "tail" : "(fa: F[A])(F: TaskLike[F]): Task[A]", "member" : "monix.eval.Task.from", "link" : "monix\/eval\/Task$.html#from[F[_],A](fa:F[A])(implicitF:monix.eval.TaskLike[F]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Task[A]", "member" : "monix.eval.Task.never", "link" : "monix\/eval\/Task$.html#never[A]:monix.eval.Task[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(a: => A): Task[A]", "member" : "monix.eval.Task.delay", "link" : "monix\/eval\/Task$.html#delay[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "evalAsync", "tail" : "(a: => A): Task[A]", "member" : "monix.eval.Task.evalAsync", "link" : "monix\/eval\/Task$.html#evalAsync[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: => A): Task[A]", "member" : "monix.eval.Task.eval", "link" : "monix\/eval\/Task$.html#eval[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "evalOnce", "tail" : "(a: => A): Task[A]", "member" : "monix.eval.Task.evalOnce", "link" : "monix\/eval\/Task$.html#evalOnce[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Task[A]): Task[A]", "member" : "monix.eval.Task.suspend", "link" : "monix\/eval\/Task$.html#suspend[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "deferFutureAction", "tail" : "(f: (Scheduler) => Future[A]): Task[A]", "member" : "monix.eval.Task.deferFutureAction", "link" : "monix\/eval\/Task$.html#deferFutureAction[A](f:monix.execution.Scheduler=>scala.concurrent.Future[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "deferFuture", "tail" : "(fa: => Future[A]): Task[A]", "member" : "monix.eval.Task.deferFuture", "link" : "monix\/eval\/Task$.html#deferFuture[A](fa:=>scala.concurrent.Future[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "deferAction", "tail" : "(f: (Scheduler) => Task[A]): Task[A]", "member" : "monix.eval.Task.deferAction", "link" : "monix\/eval\/Task$.html#deferAction[A](f:monix.execution.Scheduler=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Task[A]): Task[A]", "member" : "monix.eval.Task.defer", "link" : "monix\/eval\/Task$.html#defer[A](fa:=>monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: Throwable): Task[A]", "member" : "monix.eval.Task.raiseError", "link" : "monix\/eval\/Task$.html#raiseError[A](ex:Throwable):monix.eval.Task[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Task[A]", "member" : "monix.eval.Task.pure", "link" : "monix\/eval\/Task$.html#pure[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): Task[A]", "member" : "monix.eval.Task.now", "link" : "monix\/eval\/Task$.html#now[A](a:A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): Task[A]", "member" : "monix.eval.Task.apply", "link" : "monix\/eval\/Task$.html#apply[A](a:=>A):monix.eval.Task[A]", "kind" : "def"}, {"label" : "catsMonoid", "tail" : "(A: Monoid[A]): Monoid[Task[A]]", "member" : "monix.eval.TaskInstancesLevel1.catsMonoid", "link" : "monix\/eval\/Task$.html#catsMonoid[A](implicitA:cats.Monoid[A]):cats.Monoid[monix.eval.Task[A]]", "kind" : "implicit def"}, {"label" : "commutativeApplicative", "tail" : "(): CommutativeApplicative[Par]", "member" : "monix.eval.TaskInstancesLevel1.commutativeApplicative", "link" : "monix\/eval\/Task$.html#commutativeApplicative:cats.CommutativeApplicative[monix.eval.Task.Par]", "kind" : "implicit def"}, {"label" : "catsParallel", "tail" : "(): CatsParallelForTask", "member" : "monix.eval.TaskInstancesLevel1.catsParallel", "link" : "monix\/eval\/Task$.html#catsParallel:monix.eval.instances.CatsParallelForTask", "kind" : "implicit def"}, {"label" : "catsAsync", "tail" : "(): CatsConcurrentForTask", "member" : "monix.eval.TaskInstancesLevel1.catsAsync", "link" : "monix\/eval\/Task$.html#catsAsync:monix.eval.instances.CatsConcurrentForTask", "kind" : "implicit def"}, {"label" : "catsSemigroup", "tail" : "(A: Semigroup[A]): Semigroup[Task[A]]", "member" : "monix.eval.TaskInstancesLevel0.catsSemigroup", "link" : "monix\/eval\/Task$.html#catsSemigroup[A](implicitA:cats.Semigroup[A]):cats.Semigroup[monix.eval.Task[A]]", "kind" : "implicit def"}, {"label" : "catsEffect", "tail" : "(s: Scheduler, opts: Options): CatsConcurrentEffectForTask", "member" : "monix.eval.TaskInstancesLevel0.catsEffect", "link" : "monix\/eval\/Task$.html#catsEffect(implicits:monix.execution.Scheduler,implicitopts:monix.eval.Task.Options):monix.eval.instances.CatsConcurrentEffectForTask", "kind" : "implicit def"}, {"label" : "Par", "tail" : "", "member" : "monix.eval.TaskParallelNewtype.Par", "link" : "monix\/eval\/Task$.html#Par[+A]=TaskParallelNewtype.this.Par.Type[A]", "kind" : "type"}, {"label" : "contextShift", "tail" : "(s: Scheduler): ContextShift[Task]", "member" : "monix.eval.TaskContextShift.contextShift", "link" : "monix\/eval\/Task$.html#contextShift(s:monix.execution.Scheduler):cats.effect.ContextShift[monix.eval.Task]", "kind" : "def"}, {"label" : "contextShift", "tail" : ": ContextShift[Task]", "member" : "monix.eval.TaskContextShift.contextShift", "link" : "monix\/eval\/Task$.html#contextShift:cats.effect.ContextShift[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "timer", "tail" : "(s: Scheduler): Timer[Task]", "member" : "monix.eval.TaskTimers.timer", "link" : "monix\/eval\/Task$.html#timer(s:monix.execution.Scheduler):cats.effect.Timer[monix.eval.Task]", "kind" : "def"}, {"label" : "timer", "tail" : ": Timer[Task]", "member" : "monix.eval.TaskTimers.timer", "link" : "monix\/eval\/Task$.html#timer:cats.effect.Timer[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "clock", "tail" : "(s: Scheduler): Clock[Task]", "member" : "monix.eval.TaskClocks.clock", "link" : "monix\/eval\/Task$.html#clock(s:monix.execution.Scheduler):cats.effect.Clock[monix.eval.Task]", "kind" : "def"}, {"label" : "clock", "tail" : ": Clock[Task]", "member" : "monix.eval.TaskClocks.clock", "link" : "monix\/eval\/Task$.html#clock:cats.effect.Clock[monix.eval.Task]", "kind" : "val"}, {"label" : "wanderUnordered", "tail" : "(in: M[A])(f: (A) => Task[B]): Task[List[B]]", "member" : "monix.eval.internal.TaskDeprecated.Companion.wanderUnordered", "link" : "monix\/eval\/Task$.html#wanderUnordered[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[List[B]]", "kind" : "def"}, {"label" : "wanderN", "tail" : "(parallelism: Int)(in: Iterable[A])(f: (A) => Task[B]): Task[List[B]]", "member" : "monix.eval.internal.TaskDeprecated.Companion.wanderN", "link" : "monix\/eval\/Task$.html#wanderN[A,B](parallelism:Int)(in:Iterable[A])(f:A=>monix.eval.Task[B]):monix.eval.Task[List[B]]", "kind" : "def"}, {"label" : "wander", "tail" : "(in: M[A])(f: (A) => Task[B])(bf: BuildFrom[M[A], B, M[B]]): Task[M[B]]", "member" : "monix.eval.internal.TaskDeprecated.Companion.wander", "link" : "monix\/eval\/Task$.html#wander[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>monix.eval.Task[B])(implicitbf:monix.execution.compat.BuildFrom[M[A],B,M[B]]):monix.eval.Task[M[B]]", "kind" : "def"}, {"label" : "gatherUnordered", "tail" : "(in: Iterable[Task[A]]): Task[List[A]]", "member" : "monix.eval.internal.TaskDeprecated.Companion.gatherUnordered", "link" : "monix\/eval\/Task$.html#gatherUnordered[A](in:Iterable[monix.eval.Task[A]]):monix.eval.Task[List[A]]", "kind" : "def"}, {"label" : "gatherN", "tail" : "(parallelism: Int)(in: Iterable[Task[A]]): Task[List[A]]", "member" : "monix.eval.internal.TaskDeprecated.Companion.gatherN", "link" : "monix\/eval\/Task$.html#gatherN[A](parallelism:Int)(in:Iterable[monix.eval.Task[A]]):monix.eval.Task[List[A]]", "kind" : "def"}, {"label" : "gather", "tail" : "(in: M[Task[A]])(bf: BuildFrom[M[Task[A]], A, M[A]]): Task[M[A]]", "member" : "monix.eval.internal.TaskDeprecated.Companion.gather", "link" : "monix\/eval\/Task$.html#gather[A,M[X]<:Iterable[X]](in:M[monix.eval.Task[A]])(implicitbf:monix.execution.compat.BuildFrom[M[monix.eval.Task[A]],A,M[A]]):monix.eval.Task[M[A]]", "kind" : "def"}, {"label" : "fromIO", "tail" : "(ioa: IO[A]): Task[A]", "member" : "monix.eval.internal.TaskDeprecated.Companion.fromIO", "link" : "monix\/eval\/Task$.html#fromIO[A](ioa:cats.effect.IO[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fromEval", "tail" : "(a: cats.Eval[A]): Task[A]", "member" : "monix.eval.internal.TaskDeprecated.Companion.fromEval", "link" : "monix\/eval\/Task$.html#fromEval[A](a:cats.Eval[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fork", "tail" : "(fa: Task[A], s: Scheduler): Task[A]", "member" : "monix.eval.internal.TaskDeprecated.Companion.fork", "link" : "monix\/eval\/Task$.html#fork[A](fa:monix.eval.Task[A],s:monix.execution.Scheduler):monix.eval.Task[A]", "kind" : "def"}, {"label" : "fork", "tail" : "(fa: Task[A]): Task[A]", "member" : "monix.eval.internal.TaskDeprecated.Companion.fork", "link" : "monix\/eval\/Task$.html#fork[A](fa:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "zip6", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5], fa6: Task[A6]): Task[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.eval.internal.TaskDeprecated.Companion.zip6", "link" : "monix\/eval\/Task$.html#zip6[A1,A2,A3,A4,A5,A6](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5],fa6:monix.eval.Task[A6]):monix.eval.Task[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "zip5", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4], fa5: Task[A5]): Task[(A1, A2, A3, A4, A5)]", "member" : "monix.eval.internal.TaskDeprecated.Companion.zip5", "link" : "monix\/eval\/Task$.html#zip5[A1,A2,A3,A4,A5](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4],fa5:monix.eval.Task[A5]):monix.eval.Task[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "zip4", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3], fa4: Task[A4]): Task[(A1, A2, A3, A4)]", "member" : "monix.eval.internal.TaskDeprecated.Companion.zip4", "link" : "monix\/eval\/Task$.html#zip4[A1,A2,A3,A4](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3],fa4:monix.eval.Task[A4]):monix.eval.Task[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "zip3", "tail" : "(fa1: Task[A1], fa2: Task[A2], fa3: Task[A3]): Task[(A1, A2, A3)]", "member" : "monix.eval.internal.TaskDeprecated.Companion.zip3", "link" : "monix\/eval\/Task$.html#zip3[A1,A2,A3](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2],fa3:monix.eval.Task[A3]):monix.eval.Task[(A1,A2,A3)]", "kind" : "def"}, {"label" : "zip2", "tail" : "(fa1: Task[A1], fa2: Task[A2]): Task[(A1, A2)]", "member" : "monix.eval.internal.TaskDeprecated.Companion.zip2", "link" : "monix\/eval\/Task$.html#zip2[A1,A2,R](fa1:monix.eval.Task[A1],fa2:monix.eval.Task[A2]):monix.eval.Task[(A1,A2)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/Task$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/Task$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/Task$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/Task$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/Task$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/Task$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/Task$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/Task$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/Task$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/Task$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/Task$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/Task$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/Task$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/Task$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/Task$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/Task$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/Task$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/Task.html", "kind" : "class"}, {"name" : "monix.eval.TaskApp", "trait" : "monix\/eval\/TaskApp.html", "kind" : "trait", "members_trait" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "monix.eval.TaskApp.main", "link" : "monix\/eval\/TaskApp.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "catsEffect", "tail" : ": ConcurrentEffect[Task]", "member" : "monix.eval.TaskApp.catsEffect", "link" : "monix\/eval\/TaskApp.html#catsEffect:cats.effect.ConcurrentEffect[monix.eval.Task]", "kind" : "implicit lazy val"}, {"label" : "options", "tail" : "(): Options", "member" : "monix.eval.TaskApp.options", "link" : "monix\/eval\/TaskApp.html#options:monix.eval.Task.Options", "kind" : "def"}, {"label" : "scheduler", "tail" : "(): Scheduler", "member" : "monix.eval.TaskApp.scheduler", "link" : "monix\/eval\/TaskApp.html#scheduler:monix.execution.Scheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskApp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskApp.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskApp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(args: List[String]): Task[ExitCode]", "member" : "monix.eval.TaskApp.run", "link" : "monix\/eval\/TaskApp.html#run(args:List[String]):monix.eval.Task[cats.effect.ExitCode]", "kind" : "abstract def"}], "shortDescription" : "Safe App type that executes a Task."}, {"name" : "monix.eval.TaskCircuitBreaker", "shortDescription" : "DEPRECATED — moved and made generic in monix.catnap.CircuitBreaker.", "object" : "monix\/eval\/package$$TaskCircuitBreaker$.html", "members_object" : [{"label" : "HalfOpen", "tail" : ": catnap.CircuitBreaker.HalfOpen.type", "member" : "monix.eval.TaskCircuitBreaker.HalfOpen", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#HalfOpen:monix.catnap.CircuitBreaker.HalfOpen.type", "kind" : "val"}, {"label" : "HalfOpen", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.HalfOpen", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#HalfOpen=monix.catnap.CircuitBreaker.HalfOpen", "kind" : "type"}, {"label" : "Open", "tail" : ": catnap.CircuitBreaker.Open.type", "member" : "monix.eval.TaskCircuitBreaker.Open", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#Open:monix.catnap.CircuitBreaker.Open.type", "kind" : "val"}, {"label" : "Open", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.Open", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#Open=monix.catnap.CircuitBreaker.Open", "kind" : "type"}, {"label" : "Closed", "tail" : ": catnap.CircuitBreaker.Closed.type", "member" : "monix.eval.TaskCircuitBreaker.Closed", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#Closed:monix.catnap.CircuitBreaker.Closed.type", "kind" : "val"}, {"label" : "Closed", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.Closed", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#Closed=monix.catnap.CircuitBreaker.Closed", "kind" : "type"}, {"label" : "State", "tail" : "", "member" : "monix.eval.TaskCircuitBreaker.State", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#State=monix.catnap.CircuitBreaker.State", "kind" : "type"}, {"label" : "apply", "tail" : "(maxFailures: Int, resetTimeout: FiniteDuration, exponentialBackoffFactor: Double, maxResetTimeout: Duration, onRejected: Task[Unit], onClosed: Task[Unit], onHalfOpen: Task[Unit], onOpen: Task[Unit], padding: PaddingStrategy): Task[CircuitBreaker[Task]]", "member" : "monix.eval.TaskCircuitBreaker.apply", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#apply(maxFailures:Int,resetTimeout:scala.concurrent.duration.FiniteDuration,exponentialBackoffFactor:Double,maxResetTimeout:scala.concurrent.duration.Duration,onRejected:monix.eval.Task[Unit],onClosed:monix.eval.Task[Unit],onHalfOpen:monix.eval.Task[Unit],onOpen:monix.eval.Task[Unit],padding:monix.execution.atomic.PaddingStrategy):monix.eval.Task[monix.catnap.CircuitBreaker[monix.eval.Task]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/package$$TaskCircuitBreaker$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.eval.TaskLift", "object" : "monix\/eval\/TaskLift$.html", "members_object" : [{"label" : "Deprecated", "tail" : "", "member" : "monix.eval.TaskLift.Deprecated", "link" : "monix\/eval\/TaskLift$.html#Deprecated[F[_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "toIO", "tail" : "(eff: ConcurrentEffect[Task]): TaskLift[IO]", "member" : "monix.eval.TaskLift.toIO", "link" : "monix\/eval\/TaskLift$.html#toIO(impliciteff:cats.effect.ConcurrentEffect[monix.eval.Task]):monix.eval.TaskLift[cats.effect.IO]", "kind" : "implicit def"}, {"label" : "toTask", "tail" : ": TaskLift[Task]", "member" : "monix.eval.TaskLift.toTask", "link" : "monix\/eval\/TaskLift$.html#toTask:monix.eval.TaskLift[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(F: TaskLift[F]): TaskLift[F]", "member" : "monix.eval.TaskLift.apply", "link" : "monix\/eval\/TaskLift$.html#apply[F[_]](implicitF:monix.eval.TaskLift[F]):monix.eval.TaskLift[F]", "kind" : "def"}, {"label" : "toConcurrent", "tail" : "(F: Concurrent[F], eff: ConcurrentEffect[Task]): TaskLift[F]", "member" : "monix.eval.TaskLiftImplicits0.toConcurrent", "link" : "monix\/eval\/TaskLift$.html#toConcurrent[F[_]](implicitF:cats.effect.Concurrent[F],impliciteff:cats.effect.ConcurrentEffect[monix.eval.Task]):monix.eval.TaskLift[F]", "kind" : "implicit def"}, {"label" : "toAsync", "tail" : "(F: Async[F], eff: Effect[Task]): TaskLift[F]", "member" : "monix.eval.TaskLiftImplicits1.toAsync", "link" : "monix\/eval\/TaskLift$.html#toAsync[F[_]](implicitF:cats.effect.Async[F],impliciteff:cats.effect.Effect[monix.eval.Task]):monix.eval.TaskLift[F]", "kind" : "implicit def"}, {"label" : "toAnyLiftIO", "tail" : "(F: LiftIO[F], eff: ConcurrentEffect[Task]): TaskLift[F]", "member" : "monix.eval.TaskLiftImplicits2.toAnyLiftIO", "link" : "monix\/eval\/TaskLift$.html#toAnyLiftIO[F[_]](implicitF:cats.effect.LiftIO[F],impliciteff:cats.effect.ConcurrentEffect[monix.eval.Task]):monix.eval.TaskLift[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLift$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLift$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLift$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLift$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLift$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLift$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLift$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLift$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLift$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLift$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLift$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLift$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLift$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLift$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLift$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLift$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLift$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLift$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLift$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/eval\/TaskLift.html", "kind" : "trait", "members_trait" : [{"label" : "narrow", "tail" : "(): FunctionK[F0, F]", "member" : "cats.arrow.FunctionK.narrow", "link" : "monix\/eval\/TaskLift.html#narrow[F0[x]<:F[x]]:cats.arrow.FunctionK[F0,G]", "kind" : "def"}, {"label" : "widen", "tail" : "(): FunctionK[Task, G0]", "member" : "cats.arrow.FunctionK.widen", "link" : "monix\/eval\/TaskLift.html#widen[G0[x]>:G[x]]:cats.arrow.FunctionK[F,G0]", "kind" : "def"}, {"label" : "and", "tail" : "(h: FunctionK[Task, H]): FunctionK[Task, [γ$2$]Tuple2K[F, H, γ$2$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/eval\/TaskLift.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$2$]cats.data.Tuple2K[G,H,γ$2$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, F]): FunctionK[[γ$0$]EitherK[Task, H, γ$0$], F]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/eval\/TaskLift.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$0$]cats.data.EitherK[F,H,γ$0$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[F, H]): FunctionK[Task, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/eval\/TaskLift.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, Task]): FunctionK[E, F]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/eval\/TaskLift.html#compose[E[_]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLift.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLift.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLift.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLift.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLift.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLift.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLift.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(task: Task[A]): F[A]", "member" : "monix.eval.TaskLift.apply", "link" : "monix\/eval\/TaskLift.html#apply[A](task:monix.eval.Task[A]):F[A]", "kind" : "abstract def"}], "shortDescription" : "A lawless type class that specifies conversions from Taskto similar data types (i.e."}, {"name" : "monix.eval.TaskLike", "object" : "monix\/eval\/TaskLike$.html", "members_object" : [{"label" : "Deprecated", "tail" : "", "member" : "monix.eval.TaskLike.Deprecated", "link" : "monix\/eval\/TaskLike$.html#Deprecated[F[_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "fromEither", "tail" : "(): TaskLike[[β$0$]Either[E, β$0$]]", "member" : "monix.eval.TaskLike.fromEither", "link" : "monix\/eval\/TaskLike$.html#fromEither[E<:Throwable]:monix.eval.TaskLike[[β$0$]scala.util.Either[E,β$0$]]", "kind" : "implicit def"}, {"label" : "fromFunction0", "tail" : ": TaskLike[Function0]", "member" : "monix.eval.TaskLike.fromFunction0", "link" : "monix\/eval\/TaskLike$.html#fromFunction0:monix.eval.TaskLike[Function0]", "kind" : "implicit val"}, {"label" : "fromCancelablePromise", "tail" : ": TaskLike[CancelablePromise]", "member" : "monix.eval.TaskLike.fromCancelablePromise", "link" : "monix\/eval\/TaskLike$.html#fromCancelablePromise:monix.eval.TaskLike[monix.execution.CancelablePromise]", "kind" : "implicit val"}, {"label" : "fromTry", "tail" : ": TaskLike[Try]", "member" : "monix.eval.TaskLike.fromTry", "link" : "monix\/eval\/TaskLike$.html#fromTry:monix.eval.TaskLike[scala.util.Try]", "kind" : "implicit val"}, {"label" : "fromSyncIO", "tail" : ": TaskLike[SyncIO]", "member" : "monix.eval.TaskLike.fromSyncIO", "link" : "monix\/eval\/TaskLike$.html#fromSyncIO:monix.eval.TaskLike[cats.effect.SyncIO]", "kind" : "implicit val"}, {"label" : "fromIO", "tail" : ": TaskLike[IO]", "member" : "monix.eval.TaskLike.fromIO", "link" : "monix\/eval\/TaskLike$.html#fromIO:monix.eval.TaskLike[cats.effect.IO]", "kind" : "implicit val"}, {"label" : "fromEval", "tail" : ": TaskLike[Eval]", "member" : "monix.eval.TaskLike.fromEval", "link" : "monix\/eval\/TaskLike$.html#fromEval:monix.eval.TaskLike[cats.Eval]", "kind" : "implicit val"}, {"label" : "fromCoeval", "tail" : ": TaskLike[Coeval]", "member" : "monix.eval.TaskLike.fromCoeval", "link" : "monix\/eval\/TaskLike$.html#fromCoeval:monix.eval.TaskLike[monix.eval.Coeval]", "kind" : "implicit val"}, {"label" : "fromFuture", "tail" : ": TaskLike[Future]", "member" : "monix.eval.TaskLike.fromFuture", "link" : "monix\/eval\/TaskLike$.html#fromFuture:monix.eval.TaskLike[scala.concurrent.Future]", "kind" : "implicit val"}, {"label" : "fromTask", "tail" : ": TaskLike[Task]", "member" : "monix.eval.TaskLike.fromTask", "link" : "monix\/eval\/TaskLike$.html#fromTask:monix.eval.TaskLike[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(F: TaskLike[F]): TaskLike[F]", "member" : "monix.eval.TaskLike.apply", "link" : "monix\/eval\/TaskLike$.html#apply[F[_]](implicitF:monix.eval.TaskLike[F]):monix.eval.TaskLike[F]", "kind" : "def"}, {"label" : "fromConcurrentEffect", "tail" : "(F: ConcurrentEffect[F]): TaskLike[F]", "member" : "monix.eval.TaskLikeImplicits0.fromConcurrentEffect", "link" : "monix\/eval\/TaskLike$.html#fromConcurrentEffect[F[_]](implicitF:cats.effect.ConcurrentEffect[F]):monix.eval.TaskLike[F]", "kind" : "implicit def"}, {"label" : "fromEffect", "tail" : "(F: Effect[F]): TaskLike[F]", "member" : "monix.eval.TaskLikeImplicits1.fromEffect", "link" : "monix\/eval\/TaskLike$.html#fromEffect[F[_]](implicitF:cats.effect.Effect[F]):monix.eval.TaskLike[F]", "kind" : "implicit def"}, {"label" : "fromAnyFutureViaLift", "tail" : "(F: FutureLift[Task, F]): TaskLike[F]", "member" : "monix.eval.TaskLikeImplicits2.fromAnyFutureViaLift", "link" : "monix\/eval\/TaskLike$.html#fromAnyFutureViaLift[F[_]](implicitF:monix.catnap.FutureLift[monix.eval.Task,F]):monix.eval.TaskLike[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLike$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLike$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/eval\/TaskLike.html", "kind" : "trait", "members_trait" : [{"label" : "narrow", "tail" : "(): FunctionK[F0, Task]", "member" : "cats.arrow.FunctionK.narrow", "link" : "monix\/eval\/TaskLike.html#narrow[F0[x]<:F[x]]:cats.arrow.FunctionK[F0,G]", "kind" : "def"}, {"label" : "widen", "tail" : "(): FunctionK[F, G0]", "member" : "cats.arrow.FunctionK.widen", "link" : "monix\/eval\/TaskLike.html#widen[G0[x]>:G[x]]:cats.arrow.FunctionK[F,G0]", "kind" : "def"}, {"label" : "and", "tail" : "(h: FunctionK[F, H]): FunctionK[F, [γ$2$]Tuple2K[Task, H, γ$2$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/eval\/TaskLike.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$2$]cats.data.Tuple2K[G,H,γ$2$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, Task]): FunctionK[[γ$0$]EitherK[F, H, γ$0$], Task]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/eval\/TaskLike.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$0$]cats.data.EitherK[F,H,γ$0$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[Task, H]): FunctionK[F, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/eval\/TaskLike.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, F]): FunctionK[E, Task]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/eval\/TaskLike.html#compose[E[_]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLike.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLike.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[A]): Task[A]", "member" : "monix.eval.TaskLike.apply", "link" : "monix\/eval\/TaskLike.html#apply[A](fa:F[A]):monix.eval.Task[A]", "kind" : "abstract def"}], "shortDescription" : "A lawless type class that provides conversions to Task."}, {"name" : "monix.eval.TaskLocal", "shortDescription" : "A TaskLocal is like aThreadLocalthat is pure and with a flexible scope, being processed in thecontext of the Task data type.", "object" : "monix\/eval\/TaskLocal$.html", "members_class" : [{"label" : "bindClear", "tail" : "(task: Task[R]): Task[R]", "member" : "monix.eval.TaskLocal.bindClear", "link" : "monix\/eval\/TaskLocal.html#bindClear[R](task:monix.eval.Task[R]):monix.eval.Task[R]", "kind" : "def"}, {"label" : "bindL", "tail" : "(value: Task[A])(task: Task[R]): Task[R]", "member" : "monix.eval.TaskLocal.bindL", "link" : "monix\/eval\/TaskLocal.html#bindL[R](value:monix.eval.Task[A])(task:monix.eval.Task[R]):monix.eval.Task[R]", "kind" : "def"}, {"label" : "bind", "tail" : "(value: A)(task: Task[R]): Task[R]", "member" : "monix.eval.TaskLocal.bind", "link" : "monix\/eval\/TaskLocal.html#bind[R](value:A)(task:monix.eval.Task[R]):monix.eval.Task[R]", "kind" : "def"}, {"label" : "clear", "tail" : "(): Task[Unit]", "member" : "monix.eval.TaskLocal.clear", "link" : "monix\/eval\/TaskLocal.html#clear:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "write", "tail" : "(value: A): Task[Unit]", "member" : "monix.eval.TaskLocal.write", "link" : "monix\/eval\/TaskLocal.html#write(value:A):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "read", "tail" : "(): Task[A]", "member" : "monix.eval.TaskLocal.read", "link" : "monix\/eval\/TaskLocal.html#read:monix.eval.Task[A]", "kind" : "def"}, {"label" : "local", "tail" : "(): Task[Local[A]]", "member" : "monix.eval.TaskLocal.local", "link" : "monix\/eval\/TaskLocal.html#local:monix.eval.Task[monix.execution.misc.Local[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLocal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLocal.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLocal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLocal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLocal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLocal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLocal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLocal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLocal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLocal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLocal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLocal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLocal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLocal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLocal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLocal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "isolate", "tail" : "(task: Task[A]): Task[A]", "member" : "monix.eval.TaskLocal.isolate", "link" : "monix\/eval\/TaskLocal$.html#isolate[A](task:monix.eval.Task[A]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "wrap", "tail" : "(local: Task[Local[A]]): Task[TaskLocal[A]]", "member" : "monix.eval.TaskLocal.wrap", "link" : "monix\/eval\/TaskLocal$.html#wrap[A](local:monix.eval.Task[monix.execution.misc.Local[A]]):monix.eval.Task[monix.eval.TaskLocal[A]]", "kind" : "def"}, {"label" : "lazyDefault", "tail" : "(default: Coeval[A]): Task[TaskLocal[A]]", "member" : "monix.eval.TaskLocal.lazyDefault", "link" : "monix\/eval\/TaskLocal$.html#lazyDefault[A](default:monix.eval.Coeval[A]):monix.eval.Task[monix.eval.TaskLocal[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(default: A): Task[TaskLocal[A]]", "member" : "monix.eval.TaskLocal.apply", "link" : "monix\/eval\/TaskLocal$.html#apply[A](default:A):monix.eval.Task[monix.eval.TaskLocal[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/TaskLocal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/TaskLocal$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/TaskLocal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/TaskLocal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/TaskLocal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/TaskLocal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/TaskLocal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/TaskLocal$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/TaskLocal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/TaskLocal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/TaskLocal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/TaskLocal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/TaskLocal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/TaskLocal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/TaskLocal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/TaskLocal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/TaskLocal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/TaskLocal.html", "kind" : "class"}, {"name" : "monix.eval.TaskSemaphore", "shortDescription" : "DEPRECATED — moved and made generic in monix.catnap.Semaphore.", "object" : "monix\/eval\/package$$TaskSemaphore$.html", "members_object" : [{"label" : "apply", "tail" : "(maxParallelism: Int): Task[Semaphore[Task]]", "member" : "monix.eval.TaskSemaphore.apply", "link" : "monix\/eval\/package$$TaskSemaphore$.html#apply(maxParallelism:Int):monix.eval.Task[cats.effect.concurrent.Semaphore[monix.eval.Task]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/package$$TaskSemaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/package$$TaskSemaphore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/package$$TaskSemaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/package$$TaskSemaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/package$$TaskSemaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/package$$TaskSemaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/package$$TaskSemaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$TaskSemaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$TaskSemaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/package$$TaskSemaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/package$$TaskSemaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/package$$TaskSemaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/package$$TaskSemaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/package$$TaskSemaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/package$$TaskSemaphore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/package$$TaskSemaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/package$$TaskSemaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/package$$TaskSemaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/package$$TaskSemaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.eval.tracing" : [{"name" : "monix.eval.tracing.CoevalEvent", "shortDescription" : "All Credits to https:\/\/github.com\/typelevel\/cats-effect and https:\/\/github.com\/RaasAhsan", "object" : "monix\/eval\/tracing\/CoevalEvent$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/CoevalEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/CoevalEvent.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/CoevalEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/CoevalEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/CoevalEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/CoevalEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/CoevalEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/CoevalEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/CoevalEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/tracing\/CoevalEvent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/CoevalEvent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/tracing\/CoevalEvent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/tracing\/CoevalEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/CoevalEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/CoevalEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/CoevalEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "StackTrace", "tail" : "", "member" : "monix.eval.tracing.CoevalEvent.StackTrace", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#StackTraceextendsCoevalEventwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/CoevalEvent$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/CoevalEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/tracing\/CoevalEvent.html", "kind" : "class"}, {"name" : "monix.eval.tracing.CoevalTrace", "shortDescription" : "All Credits to https:\/\/github.com\/typelevel\/cats-effect and https:\/\/github.com\/RaasAhsan", "members_case class" : [{"label" : "showFiberTrace", "tail" : "(options: PrintingOptions): String", "member" : "monix.eval.tracing.CoevalTrace.showFiberTrace", "link" : "monix\/eval\/tracing\/CoevalTrace.html#showFiberTrace(options:monix.eval.tracing.PrintingOptions):String", "kind" : "def"}, {"label" : "printFiberTrace", "tail" : "(options: PrintingOptions): Coeval[Unit]", "member" : "monix.eval.tracing.CoevalTrace.printFiberTrace", "link" : "monix\/eval\/tracing\/CoevalTrace.html#printFiberTrace(options:monix.eval.tracing.PrintingOptions):monix.eval.Coeval[Unit]", "kind" : "def"}, {"member" : "monix.eval.tracing.CoevalTrace#<init>", "error" : "unsupported entity"}, {"label" : "omitted", "tail" : ": Int", "member" : "monix.eval.tracing.CoevalTrace.omitted", "link" : "monix\/eval\/tracing\/CoevalTrace.html#omitted:Int", "kind" : "val"}, {"label" : "captured", "tail" : ": Int", "member" : "monix.eval.tracing.CoevalTrace.captured", "link" : "monix\/eval\/tracing\/CoevalTrace.html#captured:Int", "kind" : "val"}, {"label" : "events", "tail" : ": List[CoevalEvent]", "member" : "monix.eval.tracing.CoevalTrace.events", "link" : "monix\/eval\/tracing\/CoevalTrace.html#events:List[monix.eval.tracing.CoevalEvent]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/eval\/tracing\/CoevalTrace.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/CoevalTrace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/CoevalTrace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/CoevalTrace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/CoevalTrace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/CoevalTrace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/CoevalTrace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/CoevalTrace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalTrace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalTrace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/CoevalTrace.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/CoevalTrace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/CoevalTrace.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/CoevalTrace.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/CoevalTrace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/CoevalTrace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/CoevalTrace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/eval\/tracing\/CoevalTrace.html", "kind" : "case class"}, {"name" : "monix.eval.tracing.PrintingOptions", "shortDescription" : "", "object" : "monix\/eval\/tracing\/PrintingOptions$.html", "members_object" : [{"label" : "apply", "tail" : "(): PrintingOptions", "member" : "monix.eval.tracing.PrintingOptions.apply", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#apply():monix.eval.tracing.PrintingOptions", "kind" : "def"}, {"label" : "Default", "tail" : ": PrintingOptions", "member" : "monix.eval.tracing.PrintingOptions.Default", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#Default:monix.eval.tracing.PrintingOptions", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/PrintingOptions$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/PrintingOptions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withIgnoreStackTraceLines", "tail" : "(ignoreStackTraceLines: Int): PrintingOptions", "member" : "monix.eval.tracing.PrintingOptions.withIgnoreStackTraceLines", "link" : "monix\/eval\/tracing\/PrintingOptions.html#withIgnoreStackTraceLines(ignoreStackTraceLines:Int):monix.eval.tracing.PrintingOptions", "kind" : "def"}, {"label" : "withMaxStackTraceLines", "tail" : "(maxStackTraceLines: Int): PrintingOptions", "member" : "monix.eval.tracing.PrintingOptions.withMaxStackTraceLines", "link" : "monix\/eval\/tracing\/PrintingOptions.html#withMaxStackTraceLines(maxStackTraceLines:Int):monix.eval.tracing.PrintingOptions", "kind" : "def"}, {"label" : "withShowFullStackTraces", "tail" : "(showFullStackTraces: Boolean): PrintingOptions", "member" : "monix.eval.tracing.PrintingOptions.withShowFullStackTraces", "link" : "monix\/eval\/tracing\/PrintingOptions.html#withShowFullStackTraces(showFullStackTraces:Boolean):monix.eval.tracing.PrintingOptions", "kind" : "def"}, {"label" : "ignoreStackTraceLines", "tail" : ": Int", "member" : "monix.eval.tracing.PrintingOptions.ignoreStackTraceLines", "link" : "monix\/eval\/tracing\/PrintingOptions.html#ignoreStackTraceLines:Int", "kind" : "val"}, {"label" : "maxStackTraceLines", "tail" : ": Int", "member" : "monix.eval.tracing.PrintingOptions.maxStackTraceLines", "link" : "monix\/eval\/tracing\/PrintingOptions.html#maxStackTraceLines:Int", "kind" : "val"}, {"label" : "showFullStackTraces", "tail" : ": Boolean", "member" : "monix.eval.tracing.PrintingOptions.showFullStackTraces", "link" : "monix\/eval\/tracing\/PrintingOptions.html#showFullStackTraces:Boolean", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/eval\/tracing\/PrintingOptions.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/PrintingOptions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/PrintingOptions.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/PrintingOptions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/PrintingOptions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/PrintingOptions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/PrintingOptions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/PrintingOptions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/PrintingOptions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/PrintingOptions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/PrintingOptions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/PrintingOptions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/PrintingOptions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/PrintingOptions.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/PrintingOptions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/PrintingOptions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/PrintingOptions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/eval\/tracing\/PrintingOptions.html", "kind" : "case class"}, {"name" : "monix.eval.tracing.TaskEvent", "shortDescription" : "All Credits to https:\/\/github.com\/typelevel\/cats-effect and https:\/\/github.com\/RaasAhsan", "object" : "monix\/eval\/tracing\/TaskEvent$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/TaskEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/TaskEvent.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/TaskEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/TaskEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/TaskEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/TaskEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/TaskEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/TaskEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/TaskEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/tracing\/TaskEvent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/TaskEvent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/tracing\/TaskEvent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/tracing\/TaskEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/TaskEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/TaskEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/TaskEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "StackTrace", "tail" : "", "member" : "monix.eval.tracing.TaskEvent.StackTrace", "link" : "monix\/eval\/tracing\/TaskEvent$.html#StackTraceextendsTaskEventwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/TaskEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/TaskEvent$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/TaskEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/TaskEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/TaskEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/TaskEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/TaskEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/TaskEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/TaskEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/eval\/tracing\/TaskEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/TaskEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/eval\/tracing\/TaskEvent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/eval\/tracing\/TaskEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/TaskEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/TaskEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/TaskEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/eval\/tracing\/TaskEvent.html", "kind" : "class"}, {"name" : "monix.eval.tracing.TaskTrace", "shortDescription" : "All Credits to https:\/\/github.com\/typelevel\/cats-effect and https:\/\/github.com\/RaasAhsan", "members_case class" : [{"label" : "showFiberTrace", "tail" : "(options: PrintingOptions): String", "member" : "monix.eval.tracing.TaskTrace.showFiberTrace", "link" : "monix\/eval\/tracing\/TaskTrace.html#showFiberTrace(options:monix.eval.tracing.PrintingOptions):String", "kind" : "def"}, {"label" : "printFiberTrace", "tail" : "(options: PrintingOptions): Task[Unit]", "member" : "monix.eval.tracing.TaskTrace.printFiberTrace", "link" : "monix\/eval\/tracing\/TaskTrace.html#printFiberTrace(options:monix.eval.tracing.PrintingOptions):monix.eval.Task[Unit]", "kind" : "def"}, {"member" : "monix.eval.tracing.TaskTrace#<init>", "error" : "unsupported entity"}, {"label" : "omitted", "tail" : ": Int", "member" : "monix.eval.tracing.TaskTrace.omitted", "link" : "monix\/eval\/tracing\/TaskTrace.html#omitted:Int", "kind" : "val"}, {"label" : "captured", "tail" : ": Int", "member" : "monix.eval.tracing.TaskTrace.captured", "link" : "monix\/eval\/tracing\/TaskTrace.html#captured:Int", "kind" : "val"}, {"label" : "events", "tail" : ": List[TaskEvent]", "member" : "monix.eval.tracing.TaskTrace.events", "link" : "monix\/eval\/tracing\/TaskTrace.html#events:List[monix.eval.tracing.TaskEvent]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/eval\/tracing\/TaskTrace.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/eval\/tracing\/TaskTrace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/eval\/tracing\/TaskTrace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/eval\/tracing\/TaskTrace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/eval\/tracing\/TaskTrace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/eval\/tracing\/TaskTrace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/eval\/tracing\/TaskTrace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/eval\/tracing\/TaskTrace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskTrace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskTrace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/eval\/tracing\/TaskTrace.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/eval\/tracing\/TaskTrace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/eval\/tracing\/TaskTrace.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/eval\/tracing\/TaskTrace.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/eval\/tracing\/TaskTrace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/eval\/tracing\/TaskTrace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/eval\/tracing\/TaskTrace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/eval\/tracing\/TaskTrace.html", "kind" : "case class"}], "monix.tail.batches" : [{"name" : "monix.tail.batches.ArrayBatch", "shortDescription" : "Batch implementation that wrapsan array, based on ArrayCursor.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.ArrayBatch.foldLeft", "link" : "monix\/tail\/batches\/ArrayBatch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): ArrayBatch[B]", "member" : "monix.tail.batches.ArrayBatch.collect", "link" : "monix\/tail\/batches\/ArrayBatch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.filter", "link" : "monix\/tail\/batches\/ArrayBatch.html#filter(p:A=>Boolean):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ArrayBatch[B]", "member" : "monix.tail.batches.ArrayBatch.map", "link" : "monix\/tail\/batches\/ArrayBatch.html#map[B](f:A=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.slice", "link" : "monix\/tail\/batches\/ArrayBatch.html#slice(from:Int,until:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.drop", "link" : "monix\/tail\/batches\/ArrayBatch.html#drop(n:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ArrayBatch[A]", "member" : "monix.tail.batches.ArrayBatch.take", "link" : "monix\/tail\/batches\/ArrayBatch.html#take(n:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "cursor", "tail" : "(): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayBatch.cursor", "link" : "monix\/tail\/batches\/ArrayBatch.html#cursor():monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"member" : "monix.tail.batches.ArrayBatch#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.ArrayBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/ArrayBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/ArrayBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/ArrayBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/ArrayBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/ArrayBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/ArrayBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/ArrayBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/ArrayBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/ArrayBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/ArrayBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/ArrayBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/ArrayBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/ArrayBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/ArrayBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/ArrayBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/ArrayBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/ArrayBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/ArrayBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/ArrayBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/ArrayBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.ArrayCursor", "shortDescription" : "BatchCursor type that works over an underlying Array.", "members_class" : [{"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "monix.tail.batches.ArrayCursor.toIterator", "link" : "monix\/tail\/batches\/ArrayCursor.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toBatch", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.ArrayCursor.toBatch", "link" : "monix\/tail\/batches\/ArrayCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): ArrayCursor[B]", "member" : "monix.tail.batches.ArrayCursor.collect", "link" : "monix\/tail\/batches\/ArrayCursor.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.filter", "link" : "monix\/tail\/batches\/ArrayCursor.html#filter(p:A=>Boolean):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ArrayCursor[B]", "member" : "monix.tail.batches.ArrayCursor.map", "link" : "monix\/tail\/batches\/ArrayCursor.html#map[B](f:A=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.slice", "link" : "monix\/tail\/batches\/ArrayCursor.html#slice(from:Int,until:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.drop", "link" : "monix\/tail\/batches\/ArrayCursor.html#drop(n:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ArrayCursor[A]", "member" : "monix.tail.batches.ArrayCursor.take", "link" : "monix\/tail\/batches\/ArrayCursor.html#take(n:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "next", "tail" : "(): A", "member" : "monix.tail.batches.ArrayCursor.next", "link" : "monix\/tail\/batches\/ArrayCursor.html#next():A", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.ArrayCursor.hasNext", "link" : "monix\/tail\/batches\/ArrayCursor.html#hasNext():Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "monix.tail.batches.ArrayCursor.length", "link" : "monix\/tail\/batches\/ArrayCursor.html#length:Int", "kind" : "def"}, {"label" : "offset", "tail" : "(): Int", "member" : "monix.tail.batches.ArrayCursor.offset", "link" : "monix\/tail\/batches\/ArrayCursor.html#offset:Int", "kind" : "def"}, {"label" : "array", "tail" : "(): Array[A]", "member" : "monix.tail.batches.ArrayCursor.array", "link" : "monix\/tail\/batches\/ArrayCursor.html#array:Array[A]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : ": Int", "member" : "monix.tail.batches.ArrayCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/ArrayCursor.html#recommendedBatchSize:Int", "kind" : "val"}, {"member" : "monix.tail.batches.ArrayCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.ArrayCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.ArrayCursor#<init>", "error" : "unsupported entity"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/ArrayCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/ArrayCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/ArrayCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/ArrayCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/ArrayCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/ArrayCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/ArrayCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/ArrayCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/ArrayCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/ArrayCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/ArrayCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/ArrayCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/ArrayCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/ArrayCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/ArrayCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/ArrayCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/ArrayCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/ArrayCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/ArrayCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/ArrayCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/ArrayCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/ArrayCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/ArrayCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.Batch", "shortDescription" : "The Batch is a BatchCursor factory, similar in spiritwith Scala's Iterable.", "object" : "monix\/tail\/batches\/Batch$.html", "members_class" : [{"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/Batch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/Batch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/Batch.html#toList:List[A]", "kind" : "def"}, {"member" : "monix.tail.batches.Batch#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/Batch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/Batch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/Batch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/Batch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/Batch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/Batch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/Batch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/Batch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/Batch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/Batch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/Batch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/Batch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/Batch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/Batch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/Batch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/Batch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.Batch.foldLeft", "link" : "monix\/tail\/batches\/Batch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "abstract def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Batch[B]", "member" : "monix.tail.batches.Batch.collect", "link" : "monix\/tail\/batches\/Batch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.Batch[B]", "kind" : "abstract def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Batch[A]", "member" : "monix.tail.batches.Batch.filter", "link" : "monix\/tail\/batches\/Batch.html#filter(p:A=>Boolean):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) => B): Batch[B]", "member" : "monix.tail.batches.Batch.map", "link" : "monix\/tail\/batches\/Batch.html#map[B](f:A=>B):monix.tail.batches.Batch[B]", "kind" : "abstract def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[A]", "member" : "monix.tail.batches.Batch.slice", "link" : "monix\/tail\/batches\/Batch.html#slice(from:Int,until:Int):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "drop", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.Batch.drop", "link" : "monix\/tail\/batches\/Batch.html#drop(n:Int):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.Batch.take", "link" : "monix\/tail\/batches\/Batch.html#take(n:Int):monix.tail.batches.Batch[A]", "kind" : "abstract def"}, {"label" : "cursor", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.Batch.cursor", "link" : "monix\/tail\/batches\/Batch.html#cursor():monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "range", "tail" : "(from: Int, until: Int, step: Int): Batch[Int]", "member" : "monix.tail.batches.Batch.range", "link" : "monix\/tail\/batches\/Batch$.html#range(from:Int,until:Int,step:Int):monix.tail.batches.Batch[Int]", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double], offset: Int, length: Int): DoublesBatch", "member" : "monix.tail.batches.Batch.doubles", "link" : "monix\/tail\/batches\/Batch$.html#doubles(array:Array[Double],offset:Int,length:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double]): DoublesBatch", "member" : "monix.tail.batches.Batch.doubles", "link" : "monix\/tail\/batches\/Batch$.html#doubles(array:Array[Double]):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long], offset: Int, length: Int): LongsBatch", "member" : "monix.tail.batches.Batch.longs", "link" : "monix\/tail\/batches\/Batch$.html#longs(array:Array[Long],offset:Int,length:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long]): LongsBatch", "member" : "monix.tail.batches.Batch.longs", "link" : "monix\/tail\/batches\/Batch$.html#longs(array:Array[Long]):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int]): IntegersBatch", "member" : "monix.tail.batches.Batch.integers", "link" : "monix\/tail\/batches\/Batch$.html#integers(array:Array[Int]):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int], offset: Int, length: Int): IntegersBatch", "member" : "monix.tail.batches.Batch.integers", "link" : "monix\/tail\/batches\/Batch$.html#integers(array:Array[Int],offset:Int,length:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char], offset: Int, length: Int): CharsBatch", "member" : "monix.tail.batches.Batch.chars", "link" : "monix\/tail\/batches\/Batch$.html#chars(array:Array[Char],offset:Int,length:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char]): CharsBatch", "member" : "monix.tail.batches.Batch.chars", "link" : "monix\/tail\/batches\/Batch$.html#chars(array:Array[Char]):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte], offset: Int, length: Int): BytesBatch", "member" : "monix.tail.batches.Batch.bytes", "link" : "monix\/tail\/batches\/Batch$.html#bytes(array:Array[Byte],offset:Int,length:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte]): BytesBatch", "member" : "monix.tail.batches.Batch.bytes", "link" : "monix\/tail\/batches\/Batch$.html#bytes(array:Array[Byte]):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean], offset: Int, length: Int): BooleansBatch", "member" : "monix.tail.batches.Batch.booleans", "link" : "monix\/tail\/batches\/Batch$.html#booleans(array:Array[Boolean],offset:Int,length:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean]): BooleansBatch", "member" : "monix.tail.batches.Batch.booleans", "link" : "monix\/tail\/batches\/Batch$.html#booleans(array:Array[Boolean]):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "empty", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.Batch.empty", "link" : "monix\/tail\/batches\/Batch$.html#empty[A]:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(seq: IndexedSeq[A]): Batch[A]", "member" : "monix.tail.batches.Batch.fromIndexedSeq", "link" : "monix\/tail\/batches\/Batch$.html#fromIndexedSeq[A](seq:IndexedSeq[A]):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A], recommendedBatchSize: Int): Batch[A]", "member" : "monix.tail.batches.Batch.fromSeq", "link" : "monix\/tail\/batches\/Batch$.html#fromSeq[A](seq:Seq[A],recommendedBatchSize:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A]): Batch[A]", "member" : "monix.tail.batches.Batch.fromSeq", "link" : "monix\/tail\/batches\/Batch$.html#fromSeq[A](seq:Seq[A]):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(iter: Iterable[A], recommendedBatchSize: Int): Batch[A]", "member" : "monix.tail.batches.Batch.fromIterable", "link" : "monix\/tail\/batches\/Batch$.html#fromIterable[A](iter:Iterable[A],recommendedBatchSize:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(iter: Iterable[A]): Batch[A]", "member" : "monix.tail.batches.Batch.fromIterable", "link" : "monix\/tail\/batches\/Batch$.html#fromIterable[A](iter:Iterable[A]):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A], offset: Int, length: Int): ArrayBatch[A]", "member" : "monix.tail.batches.Batch.fromArray", "link" : "monix\/tail\/batches\/Batch$.html#fromArray[A](array:Array[A],offset:Int,length:Int):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A]): ArrayBatch[A]", "member" : "monix.tail.batches.Batch.fromArray", "link" : "monix\/tail\/batches\/Batch$.html#fromArray[A](array:Array[A]):monix.tail.batches.ArrayBatch[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): Batch[A]", "member" : "monix.tail.batches.Batch.apply", "link" : "monix\/tail\/batches\/Batch$.html#apply[A](elems:A*):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/Batch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/Batch$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/Batch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/Batch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/Batch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/Batch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/Batch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/Batch$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/Batch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/Batch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/Batch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/Batch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/Batch$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/Batch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/Batch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/Batch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/Batch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/Batch.html", "kind" : "class"}, {"name" : "monix.tail.batches.BatchCursor", "shortDescription" : "Similar to Java's and Scala's Iterator, the BatchCursor type cancan be used to iterate over the data in a collection, but it cannotbe used to modify the underlying collection.", "object" : "monix\/tail\/batches\/BatchCursor$.html", "members_class" : [{"label" : "toBatch", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/BatchCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/BatchCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/BatchCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/BatchCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/BatchCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/BatchCursor.html#isEmpty:Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.BatchCursor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BatchCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BatchCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BatchCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BatchCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BatchCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BatchCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BatchCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BatchCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BatchCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BatchCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BatchCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BatchCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BatchCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BatchCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "monix.tail.batches.BatchCursor.toIterator", "link" : "monix\/tail\/batches\/BatchCursor.html#toIterator:Iterator[A]", "kind" : "abstract def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): BatchCursor[B]", "member" : "monix.tail.batches.BatchCursor.collect", "link" : "monix\/tail\/batches\/BatchCursor.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.BatchCursor[B]", "kind" : "abstract def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.filter", "link" : "monix\/tail\/batches\/BatchCursor.html#filter(p:A=>Boolean):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) => B): BatchCursor[B]", "member" : "monix.tail.batches.BatchCursor.map", "link" : "monix\/tail\/batches\/BatchCursor.html#map[B](f:A=>B):monix.tail.batches.BatchCursor[B]", "kind" : "abstract def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.slice", "link" : "monix\/tail\/batches\/BatchCursor.html#slice(from:Int,until:Int):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "drop", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.drop", "link" : "monix\/tail\/batches\/BatchCursor.html#drop(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.take", "link" : "monix\/tail\/batches\/BatchCursor.html#take(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.BatchCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/BatchCursor.html#recommendedBatchSize:Int", "kind" : "abstract def"}, {"label" : "next", "tail" : "(): A", "member" : "monix.tail.batches.BatchCursor.next", "link" : "monix\/tail\/batches\/BatchCursor.html#next():A", "kind" : "abstract def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.hasNext", "link" : "monix\/tail\/batches\/BatchCursor.html#hasNext():Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "continually", "tail" : "(f: => A): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.continually", "link" : "monix\/tail\/batches\/BatchCursor$.html#continually[A](f:=>A):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "range", "tail" : "(from: Int, until: Int, step: Int): BatchCursor[Int]", "member" : "monix.tail.batches.BatchCursor.range", "link" : "monix\/tail\/batches\/BatchCursor$.html#range(from:Int,until:Int,step:Int):monix.tail.batches.BatchCursor[Int]", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double], offset: Int, length: Int): DoublesCursor", "member" : "monix.tail.batches.BatchCursor.doubles", "link" : "monix\/tail\/batches\/BatchCursor$.html#doubles(array:Array[Double],offset:Int,length:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "doubles", "tail" : "(array: Array[Double]): DoublesCursor", "member" : "monix.tail.batches.BatchCursor.doubles", "link" : "monix\/tail\/batches\/BatchCursor$.html#doubles(array:Array[Double]):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long], offset: Int, length: Int): LongsCursor", "member" : "monix.tail.batches.BatchCursor.longs", "link" : "monix\/tail\/batches\/BatchCursor$.html#longs(array:Array[Long],offset:Int,length:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "longs", "tail" : "(array: Array[Long]): LongsCursor", "member" : "monix.tail.batches.BatchCursor.longs", "link" : "monix\/tail\/batches\/BatchCursor$.html#longs(array:Array[Long]):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int], offset: Int, length: Int): IntegersCursor", "member" : "monix.tail.batches.BatchCursor.integers", "link" : "monix\/tail\/batches\/BatchCursor$.html#integers(array:Array[Int],offset:Int,length:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "integers", "tail" : "(array: Array[Int]): IntegersCursor", "member" : "monix.tail.batches.BatchCursor.integers", "link" : "monix\/tail\/batches\/BatchCursor$.html#integers(array:Array[Int]):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char], offset: Int, length: Int): CharsCursor", "member" : "monix.tail.batches.BatchCursor.chars", "link" : "monix\/tail\/batches\/BatchCursor$.html#chars(array:Array[Char],offset:Int,length:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "chars", "tail" : "(array: Array[Char]): CharsCursor", "member" : "monix.tail.batches.BatchCursor.chars", "link" : "monix\/tail\/batches\/BatchCursor$.html#chars(array:Array[Char]):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte], offset: Int, length: Int): BytesCursor", "member" : "monix.tail.batches.BatchCursor.bytes", "link" : "monix\/tail\/batches\/BatchCursor$.html#bytes(array:Array[Byte],offset:Int,length:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "bytes", "tail" : "(array: Array[Byte]): BytesCursor", "member" : "monix.tail.batches.BatchCursor.bytes", "link" : "monix\/tail\/batches\/BatchCursor$.html#bytes(array:Array[Byte]):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean], offset: Int, length: Int): BooleansCursor", "member" : "monix.tail.batches.BatchCursor.booleans", "link" : "monix\/tail\/batches\/BatchCursor$.html#booleans(array:Array[Boolean],offset:Int,length:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "booleans", "tail" : "(array: Array[Boolean]): BooleansCursor", "member" : "monix.tail.batches.BatchCursor.booleans", "link" : "monix\/tail\/batches\/BatchCursor$.html#booleans(array:Array[Boolean]):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "empty", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.empty", "link" : "monix\/tail\/batches\/BatchCursor$.html#empty[A]:monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromIndexedSeq", "tail" : "(seq: IndexedSeq[A]): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromIndexedSeq", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromIndexedSeq[A](seq:IndexedSeq[A]):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A], recommendedBatchSize: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromSeq", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromSeq[A](seq:Seq[A],recommendedBatchSize:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(seq: Seq[A]): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromSeq", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromSeq[A](seq:Seq[A]):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromAnyArray", "tail" : "(array: Array[_]): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromAnyArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromAnyArray[A](array:Array[_]):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromAnyArray", "tail" : "(array: Array[_], offset: Int, length: Int): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromAnyArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromAnyArray[A](array:Array[_],offset:Int,length:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A], offset: Int, length: Int): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromArray[A](array:Array[A],offset:Int,length:Int):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A]): ArrayCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromArray", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromArray[A](array:Array[A]):monix.tail.batches.ArrayCursor[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iter: Iterator[A], recommendedBatchSize: Int): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromIterator", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromIterator[A](iter:Iterator[A],recommendedBatchSize:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iter: Iterator[A]): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.fromIterator", "link" : "monix\/tail\/batches\/BatchCursor$.html#fromIterator[A](iter:Iterator[A]):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): BatchCursor[A]", "member" : "monix.tail.batches.BatchCursor.apply", "link" : "monix\/tail\/batches\/BatchCursor$.html#apply[A](elems:A*):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BatchCursor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BatchCursor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BatchCursor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BatchCursor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BatchCursor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BatchCursor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BatchCursor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BatchCursor$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BatchCursor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BatchCursor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BatchCursor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BatchCursor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BatchCursor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BatchCursor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BatchCursor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BatchCursor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BatchCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.BooleansBatch", "shortDescription" : "Batch implementation specialized for Boolean.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Boolean) => R): R", "member" : "monix.tail.batches.BooleansBatch.foldLeft", "link" : "monix\/tail\/batches\/BooleansBatch.html#foldLeft[R](initial:R)(op:(R,Boolean)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Boolean, B]): ArrayBatch[B]", "member" : "monix.tail.batches.BooleansBatch.collect", "link" : "monix\/tail\/batches\/BooleansBatch.html#collect[B](pf:PartialFunction[Boolean,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Boolean) => B): ArrayBatch[B]", "member" : "monix.tail.batches.BooleansBatch.map", "link" : "monix\/tail\/batches\/BooleansBatch.html#map[B](f:Boolean=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Boolean) => Boolean): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.filter", "link" : "monix\/tail\/batches\/BooleansBatch.html#filter(p:Boolean=>Boolean):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.slice", "link" : "monix\/tail\/batches\/BooleansBatch.html#slice(from:Int,until:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.drop", "link" : "monix\/tail\/batches\/BooleansBatch.html#drop(n:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BooleansBatch", "member" : "monix.tail.batches.BooleansBatch.take", "link" : "monix\/tail\/batches\/BooleansBatch.html#take(n:Int):monix.tail.batches.BooleansBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): BooleansCursor", "member" : "monix.tail.batches.BooleansBatch.cursor", "link" : "monix\/tail\/batches\/BooleansBatch.html#cursor():monix.tail.batches.BooleansCursor", "kind" : "def"}, {"member" : "monix.tail.batches.BooleansBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Boolean]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/BooleansBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/BooleansBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Boolean]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/BooleansBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BooleansBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BooleansBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BooleansBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BooleansBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BooleansBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BooleansBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BooleansBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BooleansBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BooleansBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BooleansBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BooleansBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BooleansBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BooleansBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BooleansBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BooleansBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BooleansBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BooleansBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.BooleansCursor", "shortDescription" : "BatchCursor implementation specialized for Boolean.", "members_class" : [{"label" : "filter", "tail" : "(p: (Boolean) => Boolean): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.filter", "link" : "monix\/tail\/batches\/BooleansCursor.html#filter(p:Boolean=>Boolean):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.slice", "link" : "monix\/tail\/batches\/BooleansCursor.html#slice(from:Int,until:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.drop", "link" : "monix\/tail\/batches\/BooleansCursor.html#drop(n:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BooleansCursor", "member" : "monix.tail.batches.BooleansCursor.take", "link" : "monix\/tail\/batches\/BooleansCursor.html#take(n:Int):monix.tail.batches.BooleansCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Boolean, B]): ArrayCursor[B]", "member" : "monix.tail.batches.BooleansCursor.collect", "link" : "monix\/tail\/batches\/BooleansCursor.html#collect[B](pf:PartialFunction[Boolean,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Boolean) => B): ArrayCursor[B]", "member" : "monix.tail.batches.BooleansCursor.map", "link" : "monix\/tail\/batches\/BooleansCursor.html#map[B](f:Boolean=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Boolean]", "member" : "monix.tail.batches.BooleansCursor.toIterator", "link" : "monix\/tail\/batches\/BooleansCursor.html#toIterator:Iterator[Boolean]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.BooleansCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/BooleansCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "monix.tail.batches.BooleansCursor.next", "link" : "monix\/tail\/batches\/BooleansCursor.html#next():Boolean", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.BooleansCursor.hasNext", "link" : "monix\/tail\/batches\/BooleansCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.BooleansCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BooleansCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BooleansCursor#<init>", "error" : "unsupported entity"}, {"label" : "toBatch", "tail" : "(): Batch[Boolean]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/BooleansCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/BooleansCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Boolean]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/BooleansCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Boolean) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/BooleansCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/BooleansCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/BooleansCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BooleansCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BooleansCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BooleansCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BooleansCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BooleansCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BooleansCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BooleansCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BooleansCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BooleansCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BooleansCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BooleansCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BooleansCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BooleansCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BooleansCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BooleansCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BooleansCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BooleansCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BooleansCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.BytesBatch", "shortDescription" : "Batch implementation specialized for Byte.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Byte) => R): R", "member" : "monix.tail.batches.BytesBatch.foldLeft", "link" : "monix\/tail\/batches\/BytesBatch.html#foldLeft[R](initial:R)(op:(R,Byte)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Byte, B]): ArrayBatch[B]", "member" : "monix.tail.batches.BytesBatch.collect", "link" : "monix\/tail\/batches\/BytesBatch.html#collect[B](pf:PartialFunction[Byte,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Byte) => B): ArrayBatch[B]", "member" : "monix.tail.batches.BytesBatch.map", "link" : "monix\/tail\/batches\/BytesBatch.html#map[B](f:Byte=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Byte) => Boolean): BytesBatch", "member" : "monix.tail.batches.BytesBatch.filter", "link" : "monix\/tail\/batches\/BytesBatch.html#filter(p:Byte=>Boolean):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BytesBatch", "member" : "monix.tail.batches.BytesBatch.slice", "link" : "monix\/tail\/batches\/BytesBatch.html#slice(from:Int,until:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BytesBatch", "member" : "monix.tail.batches.BytesBatch.drop", "link" : "monix\/tail\/batches\/BytesBatch.html#drop(n:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BytesBatch", "member" : "monix.tail.batches.BytesBatch.take", "link" : "monix\/tail\/batches\/BytesBatch.html#take(n:Int):monix.tail.batches.BytesBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): BytesCursor", "member" : "monix.tail.batches.BytesBatch.cursor", "link" : "monix\/tail\/batches\/BytesBatch.html#cursor():monix.tail.batches.BytesCursor", "kind" : "def"}, {"member" : "monix.tail.batches.BytesBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Byte]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/BytesBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/BytesBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Byte]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/BytesBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BytesBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BytesBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BytesBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BytesBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BytesBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BytesBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BytesBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BytesBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BytesBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BytesBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BytesBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BytesBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BytesBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BytesBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BytesBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BytesBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BytesBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.BytesCursor", "shortDescription" : "BatchCursor implementation specialized for Byte.", "members_class" : [{"label" : "filter", "tail" : "(p: (Byte) => Boolean): BytesCursor", "member" : "monix.tail.batches.BytesCursor.filter", "link" : "monix\/tail\/batches\/BytesCursor.html#filter(p:Byte=>Boolean):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BytesCursor", "member" : "monix.tail.batches.BytesCursor.slice", "link" : "monix\/tail\/batches\/BytesCursor.html#slice(from:Int,until:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BytesCursor", "member" : "monix.tail.batches.BytesCursor.drop", "link" : "monix\/tail\/batches\/BytesCursor.html#drop(n:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BytesCursor", "member" : "monix.tail.batches.BytesCursor.take", "link" : "monix\/tail\/batches\/BytesCursor.html#take(n:Int):monix.tail.batches.BytesCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Byte, B]): ArrayCursor[B]", "member" : "monix.tail.batches.BytesCursor.collect", "link" : "monix\/tail\/batches\/BytesCursor.html#collect[B](pf:PartialFunction[Byte,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Byte) => B): ArrayCursor[B]", "member" : "monix.tail.batches.BytesCursor.map", "link" : "monix\/tail\/batches\/BytesCursor.html#map[B](f:Byte=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Byte]", "member" : "monix.tail.batches.BytesCursor.toIterator", "link" : "monix\/tail\/batches\/BytesCursor.html#toIterator:Iterator[Byte]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.BytesCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/BytesCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Byte", "member" : "monix.tail.batches.BytesCursor.next", "link" : "monix\/tail\/batches\/BytesCursor.html#next():Byte", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.BytesCursor.hasNext", "link" : "monix\/tail\/batches\/BytesCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.BytesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BytesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.BytesCursor#<init>", "error" : "unsupported entity"}, {"label" : "toBatch", "tail" : "(): Batch[Byte]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/BytesCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/BytesCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Byte]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/BytesCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Byte) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/BytesCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/BytesCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/BytesCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/BytesCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/BytesCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/BytesCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/BytesCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/BytesCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/BytesCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/BytesCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/BytesCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/BytesCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/BytesCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/BytesCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/BytesCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/BytesCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/BytesCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/BytesCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/BytesCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/BytesCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/BytesCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.CharsBatch", "shortDescription" : "Batch implementation specialized for Char.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Char) => R): R", "member" : "monix.tail.batches.CharsBatch.foldLeft", "link" : "monix\/tail\/batches\/CharsBatch.html#foldLeft[R](initial:R)(op:(R,Char)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Char, B]): ArrayBatch[B]", "member" : "monix.tail.batches.CharsBatch.collect", "link" : "monix\/tail\/batches\/CharsBatch.html#collect[B](pf:PartialFunction[Char,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Char) => B): ArrayBatch[B]", "member" : "monix.tail.batches.CharsBatch.map", "link" : "monix\/tail\/batches\/CharsBatch.html#map[B](f:Char=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Char) => Boolean): CharsBatch", "member" : "monix.tail.batches.CharsBatch.filter", "link" : "monix\/tail\/batches\/CharsBatch.html#filter(p:Char=>Boolean):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): CharsBatch", "member" : "monix.tail.batches.CharsBatch.slice", "link" : "monix\/tail\/batches\/CharsBatch.html#slice(from:Int,until:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): CharsBatch", "member" : "monix.tail.batches.CharsBatch.drop", "link" : "monix\/tail\/batches\/CharsBatch.html#drop(n:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): CharsBatch", "member" : "monix.tail.batches.CharsBatch.take", "link" : "monix\/tail\/batches\/CharsBatch.html#take(n:Int):monix.tail.batches.CharsBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): CharsCursor", "member" : "monix.tail.batches.CharsBatch.cursor", "link" : "monix\/tail\/batches\/CharsBatch.html#cursor():monix.tail.batches.CharsCursor", "kind" : "def"}, {"member" : "monix.tail.batches.CharsBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Char]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/CharsBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/CharsBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Char]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/CharsBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/CharsBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/CharsBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/CharsBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/CharsBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/CharsBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/CharsBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/CharsBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/CharsBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/CharsBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/CharsBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/CharsBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/CharsBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/CharsBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/CharsBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/CharsBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/CharsBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/CharsBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.CharsCursor", "shortDescription" : "BatchCursor implementation specialized for Char.", "members_class" : [{"label" : "filter", "tail" : "(p: (Char) => Boolean): CharsCursor", "member" : "monix.tail.batches.CharsCursor.filter", "link" : "monix\/tail\/batches\/CharsCursor.html#filter(p:Char=>Boolean):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): CharsCursor", "member" : "monix.tail.batches.CharsCursor.slice", "link" : "monix\/tail\/batches\/CharsCursor.html#slice(from:Int,until:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): CharsCursor", "member" : "monix.tail.batches.CharsCursor.drop", "link" : "monix\/tail\/batches\/CharsCursor.html#drop(n:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): CharsCursor", "member" : "monix.tail.batches.CharsCursor.take", "link" : "monix\/tail\/batches\/CharsCursor.html#take(n:Int):monix.tail.batches.CharsCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Char, B]): ArrayCursor[B]", "member" : "monix.tail.batches.CharsCursor.collect", "link" : "monix\/tail\/batches\/CharsCursor.html#collect[B](pf:PartialFunction[Char,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Char) => B): ArrayCursor[B]", "member" : "monix.tail.batches.CharsCursor.map", "link" : "monix\/tail\/batches\/CharsCursor.html#map[B](f:Char=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Char]", "member" : "monix.tail.batches.CharsCursor.toIterator", "link" : "monix\/tail\/batches\/CharsCursor.html#toIterator:Iterator[Char]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.CharsCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/CharsCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Char", "member" : "monix.tail.batches.CharsCursor.next", "link" : "monix\/tail\/batches\/CharsCursor.html#next():Char", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.CharsCursor.hasNext", "link" : "monix\/tail\/batches\/CharsCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.CharsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.CharsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.CharsCursor#<init>", "error" : "unsupported entity"}, {"label" : "toBatch", "tail" : "(): Batch[Char]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/CharsCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/CharsCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Char]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/CharsCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Char) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/CharsCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/CharsCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/CharsCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/CharsCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/CharsCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/CharsCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/CharsCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/CharsCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/CharsCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/CharsCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/CharsCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/CharsCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/CharsCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/CharsCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/CharsCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/CharsCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/CharsCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/CharsCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/CharsCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/CharsCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/CharsCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.DoublesBatch", "shortDescription" : "Batch implementation specialized for Double.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Double) => R): R", "member" : "monix.tail.batches.DoublesBatch.foldLeft", "link" : "monix\/tail\/batches\/DoublesBatch.html#foldLeft[R](initial:R)(op:(R,Double)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Double, B]): ArrayBatch[B]", "member" : "monix.tail.batches.DoublesBatch.collect", "link" : "monix\/tail\/batches\/DoublesBatch.html#collect[B](pf:PartialFunction[Double,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Double) => B): ArrayBatch[B]", "member" : "monix.tail.batches.DoublesBatch.map", "link" : "monix\/tail\/batches\/DoublesBatch.html#map[B](f:Double=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Double) => Boolean): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.filter", "link" : "monix\/tail\/batches\/DoublesBatch.html#filter(p:Double=>Boolean):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.slice", "link" : "monix\/tail\/batches\/DoublesBatch.html#slice(from:Int,until:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.drop", "link" : "monix\/tail\/batches\/DoublesBatch.html#drop(n:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): DoublesBatch", "member" : "monix.tail.batches.DoublesBatch.take", "link" : "monix\/tail\/batches\/DoublesBatch.html#take(n:Int):monix.tail.batches.DoublesBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): DoublesCursor", "member" : "monix.tail.batches.DoublesBatch.cursor", "link" : "monix\/tail\/batches\/DoublesBatch.html#cursor():monix.tail.batches.DoublesCursor", "kind" : "def"}, {"member" : "monix.tail.batches.DoublesBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Double]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/DoublesBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/DoublesBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Double]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/DoublesBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/DoublesBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/DoublesBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/DoublesBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/DoublesBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/DoublesBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/DoublesBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/DoublesBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/DoublesBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/DoublesBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/DoublesBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/DoublesBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/DoublesBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/DoublesBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/DoublesBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/DoublesBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/DoublesBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/DoublesBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.DoublesCursor", "shortDescription" : "BatchCursor implementation specialized for Double.", "members_class" : [{"label" : "filter", "tail" : "(p: (Double) => Boolean): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.filter", "link" : "monix\/tail\/batches\/DoublesCursor.html#filter(p:Double=>Boolean):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.slice", "link" : "monix\/tail\/batches\/DoublesCursor.html#slice(from:Int,until:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.drop", "link" : "monix\/tail\/batches\/DoublesCursor.html#drop(n:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): DoublesCursor", "member" : "monix.tail.batches.DoublesCursor.take", "link" : "monix\/tail\/batches\/DoublesCursor.html#take(n:Int):monix.tail.batches.DoublesCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Double, B]): ArrayCursor[B]", "member" : "monix.tail.batches.DoublesCursor.collect", "link" : "monix\/tail\/batches\/DoublesCursor.html#collect[B](pf:PartialFunction[Double,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Double) => B): ArrayCursor[B]", "member" : "monix.tail.batches.DoublesCursor.map", "link" : "monix\/tail\/batches\/DoublesCursor.html#map[B](f:Double=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Double]", "member" : "monix.tail.batches.DoublesCursor.toIterator", "link" : "monix\/tail\/batches\/DoublesCursor.html#toIterator:Iterator[Double]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.DoublesCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/DoublesCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Double", "member" : "monix.tail.batches.DoublesCursor.next", "link" : "monix\/tail\/batches\/DoublesCursor.html#next():Double", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.DoublesCursor.hasNext", "link" : "monix\/tail\/batches\/DoublesCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.DoublesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.DoublesCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.DoublesCursor#<init>", "error" : "unsupported entity"}, {"label" : "toBatch", "tail" : "(): Batch[Double]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/DoublesCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/DoublesCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Double]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/DoublesCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Double) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/DoublesCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/DoublesCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/DoublesCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/DoublesCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/DoublesCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/DoublesCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/DoublesCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/DoublesCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/DoublesCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/DoublesCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/DoublesCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/DoublesCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/DoublesCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/DoublesCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/DoublesCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/DoublesCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/DoublesCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/DoublesCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/DoublesCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/DoublesCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/DoublesCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.EmptyBatch", "shortDescription" : "Reusable Batch implementationthat's always empty.", "object" : "monix\/tail\/batches\/EmptyBatch$.html", "members_object" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Nothing) => R): R", "member" : "monix.tail.batches.EmptyBatch.foldLeft", "link" : "monix\/tail\/batches\/EmptyBatch$.html#foldLeft[R](initial:R)(op:(R,Nothing)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Nothing, B]): Batch[B]", "member" : "monix.tail.batches.EmptyBatch.collect", "link" : "monix\/tail\/batches\/EmptyBatch$.html#collect[B](pf:PartialFunction[Nothing,B]):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Nothing) => Boolean): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.filter", "link" : "monix\/tail\/batches\/EmptyBatch$.html#filter(p:Nothing=>Boolean):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Nothing) => B): Batch[B]", "member" : "monix.tail.batches.EmptyBatch.map", "link" : "monix\/tail\/batches\/EmptyBatch$.html#map[B](f:Nothing=>B):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.slice", "link" : "monix\/tail\/batches\/EmptyBatch$.html#slice(from:Int,until:Int):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.drop", "link" : "monix\/tail\/batches\/EmptyBatch$.html#drop(n:Int):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Batch[Nothing]", "member" : "monix.tail.batches.EmptyBatch.take", "link" : "monix\/tail\/batches\/EmptyBatch$.html#take(n:Int):monix.tail.batches.Batch[Nothing]", "kind" : "def"}, {"label" : "cursor", "tail" : "(): EmptyCursor", "member" : "monix.tail.batches.EmptyBatch.cursor", "link" : "monix\/tail\/batches\/EmptyBatch$.html#cursor():monix.tail.batches.EmptyCursor.type", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Nothing]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Nothing]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/EmptyBatch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/EmptyBatch$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/EmptyBatch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/EmptyBatch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/EmptyBatch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/EmptyBatch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/EmptyBatch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyBatch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyBatch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyBatch$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/EmptyBatch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/EmptyBatch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/EmptyBatch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/EmptyBatch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/EmptyBatch$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/EmptyBatch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/EmptyBatch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/EmptyBatch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/EmptyBatch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.tail.batches.EmptyCursor", "shortDescription" : "BatchCursor implementation that's always empty.", "object" : "monix\/tail\/batches\/EmptyCursor$.html", "members_object" : [{"label" : "slice", "tail" : "(from: Int, until: Int): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.slice", "link" : "monix\/tail\/batches\/EmptyCursor$.html#slice(from:Int,until:Int):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Nothing, B]): BatchCursor[B]", "member" : "monix.tail.batches.EmptyCursor.collect", "link" : "monix\/tail\/batches\/EmptyCursor$.html#collect[B](pf:PartialFunction[Nothing,B]):monix.tail.batches.BatchCursor[B]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (Nothing) => Boolean): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.filter", "link" : "monix\/tail\/batches\/EmptyCursor$.html#filter(p:Nothing=>Boolean):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (Nothing) => B): BatchCursor[B]", "member" : "monix.tail.batches.EmptyCursor.map", "link" : "monix\/tail\/batches\/EmptyCursor$.html#map[B](f:Nothing=>B):monix.tail.batches.BatchCursor[B]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.drop", "link" : "monix\/tail\/batches\/EmptyCursor$.html#drop(n:Int):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Int): BatchCursor[Nothing]", "member" : "monix.tail.batches.EmptyCursor.take", "link" : "monix\/tail\/batches\/EmptyCursor$.html#take(n:Int):monix.tail.batches.BatchCursor[Nothing]", "kind" : "final def"}, {"label" : "toIterator", "tail" : "(): Iterator[Nothing]", "member" : "monix.tail.batches.EmptyCursor.toIterator", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toIterator:Iterator[Nothing]", "kind" : "def"}, {"label" : "next", "tail" : "(): Nothing", "member" : "monix.tail.batches.EmptyCursor.next", "link" : "monix\/tail\/batches\/EmptyCursor$.html#next():Nothing", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.EmptyCursor.hasNext", "link" : "monix\/tail\/batches\/EmptyCursor$.html#hasNext():Boolean", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.EmptyCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/EmptyCursor$.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "toBatch", "tail" : "(): Batch[Nothing]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Nothing]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Nothing) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/EmptyCursor$.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/EmptyCursor$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/EmptyCursor$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/EmptyCursor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/EmptyCursor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/EmptyCursor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/EmptyCursor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/EmptyCursor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/EmptyCursor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/EmptyCursor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyCursor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyCursor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/EmptyCursor$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/EmptyCursor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/EmptyCursor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/EmptyCursor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/EmptyCursor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/EmptyCursor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/EmptyCursor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/EmptyCursor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/EmptyCursor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/EmptyCursor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.tail.batches.GenericBatch", "shortDescription" : "Reusable Batch base class that canbe used for implementing generators that simply modify their underlyingcursor reference.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.GenericBatch.foldLeft", "link" : "monix\/tail\/batches\/GenericBatch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Batch[B]", "member" : "monix.tail.batches.GenericBatch.collect", "link" : "monix\/tail\/batches\/GenericBatch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.Batch[B]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Batch[A]", "member" : "monix.tail.batches.GenericBatch.filter", "link" : "monix\/tail\/batches\/GenericBatch.html#filter(p:A=>Boolean):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Batch[B]", "member" : "monix.tail.batches.GenericBatch.map", "link" : "monix\/tail\/batches\/GenericBatch.html#map[B](f:A=>B):monix.tail.batches.Batch[B]", "kind" : "final def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[A]", "member" : "monix.tail.batches.GenericBatch.slice", "link" : "monix\/tail\/batches\/GenericBatch.html#slice(from:Int,until:Int):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.GenericBatch.drop", "link" : "monix\/tail\/batches\/GenericBatch.html#drop(n:Int):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.GenericBatch.take", "link" : "monix\/tail\/batches\/GenericBatch.html#take(n:Int):monix.tail.batches.Batch[A]", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: (BatchCursor[A]) => BatchCursor[B]): Batch[B]", "member" : "monix.tail.batches.GenericBatch.transform", "link" : "monix\/tail\/batches\/GenericBatch.html#transform[B](f:monix.tail.batches.BatchCursor[A]=>monix.tail.batches.BatchCursor[B]):monix.tail.batches.Batch[B]", "kind" : "def"}, {"member" : "monix.tail.batches.GenericBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/GenericBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/GenericBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/GenericBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/GenericBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/GenericBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/GenericBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/GenericBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/GenericBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/GenericBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/GenericBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/GenericBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/GenericBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/GenericBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/GenericBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/GenericBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/GenericBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/GenericBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/GenericBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/GenericBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cursor", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.Batch.cursor", "link" : "monix\/tail\/batches\/GenericBatch.html#cursor():monix.tail.batches.BatchCursor[A]", "kind" : "abstract def"}], "class" : "monix\/tail\/batches\/GenericBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.GenericCursor", "shortDescription" : "Reusable BatchCursor base class that can be used forimplementing cursors by just providing the primitive operations,hasNext, next and recommendedBatchSize.", "members_class" : [{"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "monix.tail.batches.GenericCursor.toIterator", "link" : "monix\/tail\/batches\/GenericCursor.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): BatchCursor[B]", "member" : "monix.tail.batches.GenericCursor.collect", "link" : "monix\/tail\/batches\/GenericCursor.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.BatchCursor[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): BatchCursor[A]", "member" : "monix.tail.batches.GenericCursor.filter", "link" : "monix\/tail\/batches\/GenericCursor.html#filter(p:A=>Boolean):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): BatchCursor[B]", "member" : "monix.tail.batches.GenericCursor.map", "link" : "monix\/tail\/batches\/GenericCursor.html#map[B](f:A=>B):monix.tail.batches.BatchCursor[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BatchCursor[A]", "member" : "monix.tail.batches.GenericCursor.slice", "link" : "monix\/tail\/batches\/GenericCursor.html#slice(from:Int,until:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.GenericCursor.drop", "link" : "monix\/tail\/batches\/GenericCursor.html#drop(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.GenericCursor.take", "link" : "monix\/tail\/batches\/GenericCursor.html#take(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"member" : "monix.tail.batches.GenericCursor#<init>", "error" : "unsupported entity"}, {"label" : "toBatch", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/GenericCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/GenericCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/GenericCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/GenericCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/GenericCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/GenericCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/GenericCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/GenericCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/GenericCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/GenericCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/GenericCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/GenericCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/GenericCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/GenericCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/GenericCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/GenericCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/GenericCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/GenericCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/GenericCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/GenericCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/GenericCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/GenericCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/GenericCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.BatchCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/GenericCursor.html#recommendedBatchSize:Int", "kind" : "abstract def"}, {"label" : "next", "tail" : "(): A", "member" : "monix.tail.batches.BatchCursor.next", "link" : "monix\/tail\/batches\/GenericCursor.html#next():A", "kind" : "abstract def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.hasNext", "link" : "monix\/tail\/batches\/GenericCursor.html#hasNext():Boolean", "kind" : "abstract def"}], "class" : "monix\/tail\/batches\/GenericCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.IntegersBatch", "shortDescription" : "Batch implementation specialized for Int.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Int) => R): R", "member" : "monix.tail.batches.IntegersBatch.foldLeft", "link" : "monix\/tail\/batches\/IntegersBatch.html#foldLeft[R](initial:R)(op:(R,Int)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Int, B]): ArrayBatch[B]", "member" : "monix.tail.batches.IntegersBatch.collect", "link" : "monix\/tail\/batches\/IntegersBatch.html#collect[B](pf:PartialFunction[Int,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) => B): ArrayBatch[B]", "member" : "monix.tail.batches.IntegersBatch.map", "link" : "monix\/tail\/batches\/IntegersBatch.html#map[B](f:Int=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Int) => Boolean): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.filter", "link" : "monix\/tail\/batches\/IntegersBatch.html#filter(p:Int=>Boolean):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.slice", "link" : "monix\/tail\/batches\/IntegersBatch.html#slice(from:Int,until:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.drop", "link" : "monix\/tail\/batches\/IntegersBatch.html#drop(n:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): IntegersBatch", "member" : "monix.tail.batches.IntegersBatch.take", "link" : "monix\/tail\/batches\/IntegersBatch.html#take(n:Int):monix.tail.batches.IntegersBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): IntegersCursor", "member" : "monix.tail.batches.IntegersBatch.cursor", "link" : "monix\/tail\/batches\/IntegersBatch.html#cursor():monix.tail.batches.IntegersCursor", "kind" : "def"}, {"member" : "monix.tail.batches.IntegersBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Int]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/IntegersBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/IntegersBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Int]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/IntegersBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/IntegersBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/IntegersBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/IntegersBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/IntegersBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/IntegersBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/IntegersBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/IntegersBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/IntegersBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/IntegersBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/IntegersBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/IntegersBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/IntegersBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/IntegersBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/IntegersBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/IntegersBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/IntegersBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/IntegersBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.IntegersCursor", "shortDescription" : "BatchCursor implementation specialized for Int.", "members_class" : [{"label" : "filter", "tail" : "(p: (Int) => Boolean): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.filter", "link" : "monix\/tail\/batches\/IntegersCursor.html#filter(p:Int=>Boolean):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.slice", "link" : "monix\/tail\/batches\/IntegersCursor.html#slice(from:Int,until:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.drop", "link" : "monix\/tail\/batches\/IntegersCursor.html#drop(n:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): IntegersCursor", "member" : "monix.tail.batches.IntegersCursor.take", "link" : "monix\/tail\/batches\/IntegersCursor.html#take(n:Int):monix.tail.batches.IntegersCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Int, B]): ArrayCursor[B]", "member" : "monix.tail.batches.IntegersCursor.collect", "link" : "monix\/tail\/batches\/IntegersCursor.html#collect[B](pf:PartialFunction[Int,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) => B): ArrayCursor[B]", "member" : "monix.tail.batches.IntegersCursor.map", "link" : "monix\/tail\/batches\/IntegersCursor.html#map[B](f:Int=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Int]", "member" : "monix.tail.batches.IntegersCursor.toIterator", "link" : "monix\/tail\/batches\/IntegersCursor.html#toIterator:Iterator[Int]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.IntegersCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/IntegersCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Int", "member" : "monix.tail.batches.IntegersCursor.next", "link" : "monix\/tail\/batches\/IntegersCursor.html#next():Int", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.IntegersCursor.hasNext", "link" : "monix\/tail\/batches\/IntegersCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.IntegersCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.IntegersCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.IntegersCursor#<init>", "error" : "unsupported entity"}, {"label" : "toBatch", "tail" : "(): Batch[Int]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/IntegersCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/IntegersCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Int]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/IntegersCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Int) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/IntegersCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/IntegersCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/IntegersCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/IntegersCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/IntegersCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/IntegersCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/IntegersCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/IntegersCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/IntegersCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/IntegersCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IntegersCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/IntegersCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/IntegersCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/IntegersCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/IntegersCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/IntegersCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/IntegersCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/IntegersCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/IntegersCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/IntegersCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/IntegersCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.IteratorCursor", "shortDescription" : "BatchCursor type that works over anunderlying Iterator.", "members_class" : [{"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "monix.tail.batches.IteratorCursor.toIterator", "link" : "monix\/tail\/batches\/IteratorCursor.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): BatchCursor[B]", "member" : "monix.tail.batches.IteratorCursor.collect", "link" : "monix\/tail\/batches\/IteratorCursor.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.BatchCursor[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.filter", "link" : "monix\/tail\/batches\/IteratorCursor.html#filter(p:A=>Boolean):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): BatchCursor[B]", "member" : "monix.tail.batches.IteratorCursor.map", "link" : "monix\/tail\/batches\/IteratorCursor.html#map[B](f:A=>B):monix.tail.batches.BatchCursor[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.slice", "link" : "monix\/tail\/batches\/IteratorCursor.html#slice(from:Int,until:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.drop", "link" : "monix\/tail\/batches\/IteratorCursor.html#drop(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): BatchCursor[A]", "member" : "monix.tail.batches.IteratorCursor.take", "link" : "monix\/tail\/batches\/IteratorCursor.html#take(n:Int):monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"label" : "next", "tail" : "(): A", "member" : "monix.tail.batches.IteratorCursor.next", "link" : "monix\/tail\/batches\/IteratorCursor.html#next():A", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.IteratorCursor.hasNext", "link" : "monix\/tail\/batches\/IteratorCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.IteratorCursor#<init>", "error" : "unsupported entity"}, {"label" : "recommendedBatchSize", "tail" : ": Int", "member" : "monix.tail.batches.IteratorCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/IteratorCursor.html#recommendedBatchSize:Int", "kind" : "val"}, {"label" : "toBatch", "tail" : "(): Batch[A]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/IteratorCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/IteratorCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/IteratorCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/IteratorCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/IteratorCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/IteratorCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/IteratorCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/IteratorCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/IteratorCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/IteratorCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/IteratorCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/IteratorCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/IteratorCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IteratorCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IteratorCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/IteratorCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/IteratorCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/IteratorCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/IteratorCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/IteratorCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/IteratorCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/IteratorCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/IteratorCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/IteratorCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/IteratorCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/IteratorCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.LongsBatch", "shortDescription" : "Batch implementation specialized for Long.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Long) => R): R", "member" : "monix.tail.batches.LongsBatch.foldLeft", "link" : "monix\/tail\/batches\/LongsBatch.html#foldLeft[R](initial:R)(op:(R,Long)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Long, B]): ArrayBatch[B]", "member" : "monix.tail.batches.LongsBatch.collect", "link" : "monix\/tail\/batches\/LongsBatch.html#collect[B](pf:PartialFunction[Long,B]):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Long) => B): ArrayBatch[B]", "member" : "monix.tail.batches.LongsBatch.map", "link" : "monix\/tail\/batches\/LongsBatch.html#map[B](f:Long=>B):monix.tail.batches.ArrayBatch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Long) => Boolean): LongsBatch", "member" : "monix.tail.batches.LongsBatch.filter", "link" : "monix\/tail\/batches\/LongsBatch.html#filter(p:Long=>Boolean):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): LongsBatch", "member" : "monix.tail.batches.LongsBatch.slice", "link" : "monix\/tail\/batches\/LongsBatch.html#slice(from:Int,until:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): LongsBatch", "member" : "monix.tail.batches.LongsBatch.drop", "link" : "monix\/tail\/batches\/LongsBatch.html#drop(n:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): LongsBatch", "member" : "monix.tail.batches.LongsBatch.take", "link" : "monix\/tail\/batches\/LongsBatch.html#take(n:Int):monix.tail.batches.LongsBatch", "kind" : "def"}, {"label" : "cursor", "tail" : "(): LongsCursor", "member" : "monix.tail.batches.LongsBatch.cursor", "link" : "monix\/tail\/batches\/LongsBatch.html#cursor():monix.tail.batches.LongsCursor", "kind" : "def"}, {"member" : "monix.tail.batches.LongsBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[Long]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/LongsBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/LongsBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Long]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/LongsBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/LongsBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/LongsBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/LongsBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/LongsBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/LongsBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/LongsBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/LongsBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/LongsBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/LongsBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/LongsBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/LongsBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/LongsBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/LongsBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/LongsBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/LongsBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/LongsBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/LongsBatch.html", "kind" : "class"}, {"name" : "monix.tail.batches.LongsCursor", "shortDescription" : "BatchCursor implementation specialized for Long.", "members_class" : [{"label" : "filter", "tail" : "(p: (Long) => Boolean): LongsCursor", "member" : "monix.tail.batches.LongsCursor.filter", "link" : "monix\/tail\/batches\/LongsCursor.html#filter(p:Long=>Boolean):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): LongsCursor", "member" : "monix.tail.batches.LongsCursor.slice", "link" : "monix\/tail\/batches\/LongsCursor.html#slice(from:Int,until:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): LongsCursor", "member" : "monix.tail.batches.LongsCursor.drop", "link" : "monix\/tail\/batches\/LongsCursor.html#drop(n:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): LongsCursor", "member" : "monix.tail.batches.LongsCursor.take", "link" : "monix\/tail\/batches\/LongsCursor.html#take(n:Int):monix.tail.batches.LongsCursor", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Long, B]): ArrayCursor[B]", "member" : "monix.tail.batches.LongsCursor.collect", "link" : "monix\/tail\/batches\/LongsCursor.html#collect[B](pf:PartialFunction[Long,B]):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Long) => B): ArrayCursor[B]", "member" : "monix.tail.batches.LongsCursor.map", "link" : "monix\/tail\/batches\/LongsCursor.html#map[B](f:Long=>B):monix.tail.batches.ArrayCursor[B]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Long]", "member" : "monix.tail.batches.LongsCursor.toIterator", "link" : "monix\/tail\/batches\/LongsCursor.html#toIterator:Iterator[Long]", "kind" : "def"}, {"label" : "recommendedBatchSize", "tail" : "(): Int", "member" : "monix.tail.batches.LongsCursor.recommendedBatchSize", "link" : "monix\/tail\/batches\/LongsCursor.html#recommendedBatchSize:Int", "kind" : "def"}, {"label" : "next", "tail" : "(): Long", "member" : "monix.tail.batches.LongsCursor.next", "link" : "monix\/tail\/batches\/LongsCursor.html#next():Long", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "monix.tail.batches.LongsCursor.hasNext", "link" : "monix\/tail\/batches\/LongsCursor.html#hasNext():Boolean", "kind" : "def"}, {"member" : "monix.tail.batches.LongsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.LongsCursor#<init>", "error" : "unsupported entity"}, {"member" : "monix.tail.batches.LongsCursor#<init>", "error" : "unsupported entity"}, {"label" : "toBatch", "tail" : "(): Batch[Long]", "member" : "monix.tail.batches.BatchCursor.toBatch", "link" : "monix\/tail\/batches\/LongsCursor.html#toBatch:monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.BatchCursor.toArray", "link" : "monix\/tail\/batches\/LongsCursor.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Long]", "member" : "monix.tail.batches.BatchCursor.toList", "link" : "monix\/tail\/batches\/LongsCursor.html#toList:List[A]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(initial: R)(op: (R, Long) => R): R", "member" : "monix.tail.batches.BatchCursor.foldLeft", "link" : "monix\/tail\/batches\/LongsCursor.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.nonEmpty", "link" : "monix\/tail\/batches\/LongsCursor.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "monix.tail.batches.BatchCursor.isEmpty", "link" : "monix\/tail\/batches\/LongsCursor.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/LongsCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/LongsCursor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/LongsCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/LongsCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/LongsCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/LongsCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/LongsCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/LongsCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/LongsCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/LongsCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/LongsCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/LongsCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/LongsCursor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/LongsCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/LongsCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/LongsCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/LongsCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/LongsCursor.html", "kind" : "class"}, {"name" : "monix.tail.batches.SeqBatch", "shortDescription" : "Batch implementation that wraps anyScala Seq.", "members_class" : [{"label" : "foldLeft", "tail" : "(initial: R)(op: (R, A) => R): R", "member" : "monix.tail.batches.SeqBatch.foldLeft", "link" : "monix\/tail\/batches\/SeqBatch.html#foldLeft[R](initial:R)(op:(R,A)=>R):R", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Batch[B]", "member" : "monix.tail.batches.SeqBatch.collect", "link" : "monix\/tail\/batches\/SeqBatch.html#collect[B](pf:PartialFunction[A,B]):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Batch[A]", "member" : "monix.tail.batches.SeqBatch.filter", "link" : "monix\/tail\/batches\/SeqBatch.html#filter(p:A=>Boolean):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Batch[B]", "member" : "monix.tail.batches.SeqBatch.map", "link" : "monix\/tail\/batches\/SeqBatch.html#map[B](f:A=>B):monix.tail.batches.Batch[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Batch[A]", "member" : "monix.tail.batches.SeqBatch.slice", "link" : "monix\/tail\/batches\/SeqBatch.html#slice(from:Int,until:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.SeqBatch.drop", "link" : "monix\/tail\/batches\/SeqBatch.html#drop(n:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Batch[A]", "member" : "monix.tail.batches.SeqBatch.take", "link" : "monix\/tail\/batches\/SeqBatch.html#take(n:Int):monix.tail.batches.Batch[A]", "kind" : "def"}, {"label" : "cursor", "tail" : "(): BatchCursor[A]", "member" : "monix.tail.batches.SeqBatch.cursor", "link" : "monix\/tail\/batches\/SeqBatch.html#cursor():monix.tail.batches.BatchCursor[A]", "kind" : "def"}, {"member" : "monix.tail.batches.SeqBatch#<init>", "error" : "unsupported entity"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "monix.tail.batches.Batch.toIterable", "link" : "monix\/tail\/batches\/SeqBatch.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "monix.tail.batches.Batch.toArray", "link" : "monix\/tail\/batches\/SeqBatch.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "monix.tail.batches.Batch.toList", "link" : "monix\/tail\/batches\/SeqBatch.html#toList:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/tail\/batches\/SeqBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/tail\/batches\/SeqBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/tail\/batches\/SeqBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/tail\/batches\/SeqBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/tail\/batches\/SeqBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/tail\/batches\/SeqBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/tail\/batches\/SeqBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/SeqBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/SeqBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/tail\/batches\/SeqBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/tail\/batches\/SeqBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/tail\/batches\/SeqBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/tail\/batches\/SeqBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/tail\/batches\/SeqBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/tail\/batches\/SeqBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/tail\/batches\/SeqBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/tail\/batches\/SeqBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/tail\/batches\/SeqBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/tail\/batches\/SeqBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/tail\/batches\/SeqBatch.html", "kind" : "class"}]};